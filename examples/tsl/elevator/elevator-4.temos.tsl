//-- State: floor, target, q
//-- Inputs: inc, dooropen

//#LIA#

assume {
  eq target c0();
  eq floor c0();
  eq q c0();
}

always assume {
  eq inc c0() || eq inc c1();
  eq dooropen c0() || eq dooropen c1();

  G F (eq dooropen c0());
  G F (eq dooropen c1());
}

always guarantee {
  ge floor c0(); /* INV */
  le floor c15(); /* INV */
  ge target c0(); /* INV */
  le target c15(); /* INV */

  (eq q c0() && (eq dooropen c1()) && (eq inc c1())) -> ([target <- add target c1()] && [q <- c0()]);
  (eq q c0() && (eq dooropen c1()) && (eq inc c0()) && (gt target c0()) ) -> ([target <- sub target c1()] && [q <- c0()]);
  (eq q c0() && eq dooropen c0()) -> ([target <- target] && [q <- c1()]);

  (eq q c1()) -> [floor <- add floor c1()] || [floor <- sub floor c1()] || [floor <- floor];
  (eq q c1() && eq floor target) -> [q <- c0()];

  (eq dooropen c1()) -> [floor <- floor];

  G F (eq floor target);

}
