//-- State: cnt, q
//-- Inputs: request

//#LIA#

assume {
    eq cnt i0();
    eq q i0();
}

always assume {
    eq request i0() || eq request i1();
    F (eq request i0());
    F (eq request i1());
}


always guarantee {
    ge cnt i0(); /* INV */
    le cnt i7(); /* INV */

    ((eq q i0()) && (eq request i1()) && (lt cnt i7())) -> ([q <- i0()] && [cnt <- add cnt i1()]);
    ((eq q i0()) && (eq request i0())) -> ([cnt <- cnt] && [q <- i1()]);
    (eq q i1()) -> (
        ((ge cnt i2()) && [q <- i2()] && [cnt <- sub cnt i2()])
        ||
        ((lt cnt i2()) && [q <- i0()] && [cnt <- i0()])
        ||
        [q <- i1()] && [cnt <- cnt]);

    ((eq q i2()) && (eq request i1()) && (lt cnt i7())) -> [q <- i1()] && [cnt <- add cnt i1()];
    ((eq q i2()) && (eq request i1()) && !(lt cnt i7())) -> [q <- i1()] && [cnt <- cnt];
    F (eq cnt i0());
}