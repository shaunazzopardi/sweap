//-- State: next, vruntime1, vruntime2
//-- Inputs: enqueue1, enqueue2, dequeue1, dequeue2
// A simplified version of the Linux Completely Fair Scheduler.
//#LIA#

assume {
  eq next i0();
  eq vruntime1 i0();
  eq vruntime2 i0();
}

always assume {
    eq enqueue1 i0() || eq enqueue1 i1();
    eq enqueue2 i0() || eq enqueue2 i1();
    
    eq dequeue1 i0() || eq dequeue1 i1();
    eq dequeue2 i0() || eq dequeue2 i1();
    
    !(eq enqueue1 i1() && eq dequeue1 i1());
    !(eq enqueue1 i1() && eq dequeue1 i1());
}

guarantee {
    ![next <- i1()] W eq enqueue1 i1();
    ![next <- i2()] W eq enqueue2 i1();
}

always guarantee {
    ge vruntime1 i0(); /* INV */
    le vruntime1 i7(); /* INV */
    ge vruntime2 i0(); /* INV */
    le vruntime2 i7(); /* INV */

    [next <- i1()] || [next <- i2()] || [next <- i0()];

    eq enqueue1 i1() -> (F [next <- i1()]) || F eq dequeue1 i1();
    eq enqueue2 i1() -> (F [next <- i2()]) || F eq dequeue2 i1();

    eq dequeue1 i1() -> ![next <- i1()] W eq enqueue1 i1();
    eq dequeue2 i1() -> ![next <- i2()] W eq enqueue2 i1();

    eq enqueue2 i1() -> ((gt vruntime1 vruntime2 -> ![next <- i1()]) W eq dequeue2 i1());
    eq enqueue1 i1() -> ((gt vruntime2 vruntime1 -> ![next <- i2()]) W eq dequeue1 i1());

    [next <- i1()] <-> [vruntime1 <- add vruntime1 i1()];
    [next <- i2()] <-> [vruntime2 <- add vruntime2 i1()];
}
