//-- State: cnt, con_room, env_room, q
//-- Inputs: env_cnt, room

assume {
  eq i0() q;
}

always assume {
    (eq room i0()) || (eq room i1());
    (ge env_cnt i0()) && (le env_cnt i10());
}

always guarantee {
  G ((ge cnt i0()) && (le cnt i10()));
  (eq q i0()) -> ([cnt <- env_cnt] && [env_room <- room] && [q <- i1()]);
  ((eq q i1()) && (ge cnt i0())) -> (([cnt <- sub cnt i1()] || [q <- i0()]));
  ((eq q i1()) && (!(eq cnt i0())) && (!(eq con_room env_room))) -> [q <- i2()];
  ((eq q i2()) ) -> (([con_room <- i0()]) && [q <- i1()]);
  ((eq q i1()) && (!(eq cnt i0())) && ((eq con_room env_room))) -> ([q <- i1()] && ([cnt <- sub cnt i1()] || [cnt <- cnt]));

  G F (eq q i0());
}
