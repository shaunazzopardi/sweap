//-- State: cl, cr, stopl, stopr
//-- Inputs: entryl, exitl, entryr, exitr, l2r
//#LIA#

assume {
  eq cl i0(); 
  eq cr i0(); 
  eq entryl i0();
  eq entryr i0();
  eq exitl i0();
  eq exitr i0();
  eq l2r i1();
}

always assume {
  eq entryl i0() || eq entryl i1();
  eq entryr i0() || eq entryr i1();
  eq exitl i0() || eq exitl i1();
  eq exitr i0() || eq exitr i1();
  eq l2r i0() || eq l2r i1();

  eq stopl i1() -> X eq entryl i0();
  eq stopr i1() -> X eq entryr i0();
}

always guarantee {
  ge cl i0(); /* INV */
  ge cr i0(); /* INV */
  [stopl <- i0()] || [stopl <- i1()];
  [stopr <- i0()] || [stopr <- i1()];
  
  [cl <- add cl i1()] || [cl <- sub cl i1()] || [cl <- cl];
  [cr <- add cr i1()] || [cr <- sub cr i1()] || [cr <- cr];

  !(gt cl i0() && gt cr i0());

  (eq entryl i1() && eq exitr i0() && lt cl i10()) <-> [cl <- add cl i1()];
  (eq entryl i0() && eq exitr i1() && gt cl i0()) <-> [cl <- sub cl i1()]; 
  (eq entryr i1() && eq exitl i0() && lt cr i10()) <-> [cr <- add cr i1()];
  (eq entryr i0() && eq exitl i1() && gt cr i0()) <-> [cr <- sub cr i1()];

  (gte cl i0() && lte cl i10());
  (gte cr i0() && lte cr i10());

  (eq stopl i0() && eq l2r i1()) -> X [stopl <- i0()];
  (eq stopr i0() && eq l2r i0()) -> X [stopr <- i0()];

  (eq stopl i1() && eq l2r i1()) -> F (eq l2r i0() || eq stopl i0());
  (eq stopr i1() && eq l2r i0()) -> F (eq l2r i1() || eq stopr i0());
}
