#LIA
//-- State: i_ox, i_rx, loc
//-- Inputs: i_inc, i_stay
guarantee {
[loc  <- int0()];
G ([loc  <- int0()] -> ((((lt i_rx i_ox) && ((gte i_rx int0()))) || (((gt i_rx i_ox) && ((lte i_rx int0()))))) -> (X [loc  <- int1()]) || false) && ((! (((lt i_rx i_ox) && ((gte i_rx int0()))) || (((gt i_rx i_ox) && ((lte i_rx int0()))))) ) -> (X [loc  <- int3()]) || false));
G ([loc  <- int1()] -> ((eq i_rx i_ox) -> (X [loc  <- int4()]) || false) && ((! (eq i_rx i_ox) ) -> ((eq i_rx int0()) -> (X [loc  <- int3()]) || false) && ((! (eq i_rx int0()) ) -> ([i_rx <- i_rx] && X [loc  <- int2()]) || ([i_rx <- (add i_rx int1())] && X [loc  <- int2()]) || ([i_rx <- (sub i_rx int1())] && X [loc  <- int2()]) || false)));
G ([loc  <- int2()] -> ((eq i_stay int1()) -> ([i_ox <- i_ox] && X [loc  <- int1()]) || false) && ((! (eq i_stay int1()) ) -> ((eq i_inc int1()) -> ([i_ox <- (add i_ox int1())] && X [loc  <- int1()]) || false) && ((! (eq i_inc int1()) ) -> ([i_ox <- (sub i_ox int1())] && X [loc  <- int1()]) || false)));
G ([loc  <- int3()] -> (X [loc  <- int3()]) || false);
G ([loc  <- int4()] -> (X [loc  <- int4()]) || false);
}

guarantee { F([loc  <- int3()] || false);}

