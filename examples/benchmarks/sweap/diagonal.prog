program diagonal {
    STATES {
        move0: init,
    }
    ENVIRONMENT EVENTS {
        eincx, stax
    }
    CONTROLLER EVENTS {
        incy, decy
    }
    PROGRAM EVENTS {

    }
    VALUATION {
        x : integer := 0;
        y : integer := 0;
    }
    TRANSITIONS {
        move0 -> move0 [(incy && !decy) && stax $ y := y + 1],
        move0 -> move0 [(!incy && decy) && stax $ y := y - 1],
        move0 -> move0 [(incy <-> decy) && stax],

        move0 -> move0 [(incy && !decy) && !stax && eincx $ y := y + 1; x := x + 1],
        move0 -> move0 [(!incy && decy) && !stax && eincx $ y := y - 1; x := x + 1],
        move0 -> move0 [(incy <-> decy) && !stax && eincx $ x := x + 1],

        move0 -> move0 [(incy && !decy) && !stax && !eincx $ y := y + 1; x := x - 1],
        move0 -> move0 [(!incy && decy) && !stax && !eincx $ y := y - 1; x := x - 1],
        move0 -> move0 [(incy <-> decy) && !stax && !eincx $ x := x - 1]
    }

    SPECIFICATION {
        G !(x - y > 2 || y - x > 2)
    }
}