program elevator {
    STATES {
        q0 : init, q1
    }

    ENVIRONMENT EVENTS {
        inc, dooropen, xory, start, obstacle
    }

    CONTROLLER EVENTS {
        cinc, cdec, cxory, notify
    }

    PROGRAM EVENTS {
    }

    VALUATION {
        target_x : natural := 0;
        target_y : natural := 0;
        car_x : natural := 0;
        car_y : natural := 0;
    }

    TRANSITIONS {
        q0 -> q0 [inc && !start && xory $ target_x := target_x + 1;],
        q0 -> q0 [inc && !start && !xory $ target_y := target_y + 1;],
        q0 -> q0 [!inc && !start && xory $ target_x := target_x - 1;],
        q0 -> q0 [!inc && !start && !xory $ target_y := target_y - 1;],
        q0 -> q1 [start],
        q1 -> q0 [(car_x == target_x) && (car_y == target_y) $],
        q1 -> q1 [((cinc <-> cdec) || obstacle) && !((car_x == target_x) && (car_y == target_y)) $],
        q1 -> q1 [cinc & !cdec && cxory && !obstacle && !((car_x == target_x) && (car_y == target_y)) $ car_x := car_x + 1],
        q1 -> q1 [!cinc & cdec && cxory && !obstacle && !((car_x == target_x) && (car_y == target_y)) $ car_x := car_x - 1],
        q1 -> q1 [cinc & !cdec && !cxory && !obstacle && !((car_x == target_x) && (car_y == target_y)) $ car_y := car_y + 1],
        q1 -> q1 [!cinc & cdec && !cxory && !obstacle && !((car_x == target_x) && (car_y == target_y)) $ car_y := car_y - 1]
    }

    SPECIFICATION{
         ((G F start) & (G F !obstacle))
         ->
         (G F ((car_x == target_x) && (car_y == target_y)))
    }
}