program fig2heim {
    STATES {
        movezero : init, movetarg, setnt, goal
    }

    ENVIRONMENT EVENTS {
        stay, inc, exory
    }

    CONTROLLER EVENTS {
        cinc, stay, xory
    }

    PROGRAM EVENTS {
    }

    VALUATION {
        x : integer := 0;
        tx : integer := 0;
    }

    TRANSITIONS {
        movezero -> goal [x == 0 && y == 0],
        movezero -> movezero [!(x == 0 && y == 0) && (cinc <-> cdec)],
        movezero -> movezero [!(x == 0 && y == 0) && cinc && !cdec $ x := x + 1],
        movezero -> movezero [!(x == 0 && y == 0) && !cinc && cdec $ x := x - 1],
        movetarg -> goal [(x == tx && y == ty)],
        movetarg -> movetarg [!(x == tx && y == ty) && cinc && xory $ x := x + 1],
        movetarg -> movetarg [!(x == tx && y == ty) && !cinc && xory $ x := x - 1],
        movetarg -> movetarg [!(x == tx && y == ty) && cinc && !xory $ y := y + 1],
        movetarg -> movetarg [!(x == tx && y == ty) && !cinc && !xory $ y := y - 1],
        goal -> movezero [!(x == 0 && y == 0)],
        goal -> setnt [x == 0 && y == 0],

        setnt -> setnt [inc && stay && xory $ tx := tx + 1],
        setnt -> setnt [!inc && stay && xory $ tx := tx - 1],
        setnt -> setnt [inc && stay && !xory $ ty := ty + 1],
        setnt -> setnt [!inc && stay && !xory $ ty := ty - 1],
        setnt -> movetarg [!stay]
    }

    SPECIFICATION {
        (G F goal) || F G (setnt)
    }
}