var Int numE
var Int buffE
var Bool processE

inp Bool done

SPECIFICATION

MINE = i64();
MAXB = i128();

buffFull = (gte buffE MAXB);
bufferAdd = ([buffE <- add buffE i1()] && [numE <- numE]);
bufferFlush = ([buffE <- i0()] && [numE <- add numE buffE]);

moreElems = (gt numE MINE);
fewElems = (lt numE MINE);


assume {
    (!processE) && (eq buffE i0()) && (eq numE i0());
}

guarantee{


    // buffering elements

    G ((!processE && !done && !buffFull) -> ((bufferAdd || bufferFlush) && [processE <- processE]));
    G ((!processE && !done && buffFull) -> (bufferFlush && [processE <- processE]));
    G ((!processE && done && (gte buffE MINE)) -> (bufferFlush && [processE <- done]));
    G ((!processE && done && (lt buffE MINE)) -> ([buffE <- buffE] && [numE <- numE] && [processE <- done]));
    G (processE -> [buffE <- buffE]);

    
    // processing elements

    // if enough elements, remove one
    G ((processE && moreElems) -> ([numE <- sub numE i1()] && [processE <- processE]));

    // if too few elems then stuck
    G ((processE && fewElems) -> ([numE <- numE] && [processE <- processE]));

    // flush remaining elements
    G ((processE && !fewElems && !moreElems) -> ([numE <- i0()] && [processE <- false]));
    
    // eventually buffer empty
    G (processE -> F (eq numE i0()));

}

