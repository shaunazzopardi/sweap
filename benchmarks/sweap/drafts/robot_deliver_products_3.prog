program robot_deliver_products_3 {
    STATES {
        moveToOffice : init, office, office1, office2, store, bank, moveToBank, moveToStore, updateProductCode, setd1, setd2, setd3
    }

    ENVIRONMENT EVENTS {
        e, f, g, stop
    }

    CONTROLLER EVENTS {
        a, b
    }

    VALUATION {
        trackPos : integer := 0;
        neededPieces : integer := 0;
        d1 : integer := 0;
        d2 : integer := 0;
        d3 : integer := 0;
        sparePieces : integer := 0;
        productCode : integer := 0;
        money : integer := 0;
    }

    TRANSITIONS {
        moveToOffice -> office [trackPos == 0],
        moveToOffice -> moveToOffice [trackPos != 0 & !a & b $ trackPos := trackPos + 1],
        moveToOffice -> moveToOffice [trackPos != 0 & !a & !b $ trackPos := trackPos - 1],
        moveToOffice -> moveToOffice [trackPos != 0 & a],

        moveToBank -> bank [trackPos == 32],
        moveToBank -> moveToBank [trackPos != 32 & !a & b $ trackPos := trackPos + 1],
        moveToBank -> moveToBank [trackPos != 32 & !a & !b $ trackPos := trackPos - 1],
        moveToBank -> moveToBank [trackPos != 32 & a],

        moveToStore -> store [trackPos == 25],
        moveToStore -> moveToStore [trackPos != 25 & !a & b $ trackPos := trackPos + 1],
        moveToStore -> moveToStore [trackPos != 25 & !a & !b $ trackPos := trackPos - 1],
        moveToStore -> moveToStore [trackPos != 25 & a],

        office -> setd1 [stop & productCode == 1 $ sparePieces := 0; money := 0],
        office -> setd2 [stop & productCode == 2 $ sparePieces := 0; money := 0],
        office -> setd3 [stop & productCode != 1 & productCode != 2 $ sparePieces := 0; money := 0],

        setd1 -> setd1 [e & !stop $ d1 := d1 + 1],
        setd1 -> setd1 [!e & !stop $ d1 := d1 - 1],
        setd1 -> moveToBank [stop $ neededPieces := d1; d1 := 0],

        setd2 -> setd2 [e & !stop $ d2 := d2 + 1],
        setd2 -> setd2 [!e & !stop $ d2 := d2 - 1],
        setd2 -> moveToBank [stop $ neededPieces := d2],

        setd1 -> setd1 [e & !stop $ d1 := d1 + 1],
        setd1 -> setd1 [!e & !stop $ d1 := d1 - 1],
        setd1 -> moveToBank [stop],

        bank -> bank [money < neededPieces $ money := money + 1],
        bank -> moveToStore [!(money < neededPieces)],

        store -> store [sparePieces < neededPieces $ sparePieces := sparePieces + 1],
        store -> updateProductCode [!(sparePieces < neededPieces) $ productCode := productCode + 1],

        updateProductCode -> moveToOffice [(productCode > 3) | (productCode < 1) $ productCode := 1],
        updateProductCode -> moveToOffice [!((productCode > 3) | (productCode < 1))]
    }

    SPECIFICATION {
        G F office
    }
}
