program robot_repair {
    STATES {
        moveToBase : init, base, repair, stock, moveToDevice, moveToStock, countBrokenPieces
    }

    ENVIRONMENT EVENTS {
        einc, stop, break
    }

    CONTROLLER EVENTS {
        a, b
    }

    VALUATION {
        trackPos : integer := 0;
        neededSparePieces : integer := 0;
        sparePieces : integer := 0;
        workingDevice : boolean := true;
    }

    TRANSITIONS {
        moveToBase -> base [trackPos == 23],
        moveToBase -> moveToBase [trackPos != 23 & !a & b $ trackPos := trackPos + 1],
        moveToBase -> moveToBase [trackPos != 23 & !a & !b $ trackPos := trackPos - 1],
        moveToBase -> moveToBase [trackPos != 23 & a],

        moveToDevice -> repair [trackPos == 25],
        moveToDevice -> moveToDevice [trackPos != 25 & !a & b $ trackPos := trackPos + 1],
        moveToDevice -> moveToDevice [trackPos != 25 & !a & !b $ trackPos := trackPos - 1],
        moveToDevice -> moveToDevice [trackPos != 25 & a],

        moveToStock -> stock [trackPos == -3],
        moveToStock -> moveToStock [trackPos != -3 & !a & b $ trackPos := trackPos + 1],
        moveToStock -> moveToStock [trackPos != -3 & !a & !b $ trackPos := trackPos - 1],
        moveToStock -> moveToStock [trackPos != -3 & a],

        base -> countBrokenPieces [workingDevice & break $ neededSparePieces := 0; workingDevice := false],
        base -> base [workingDevice & !break],
        base -> moveToStock [!workingDevice],

        countBrokenPieces -> countBrokenPieces [einc & !stop $ neededSparePieces := neededSparePieces + 1],
        countBrokenPieces -> countBrokenPieces [!einc & !stop $ neededSparePieces := neededSparePieces - 1],
        countBrokenPieces -> base [stop],

        stock -> stock [neededSparePieces <= sparePieces $ sparePieces := sparePieces + 1],
        stock -> moveToDevice [!(neededSparePieces <= sparePieces)],

        repair -> moveToBase [neededSparePieces <= sparePieces $ workingDevice := true; sparePieces := 0],
        repair -> repair [!(neededSparePieces <= sparePieces)]
    }

    SPECIFICATION {
        (G F stop) -> G F base
    }
}