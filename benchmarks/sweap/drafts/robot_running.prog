program robot_collect_samples_v1 {
    STATES {
        base : init, collectSamples, move
    }

    ENVIRONMENT EVENTS {
        e, f, stop, einc
    }

    CONTROLLER EVENTS {
        a, b
    }

    VALUATION {
        samples : integer := 0;
        samplesA : integer := 0;
        samplesB : integer := 0;
        reqSamples : integer := 0;
        task : integer := 0;
        trackPos : integer := 0;
    }

    TRANSITIONS {
        move -> base [trackPos == 23 & a $],
        move -> move [trackPos == 23 & !a & b $ trackPos := trackPos + 1],
        move -> move [trackPos == 23 & !a & !b $ trackPos := trackPos - 1],

        move -> collectSamples [trackPos == 12 & a],
        move -> move [trackPos == 12 & !a & b $ trackPos := trackPos + 1],
        move -> move [trackPos == 12 & !a & !b $ trackPos := trackPos - 1],

        move -> move [!(trackPos == 12 | trackPos == 23) & a $ trackPos := trackPos + 1],
        move -> move [!(trackPos == 12 | trackPos == 23) & !a $ trackPos := trackPos - 1],

        base -> baseNotEmpty [e $ reqSamples := reqSamples + 1],
        base -> base [!e $ reqSamples := reqSamples + 1],

        baseNotEmpty -> baseNotEmpty [einc $ reqSamples := reqSamples + 1],
        baseNotEmpty -> move [!einc],

        collectSamples -> move [!(samples < reqSamples) $ task := 1],
        collectSamples -> collectSamples [samples < reqSamples & !stop & e $ samples := samples + 1; samplesA := 0; samplesB := 0],
        collectSamples -> collectSamples [samples < reqSamples & !stop & !e & f $ samplesA := samplesA + 1],
        collectSamples -> collectSamples [samples < reqSamples & !stop & !e & !f $ samplesB := samplesB + 1],
        collectSamples -> collectSamples [samples < reqSamples & stop & (samplesA > 0 | samplesB > 0) & inc $ samples := samples + samplesA; samplesA := 0; samplesB := 0],
        collectSamples -> collectSamples [samples < reqSamples & stop & (samplesA > 0 | samplesB > 0) & !inc $ samples := samples + samplesB; samplesA := 0; samplesB := 0]
    }

    SPECIFICATION {
        (G F stop) -> G F base
    }
}
