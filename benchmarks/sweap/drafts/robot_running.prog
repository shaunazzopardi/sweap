program robot_running {
    STATES {
        base : init, setInReqSamples, collectSamples, move, setSamplesAB
    }

    ENVIRONMENT EVENTS {
        e, stop
    }

    CONTROLLER EVENTS {
        a, b
    }

    VALUATION {
        samples : integer := 0;
        samplesA : integer := 0;
        samplesB : integer := 0;
        reqSamples : integer := 0;
        task : integer := 0;
        trackPos : integer := 0;
    }

    TRANSITIONS {
        move -> base [trackPos == 23 & task == 1 & a $ reqSamples := 0],
        move -> move [trackPos == 23 & task == 1 & !a & b $ trackPos := trackPos + 1],
        move -> move [trackPos == 23 & task == 1 & !a & !b $ trackPos := trackPos - 1],

        move -> collectSamples [trackPos == 12 & a],
        move -> move [trackPos == 12 & !a & b $ trackPos := trackPos + 1],
        move -> move [trackPos == 12 & !a & !b $ trackPos := trackPos - 1],

        move -> move [!(trackPos == 12 | (trackPos == 23 & task == 1)) & a $ trackPos := trackPos + 1],
        move -> move [!(trackPos == 12 | (trackPos == 23 & task == 1)) & !a $ trackPos := trackPos - 1],

        base -> base [e $ reqSamples := reqSamples + 1],
        base -> move [!e & (reqSamples > 0) $ task := 0],

        collectSamples -> move [!(samples < reqSamples) $ task := 1],
        collectSamples -> setSamplesAB [samples < reqSamples $ samplesA := 0; samplesB := 0],

        setSamplesAB -> collectSamples [stop && !(samplesA > 0 | samplesB > 0) $ samples := samples + 1],
        setSamplesAB -> collectSamples [stop && a && (samplesA > 0 | samplesB > 0) $ samples := samples + samplesA],
        setSamplesAB -> collectSamples [stop && !a && (samplesA > 0 | samplesB > 0) $ samples := samples + samplesB],
        setSamplesAB -> setSamplesAB [!stop && e $ samplesA := samplesA + 1],
        setSamplesAB -> setSamplesAB [!stop && !e $ samplesB := samplesB + 1]
    }

    SPECIFICATION {
        (G F stop) -> G F base
    }
}