//-- State:  cDist, battery, atStationi
//-- Inputs: distToTarget

atStation = eq atStationi i1();

MIND = i50();
MAXD = i70();

MAXBAT = i100();

move =  [cDist <- sub cDist i1()] && [battery <- sub battery i1()];
charge = [cDist <- cDist] && [battery <- add battery i1()];
stay = [cDist <- cDist] && [battery <- battery];
atGoal = (le cDist i0());


assume {
    (eq battery i0());   
    atStation && atStation;

    (ge distToTarget MIND) && (le distToTarget MAXD);    
}


guarantee {
       
    // initially
    atStation && [cDist <- distToTarget] && [atStationi <- i0()] && [battery <- battery];
    X ((ge cDist MIND) && (le cDist MAXD));

    // at station
    X G (atStation && (lt battery distToTarget) ->  [atStationi <- i1()] && charge);
    X G (atStation && (ge battery distToTarget) -> [atStationi <- i1()] && charge || 
                                             [atStationi <- i0()] && stay);   
    // on the way
    G (!atStation && !atGoal -> [atStationi <- i0()] && move);
    G (!atStation && atGoal -> [atStationi <- i0()] && stay);

    // battery 
    G (le battery MAXBAT);
    G (ge battery i0());

    // objective
    F (atGoal);

}
