//-- State: numE, buffE, processE
//-- Inputs: done

assume {
    (eq processE i0()) && (eq buffE i0()) && (eq numE i0());
}

always assume {
    eq done i0() || eq done i1();
}

guarantee {
    G ((!(eq processE i1()) && !(eq done i1()) && !(ge buffE i128())) -> ((([buffE <- add buffE i1()] && [numE <- numE]) || ([buffE <- i0()] && [numE <- (add numE buffE)])) && [processE <- processE]));
    G ((!(eq processE i1()) && !(eq done i1()) && (ge buffE i128())) -> (([buffE <- i0()] && [numE <- add numE buffE]) && [processE <- processE]));
    G ((!(eq processE i1()) && (eq done i1()) && (ge buffE i64())) -> (([buffE <- i0()] && [numE <- add numE buffE]) && [processE <- i1()]));
    G ((!(eq processE i1()) && (eq done i1()) && (lt buffE i64())) -> ([buffE <- buffE] && [numE <- numE] && [processE <- i1()]));
    G ((eq processE i1()) -> [buffE <- buffE]);

    G (((eq processE i1()) && (gt numE i64())) -> ([numE <- sub numE i1()] && [processE <- processE]));

    G (((eq processE i1()) && (lt numE i64())) -> ([numE <- numE] && [processE <- processE]));

    G (((eq processE i1()) && !(lt numE i64()) && !(gt numE i64())) -> ([numE <- i0()] && [processE <- i0()]));
    
    G ((eq processE i1()) -> F (eq numE i0()));

}
