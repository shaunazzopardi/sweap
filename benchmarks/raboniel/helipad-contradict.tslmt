//-- State:  freei, ack, evacTimer
//-- Inputs: departi, landi, r1i, r2i, emergencyi, evacTime

r1 = eq r1i i1();
r2 = eq r2i i1();
emergency = eq emergencyi i1();
depart = eq departi i1();
land = eq landi i1();
free = eq freei i1();

CLEAR = (depart || (le evacTimer i0() && emergency));

guarantee {

    // Handeling of state
    G (free && land -> ([freei <- i0()] W CLEAR));
    G (CLEAR -> ([freei <- i1()] W land));

    // Evacuation on emergency
    G (!emergency -> [evacTimer <- sub i0() i1()]);
    G (emergency && gt evacTimer i0() -> [evacTimer <- sub evacTimer i1()]);
    G (emergency && le evacTimer i0() -> [evacTimer <- evacTime]);
    G (emergency -> F le evacTimer i0());

    // Landing managment
    G ([ack <- i0()] && r1 && !r2 -> ([ack <- i1()] W (land || emergency)));
    G ([ack <- i0()] && r2 && !r1 -> ([ack <- i2()] W (land || emergency)));
    G (emergency -> X [ack <- i0()]); 
}
