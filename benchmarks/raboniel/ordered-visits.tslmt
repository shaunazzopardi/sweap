//-- State:  x, dX
//-- Inputs: first

L1 = i50();
L2 = (sub i0() i50());
START = i0();


move =  [x <- add x dX];
moveUp =  [x <- add x i1()];
moveDown =  [x <- add x (sub i0() i1())];
stay = [x <- x];

changeDir = ([dX <- i1()] || [dX <- sub i0() i1()]);
keepDir = [dX <- dX];
changeDirUp = [dX <- i1()];
changeDirDown = [dX <- sub i0() i1()];


assume {
    (eq x START);

    (eq first i1()) || (eq first i2());
}

guarantee {

    X G ((eq dX i1()) || (eq dX (sub i0() i1())));

    // at the beginning
    stay && changeDir;

    // at L1
    X G ((ge x L1) -> moveDown && changeDirDown);
    
    // at L2
    X G ((le x L2) -> moveUp && changeDirUp);

    // on the way
    X G (!(ge x L1) && !(le x L2) -> move && keepDir);

    F (ge x L1); 
    F (le x L2); 
    ((eq first i1()) -> (!(le x L2) W (ge x L1)));
    ((eq first i2()) -> (!(ge x L1) W (le x L2)));
}
