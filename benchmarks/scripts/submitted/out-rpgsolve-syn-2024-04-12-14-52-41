run-rpgsolve-syn.sh

Benchmark: /home/luca/git/sweap/scripts/../examples/benchmarks/rpgsolve/arbiter.rpg
Runtime: 14900ms
Result: Realizable
read finished con_room env_room cnt;
goto 0;
0: read  finished con_room env_room cnt; case {if true [ cnt := no_of_tasks env_room := roomAorB] goto 1;otherwise abort() };
1: read  finished con_room env_room cnt; case {if (<= cnt 0) [ finished := true] goto 0;if (and (or (<= cnt 10) (<= cnt 2) (<= cnt 11) (<= cnt 5) (<= cnt 12) (<= cnt 3) (<= cnt 13) (<= cnt 6) (<= cnt 1) (<= cnt 14) (<= cnt 7) (<= cnt 15) (<= cnt 16) (not con_room) (<= cnt 17) (<= cnt 0) (<= cnt 18) (not env_room) (<= cnt 19)) (or (<= cnt 4) (<= cnt 10) (<= cnt 2) (<= cnt 11) (<= cnt 5) (<= cnt 12) (<= cnt 3) (<= cnt 13) (<= cnt 6) (<= cnt 1) (<= cnt 14) (<= cnt 7) (<= cnt 15) (<= cnt 16) con_room (<= cnt 17) (<= cnt 0) (<= cnt 18) env_room (<= cnt 19) (<= cnt 9) (<= cnt 8)) (or con_room (not env_room) (<= cnt 0)) (or (not con_room) (<= cnt 0) env_room)) [ cnt := (- cnt 1)] goto 1;if (and (or (<= cnt 12) env_room (<= cnt 5) con_room (<= cnt 2) (<= cnt 13) (<= cnt 6) (<= cnt 14) (<= cnt 8) (<= cnt 7) (<= cnt 3) (<= cnt 15) (<= cnt 9) (<= cnt 16) (<= cnt 10) (<= cnt 17) (<= cnt 4) (<= cnt 18)) (or con_room (<= cnt 0) (not env_room)) (or (<= cnt 1) (<= cnt 12) (<= cnt 5) (<= cnt 2) (<= cnt 13) (<= cnt 6) (<= cnt 14) (<= cnt 8) (<= cnt 7) (<= cnt 3) (<= cnt 15) (<= cnt 9) (<= cnt 16) (<= cnt 10) (<= cnt 17) (<= cnt 4) (<= cnt 18) (<= cnt 0) (not con_room) (not env_room) (<= cnt 11)) (or env_room (<= cnt 0) (not con_room))) [] goto 1;if (and (or (not con_room) (not env_room)) (or (not (<= cnt 0)) (= cnt 1)) (or con_room env_room)) [] goto 2;otherwise abort() };
2: read  finished con_room env_room cnt; case {if (and (or env_room (<= cnt 4) (<= cnt 5) (<= cnt 0) (<= cnt 2) (<= cnt 1) (<= cnt 6) (<= cnt 7) (<= cnt 3) (<= cnt 8) (<= cnt 9) (<= cnt 10) (<= cnt 11) (<= cnt 12) (<= cnt 13)) (or (<= cnt 4) (<= cnt 5) (<= cnt 0) (<= cnt 2) (<= cnt 1) (<= cnt 6) (<= cnt 7) (<= cnt 3) (<= cnt 8) (<= cnt 9) (<= cnt 10) (<= cnt 11) (<= cnt 12) (<= cnt 13) (not env_room) (<= cnt 14) (<= cnt 15))) [ con_room := true] goto 1;if (and (or (<= cnt 3) (<= cnt 7) (<= cnt 12) (<= cnt 13) (<= cnt 2) (<= cnt 4) env_room (<= cnt 8) (<= cnt 14) (<= cnt 15)) (or (<= cnt 6) (<= cnt 3) (<= cnt 7) (<= cnt 12) (<= cnt 13) (<= cnt 2) (<= cnt 4) (<= cnt 11) (<= cnt 10) (<= cnt 5) (<= cnt 1) (<= cnt 0) (<= cnt 9) (not env_room))) [ con_room := false] goto 1;otherwise abort() };
3: goto 3;
4: if (and (or (<= cnt 5) (<= cnt 6) (<= cnt 7) (<= cnt 8) (<= cnt 9) (<= cnt 10) (<= cnt 11) (<= cnt 12) (<= cnt 13) (<= cnt 0) (<= cnt 3) (<= cnt 1) (<= cnt 14) (<= cnt 15)) (or (<= cnt 4) (<= cnt 5) (<= cnt 6) (<= cnt 7) (<= cnt 8) (<= cnt 9) (<= cnt 10) (<= cnt 11) (<= cnt 12) (<= cnt 13) (<= cnt 0) (<= cnt 2) con_room (<= cnt 3) (<= cnt 1) (not env_room)) (or (<= cnt 4) (<= cnt 5) (<= cnt 6) (<= cnt 7) (<= cnt 8) (<= cnt 9) (<= cnt 10) (<= cnt 11) (<= cnt 12) (<= cnt 13) (<= cnt 0) (<= cnt 2) env_room (not con_room))) {goto 4;} else {read  finished con_room env_room cnt; case {if (<= cnt 0) [ cnt := (- cnt 1)] goto 4;if (<= cnt 0) [] goto 4;if (<= cnt 0) [ finished := true] goto 3;if (and (or (not con_room) (not env_room)) (or (<= cnt 1) (<= cnt 2) (<= cnt 3) (<= cnt 4) (<= cnt 5) (<= cnt 6) (<= cnt 7) (<= cnt 8) (<= cnt 9) (<= cnt 10) (<= cnt 11) (<= cnt 12) (<= cnt 13) (<= cnt 14) (<= cnt 15) (<= p0_3__r__nv_cnt (+ (- 1) cnt))) (or con_room env_room) (>= cnt 1)) [] goto 6;if (and (or con_room (not env_room)) (or (<= cnt 2) (<= cnt 3) (<= cnt 4) (<= cnt 5) (<= cnt 6) (<= cnt 7) (<= cnt 8) (<= cnt 9) (<= cnt 10) (<= cnt 11) (<= cnt 12) (<= cnt 13) (<= cnt 14) (<= cnt 15) (<= cnt 16)) (or env_room (not con_room)) (>= cnt 1)) [ cnt := (- cnt 1)] goto 4;if (and (or con_room (not env_room)) (or (<= cnt 1) (<= cnt 2) (<= cnt 3) (<= cnt 4) (<= cnt 5) (<= cnt 6) (<= cnt 7) (<= cnt 8) (<= cnt 9) (<= cnt 10) (<= cnt 11) (<= cnt 12) (<= cnt 13) (<= cnt 14) (<= cnt 15)) (or env_room (not con_room)) (>= cnt 1)) [] goto 4;otherwise abort() };}
5: if (or (<= cnt 8) (<= cnt 9) (<= cnt 10) (<= cnt 11) (<= cnt 12) (<= cnt 13) (<= cnt 14) (<= cnt 15) (<= cnt 0)) {goto 5;} else {[ p0_3__r__nv_finished:=finished p0_3__r__nv_con_room:=con_room p0_3__r__nv_env_room:=env_room p0_3__r__nv_cnt:=cnt ]; read  finished con_room env_room cnt; case {if true [ con_room := true] goto 4;if true [ con_room := false] goto 4;otherwise abort() };}
6: if (or (<= cnt 8) (<= cnt 9) (<= cnt 10) (<= cnt 11) (<= cnt 12) (<= cnt 13) (<= cnt 14) (<= cnt 15) (<= cnt 0) (<= p0_3__r__nv_cnt (+ (- 1) cnt))) {goto 5;} else {abort();}
7: goto 7;
8: if (and (or (not env_room) con_room (<= cnt 1) (<= cnt 2) (<= cnt 3) (<= cnt 4) (<= cnt 5) (<= cnt 6) (<= cnt 7) (<= cnt 8) (<= cnt 9) (<= cnt 10) (<= cnt 11) (<= cnt 12) (<= cnt 13) (<= cnt 14) (<= cnt 15) (<= p0_3__r__nv_cnt (+ (- 1) cnt))) (or env_room con_room (<= cnt 1) (<= cnt 2) (<= cnt 3) (<= cnt 4) (<= cnt 5) (<= cnt 6) (<= cnt 7) (<= cnt 8) (<= cnt 9) (<= cnt 10) (<= cnt 11) (<= cnt 12) (<= cnt 13) (<= cnt 14) (<= cnt 15) (<= cnt 0) (<= cnt 16)) (or env_room (<= cnt 1) (<= cnt 2) (<= cnt 3) (<= cnt 4) (<= cnt 5) (<= cnt 6) (<= cnt 7) (<= cnt 8) (<= cnt 9) (<= cnt 10) (<= cnt 11) (<= cnt 12) (<= cnt 13) (<= cnt 14) (<= cnt 15) (<= cnt 0) (not con_room) (<= p0_3__r__nv_cnt (+ (- 1) cnt))) (or (not env_room) (<= cnt 1) (<= cnt 2) (<= cnt 3) (<= cnt 4) (<= cnt 5) (<= cnt 6) (<= cnt 7) (<= cnt 8) (<= cnt 9) (<= cnt 10) (<= cnt 11) (<= cnt 12) (<= cnt 13) (<= cnt 14) (<= cnt 15) (<= cnt 0) (<= cnt 16) (not con_room))) {goto 8;} else {[ p0_2__r__nv_finished:=finished p0_2__r__nv_con_room:=con_room p0_2__r__nv_env_room:=env_room p0_2__r__nv_cnt:=cnt ]; read  finished con_room env_room cnt; case {if (<= cnt 0) [ cnt := (- cnt 1)] goto 11;if (<= cnt 0) [] goto 11;if (<= cnt 0) [ finished := true] goto 7;if (and (or (not con_room) (not env_room)) (or (<= cnt 1) (<= cnt 2) (<= cnt 3) (<= cnt 4) (<= cnt 5) (<= cnt 6) (<= cnt 7) (<= cnt 8) (<= cnt 9) (<= cnt 10) (<= cnt 11) (<= cnt 12) (<= cnt 13) (<= cnt 14) (<= cnt 15) (<= p0_3__r__nv_cnt (+ (- 1) cnt))) (or con_room env_room) (>= cnt 1)) [] goto 10;if (and (or (not con_room) env_room) (or (<= cnt 7) (<= cnt 8) (<= cnt 9) (<= cnt 10) (<= cnt 11) (<= cnt 12) (<= cnt 13) (<= cnt 14) (<= cnt 15) (<= cnt 16) (<= cnt 17) (<= cnt 2) con_room (<= cnt 4) (<= cnt 1) (<= cnt 5) (<= cnt 6) p0_2__r__b_cnt (<= (* (- 1) p0_2__r__nv_cnt) (* (- 1) cnt))) (or (<= cnt 7) (<= cnt 8) (<= cnt 9) (<= cnt 10) (<= cnt 11) (<= cnt 12) (<= cnt 13) (<= cnt 14) (<= cnt 15) (<= cnt 16) (<= cnt 17) (<= cnt 2) (<= cnt 3) con_room (<= cnt 4) (<= cnt 1) (<= cnt 5) (<= 0 p0_2__r__nv_cnt)) (or (<= cnt 7) (<= cnt 8) (<= cnt 9) (<= cnt 10) (<= cnt 11) (<= cnt 12) (<= cnt 13) (<= cnt 14) (<= cnt 15) (<= cnt 16) (<= cnt 17) (<= cnt 2) (<= cnt 3) (<= cnt 4) (<= cnt 1) (<= cnt 5) (<= 0 p0_2__r__nv_cnt) (<= cnt 6) (not con_room)) (or (<= cnt 7) (<= cnt 8) (<= cnt 9) (<= cnt 10) (<= cnt 11) (<= cnt 12) (<= cnt 13) (<= cnt 14) (<= cnt 15) (<= cnt 16) (<= cnt 17) (<= cnt 2) (<= cnt 3) (<= cnt 5) (<= cnt 6) p0_2__r__b_cnt (not con_room) (<= (* (- 1) p0_2__r__nv_cnt) (* (- 1) cnt))) (or con_room (not env_room)) (or (<= cnt 7) (<= cnt 8) (<= cnt 9) (<= cnt 10) (<= cnt 11) (<= cnt 12) (<= cnt 13) (<= cnt 14) (<= cnt 15) (<= cnt 16) (<= cnt 17) (<= cnt 2) (<= cnt 3) con_room (<= cnt 4) (<= cnt 1) (<= cnt 6) (not p0_2__r__b_cnt) (<= p0_2__r__nv_cnt (+ (- 2) cnt))) (or (<= cnt 7) (<= cnt 8) (<= cnt 9) (<= cnt 10) (<= cnt 11) (<= cnt 12) (<= cnt 13) (<= cnt 14) (<= cnt 15) (<= cnt 16) (<= cnt 17) (<= cnt 2) (<= cnt 3) (<= cnt 4) (<= cnt 1) (<= cnt 5) (<= cnt 6) (not con_room) (not p0_2__r__b_cnt) (<= p0_2__r__nv_cnt (+ (- 2) cnt))) (>= cnt 1)) [ cnt := (- cnt 1)] goto 11;if (and (or env_room (not con_room)) (or (<= cnt 1) (<= cnt 2) (<= cnt 3) (<= cnt 4) (<= cnt 5) (<= cnt 6) (<= cnt 7) (<= cnt 8) (<= cnt 9) (<= cnt 10) (<= cnt 11) (<= cnt 12) (<= cnt 13) (<= cnt 14) (<= cnt 15) (<= cnt 16) (<= cnt 0) p0_2__r__b_cnt (<= (* (- 1) p0_2__r__nv_cnt) (+ (- 1) (* (- 1) cnt)))) (or (<= cnt 1) (<= cnt 2) (<= cnt 3) (<= cnt 4) (<= cnt 5) (<= cnt 6) (<= cnt 7) (<= cnt 8) (<= cnt 9) (<= cnt 10) (<= cnt 11) (<= cnt 12) (<= cnt 13) (<= cnt 14) (<= cnt 15) (<= cnt 16) (<= cnt 0) (<= 0 p0_2__r__nv_cnt)) (or (<= cnt 1) (<= cnt 2) (<= cnt 3) (<= cnt 4) (<= cnt 5) (<= cnt 6) (<= cnt 7) (<= cnt 8) (<= cnt 9) (<= cnt 10) (<= cnt 11) (<= cnt 12) (<= cnt 13) (<= cnt 14) (<= cnt 15) (<= cnt 16) (<= cnt 0) (not p0_2__r__b_cnt) (not con_room) (<= p0_2__r__nv_cnt (+ (- 1) cnt))) (or (<= cnt 1) (<= cnt 2) (<= cnt 3) (<= cnt 4) (<= cnt 5) (<= cnt 6) (<= cnt 7) (<= cnt 8) (<= cnt 9) (<= cnt 10) (<= cnt 11) (<= cnt 12) (<= cnt 13) (<= cnt 14) (<= cnt 15) (<= cnt 16) (<= cnt 0) con_room (not p0_2__r__b_cnt) (<= p0_2__r__nv_cnt (+ (- 1) cnt))) (or con_room (not env_room)) (>= cnt 1)) [] goto 11;otherwise abort() };}
9: if (or (<= cnt 8) (<= cnt 9) (<= cnt 10) (<= cnt 11) (<= cnt 12) (<= cnt 13) (<= cnt 14) (<= cnt 15) (<= cnt 0)) {goto 9;} else {abort();}
10: if (or (<= cnt 8) (<= cnt 9) (<= cnt 10) (<= cnt 11) (<= cnt 12) (<= cnt 13) (<= cnt 14) (<= cnt 15) (<= cnt 0) (<= p0_3__r__nv_cnt (+ (- 1) cnt))) {goto 10;} else {abort();}
11: if (and (or (not env_room) con_room (<= cnt 1) (<= cnt 2) (<= cnt 3) (<= cnt 4) (<= cnt 5) (<= cnt 6) (<= cnt 7) (<= cnt 8) (<= cnt 9) (<= cnt 10) (<= cnt 11) (<= cnt 12) (<= cnt 13) (<= cnt 14) (<= cnt 15) (not p0_2__r__b_cnt) (<= p0_3__r__nv_cnt (+ (- 1) cnt)) (<= p0_2__r__nv_cnt (+ (- 1) cnt))) (or env_room con_room (<= cnt 1) (<= cnt 2) (<= cnt 3) (<= cnt 4) (<= cnt 5) (<= cnt 6) (<= cnt 7) (<= cnt 8) (<= cnt 9) (<= cnt 10) (<= cnt 11) (<= cnt 12) (<= cnt 13) (<= cnt 14) (<= cnt 15) (not p0_2__r__b_cnt) (<= cnt 0) (<= cnt 16) (<= p0_2__r__nv_cnt (+ (- 1) cnt))) (or env_room (<= cnt 1) (<= cnt 2) (<= cnt 3) (<= cnt 4) (<= cnt 5) (<= cnt 6) (<= cnt 7) (<= cnt 8) (<= cnt 9) (<= cnt 10) (<= cnt 11) (<= cnt 12) (<= cnt 13) (<= cnt 14) (<= cnt 15) (not p0_2__r__b_cnt) (<= cnt 0) (not con_room) (<= p0_3__r__nv_cnt (+ (- 1) cnt)) (<= p0_2__r__nv_cnt (+ (- 1) cnt))) (or env_room (<= cnt 1) (<= cnt 2) (<= cnt 3) (<= cnt 4) (<= cnt 5) (<= cnt 6) (<= cnt 7) (<= cnt 8) (<= cnt 9) (<= cnt 10) (<= cnt 11) (<= cnt 12) (<= cnt 13) (<= cnt 14) (<= cnt 15) (<= cnt 0) (not con_room) (<= 0 p0_2__r__nv_cnt) (<= p0_3__r__nv_cnt (+ (- 1) cnt))) (or env_room con_room (<= cnt 1) (<= cnt 2) (<= cnt 3) (<= cnt 4) (<= cnt 5) (<= cnt 6) (<= cnt 7) (<= cnt 8) (<= cnt 9) (<= cnt 10) (<= cnt 11) (<= cnt 12) (<= cnt 13) (<= cnt 14) (<= cnt 15) (<= cnt 0) (<= cnt 16) (<= 0 p0_2__r__nv_cnt)) (or (not env_room) (<= cnt 1) (<= cnt 2) (<= cnt 3) (<= cnt 4) (<= cnt 5) (<= cnt 6) (<= cnt 7) (<= cnt 8) (<= cnt 9) (<= cnt 10) (<= cnt 11) (<= cnt 12) (<= cnt 13) (<= cnt 14) (<= cnt 15) (<= cnt 0) (<= cnt 16) (not con_room) (<= 0 p0_2__r__nv_cnt)) (or (not env_room) (<= cnt 1) (<= cnt 2) (<= cnt 3) (<= cnt 4) (<= cnt 5) (<= cnt 6) (<= cnt 7) (<= cnt 8) (<= cnt 9) (<= cnt 10) (<= cnt 11) (<= cnt 12) (<= cnt 13) (<= cnt 14) (<= cnt 15) (not p0_2__r__b_cnt) (<= cnt 0) (<= cnt 16) (not con_room) (<= p0_2__r__nv_cnt (+ (- 1) cnt))) (or (not env_room) con_room (<= cnt 1) (<= cnt 2) (<= cnt 3) (<= cnt 4) (<= cnt 5) (<= cnt 6) (<= cnt 7) (<= cnt 8) (<= cnt 9) (<= cnt 10) (<= cnt 11) (<= cnt 12) (<= cnt 13) (<= cnt 14) (<= cnt 15) (<= cnt 0) (<= 0 p0_2__r__nv_cnt) (<= p0_3__r__nv_cnt (+ (- 1) cnt))) (or (not env_room) (<= cnt 1) (<= cnt 2) (<= cnt 3) (<= cnt 4) (<= cnt 5) (<= cnt 6) (<= cnt 7) (<= cnt 8) (<= cnt 9) (<= cnt 10) (<= cnt 11) (<= cnt 12) (<= cnt 13) (<= cnt 14) (<= cnt 15) p0_2__r__b_cnt (<= cnt 0) (<= cnt 16) (not con_room) (<= (* (- 1) p0_2__r__nv_cnt) (+ (- 1) (* (- 1) cnt)))) (or (not env_room) con_room (<= cnt 1) (<= cnt 2) (<= cnt 3) (<= cnt 4) (<= cnt 5) (<= cnt 6) (<= cnt 7) (<= cnt 8) (<= cnt 9) (<= cnt 10) (<= cnt 11) (<= cnt 12) (<= cnt 13) (<= cnt 14) (<= cnt 15) p0_2__r__b_cnt (<= cnt 0) (<= p0_3__r__nv_cnt (+ (- 1) cnt)) (<= (* (- 1) p0_2__r__nv_cnt) (+ (- 1) (* (- 1) cnt)))) (or env_room (<= cnt 1) (<= cnt 2) (<= cnt 3) (<= cnt 4) (<= cnt 5) (<= cnt 6) (<= cnt 7) (<= cnt 8) (<= cnt 9) (<= cnt 10) (<= cnt 11) (<= cnt 12) (<= cnt 13) (<= cnt 14) (<= cnt 15) p0_2__r__b_cnt (<= cnt 0) (not con_room) (<= p0_3__r__nv_cnt (+ (- 1) cnt)) (<= (* (- 1) p0_2__r__nv_cnt) (+ (- 1) (* (- 1) cnt)))) (or env_room con_room (<= cnt 1) (<= cnt 2) (<= cnt 3) (<= cnt 4) (<= cnt 5) (<= cnt 6) (<= cnt 7) (<= cnt 8) (<= cnt 9) (<= cnt 10) (<= cnt 11) (<= cnt 12) (<= cnt 13) (<= cnt 14) (<= cnt 15) p0_2__r__b_cnt (<= cnt 0) (<= cnt 16) (<= (* (- 1) p0_2__r__nv_cnt) (+ (- 1) (* (- 1) cnt))))) {goto 8;} else {abort();}
12: goto 12;
13: goto 13;
14: goto 14;
15: if (or (<= cnt 8) (<= cnt 9) (<= cnt 10) (<= cnt 11) (<= cnt 12) (<= cnt 13) (<= cnt 14) (<= cnt 15) (<= cnt 0) (<= p0_3__r__nv_cnt (+ (- 1) cnt))) {goto 15;} else {abort();}
16: goto 12;
17: goto 17;
18: if (and (or env_room con_room (<= cnt 1) (<= cnt 2) (<= cnt 3) (<= cnt 4) (<= cnt 5) (<= cnt 6) (<= cnt 7) (<= cnt 8) (<= cnt 9) (<= cnt 10) (<= cnt 11) (<= cnt 12) (<= cnt 13) (<= cnt 14) (<= cnt 15) (<= cnt 16) (<= cnt 17) (<= cnt 18) (<= cnt 19)) (or (<= cnt 1) (<= cnt 2) (<= cnt 3) (<= cnt 4) (<= cnt 5) (<= cnt 6) (<= cnt 7) (<= cnt 8) (<= cnt 9) (<= cnt 10) (<= cnt 11) (<= cnt 12) (<= cnt 13) (<= cnt 14) (<= cnt 15) (<= cnt 16) (<= cnt 17) (<= cnt 18) (<= cnt 19) (<= cnt 0) (not env_room) (not con_room))) {goto 18;} else {[ p0_2__r__nv_finished:=finished p0_2__r__nv_con_room:=con_room p0_2__r__nv_env_room:=env_room p0_2__r__nv_cnt:=cnt ]; read  finished con_room env_room cnt; case {if (<= cnt 0) [ cnt := (- cnt 1)] goto 20;if (<= cnt 0) [] goto 20;if (<= cnt 0) [ finished := true] goto 17;if (and (or con_room env_room) (or (not con_room) (not env_room)) (>= cnt 1)) [] goto 19;if (and (or con_room (not env_room)) (or (<= cnt 2) (<= cnt 3) (<= cnt 4) (<= cnt 5) (<= cnt 6) (<= cnt 7) (<= cnt 8) (<= cnt 9) (<= cnt 10) (<= cnt 11) (<= cnt 12) (<= cnt 13) (<= cnt 14) (<= cnt 15) (<= cnt 16) (<= cnt 17) (<= cnt 18) (<= cnt 19) (<= cnt 20) (<= cnt 1) (not (<= 4 cnt)) (not con_room) (not (<= (- 1) cnt)) (<= p0_2__r__nv_cnt (+ (- 2) cnt))) (or env_room (not con_room)) (or (<= cnt 2) (<= cnt 3) (<= cnt 4) (<= cnt 5) (<= cnt 6) (<= cnt 7) (<= cnt 8) (<= cnt 9) (<= cnt 10) (<= cnt 11) (<= cnt 12) (<= cnt 13) (<= cnt 14) (<= cnt 15) (<= cnt 16) (<= cnt 17) (<= cnt 18) (<= cnt 19) (<= cnt 20) (not (<= 4 cnt)) con_room (not (<= (- 1) cnt)) (<= p0_2__r__nv_cnt (+ (- 2) cnt))) (or (<= cnt 2) (<= cnt 3) (<= cnt 4) (<= cnt 5) (<= cnt 6) (<= cnt 7) (<= cnt 8) (<= cnt 9) (<= cnt 10) (<= cnt 11) (<= cnt 12) (<= cnt 13) (<= cnt 14) (<= cnt 15) (<= cnt 16) (<= cnt 17) (<= cnt 18) (<= cnt 19) (<= cnt 20) (<= cnt 1) (not (<= 4 cnt)) (not (<= (- 1) cnt)) (<= (- 1) p0_2__r__nv_cnt)) (>= cnt 1)) [ cnt := (- cnt 1)] goto 20;if (and (or (<= cnt 1) (<= cnt 2) (<= cnt 3) (<= cnt 4) (<= cnt 5) (<= cnt 6) (<= cnt 7) (<= cnt 8) (<= cnt 9) (<= cnt 10) (<= cnt 11) (<= cnt 12) (<= cnt 13) (<= cnt 14) (<= cnt 15) (<= cnt 16) (<= cnt 17) (<= cnt 18) (<= cnt 19) (not (<= 3 cnt)) (not (<= 0 cnt)) (not (<= (- 2) cnt)) (<= (- 1) p0_2__r__nv_cnt)) (or con_room (not env_room)) (or env_room (not con_room)) (or con_room (<= cnt 1) (<= cnt 2) (<= cnt 3) (<= cnt 4) (<= cnt 5) (<= cnt 6) (<= cnt 7) (<= cnt 8) (<= cnt 9) (<= cnt 10) (<= cnt 11) (<= cnt 12) (<= cnt 13) (<= cnt 14) (<= cnt 15) (<= cnt 16) (<= cnt 17) (<= cnt 18) (<= cnt 19) (not (<= 3 cnt)) (not (<= 0 cnt)) (not (<= (- 2) cnt)) (<= p0_2__r__nv_cnt (+ (- 1) cnt))) (or (not con_room) (<= cnt 1) (<= cnt 2) (<= cnt 3) (<= cnt 4) (<= cnt 5) (<= cnt 6) (<= cnt 7) (<= cnt 8) (<= cnt 9) (<= cnt 10) (<= cnt 11) (<= cnt 12) (<= cnt 13) (<= cnt 14) (<= cnt 15) (<= cnt 16) (<= cnt 17) (<= cnt 18) (<= cnt 19) (not (<= 3 cnt)) (not (<= 0 cnt)) (<= cnt 0) (not (<= (- 2) cnt)) (<= p0_2__r__nv_cnt (+ (- 1) cnt))) (>= cnt 1)) [] goto 20;otherwise abort() };}
19: goto 19;
20: if (and (or env_room con_room (<= cnt 1) (<= cnt 2) (<= cnt 3) (<= cnt 4) (<= cnt 5) (<= cnt 6) (<= cnt 7) (<= cnt 8) (<= cnt 9) (<= cnt 10) (<= cnt 11) (<= cnt 12) (<= cnt 13) (<= cnt 14) (<= cnt 15) (<= cnt 16) (<= cnt 17) (<= cnt 18) (<= cnt 19) (not (<= 3 cnt)) (not (<= 0 cnt)) (not (<= (- 2) cnt)) (<= (- 1) p0_2__r__nv_cnt)) (or (<= cnt 1) (<= cnt 2) (<= cnt 3) (<= cnt 4) (<= cnt 5) (<= cnt 6) (<= cnt 7) (<= cnt 8) (<= cnt 9) (<= cnt 10) (<= cnt 11) (<= cnt 12) (<= cnt 13) (<= cnt 14) (<= cnt 15) (<= cnt 16) (<= cnt 17) (<= cnt 18) (<= cnt 19) (not (<= 3 cnt)) (not (<= 0 cnt)) (<= cnt 0) (not env_room) (not con_room) (not (<= (- 2) cnt)) (<= (- 1) p0_2__r__nv_cnt)) (or (<= cnt 1) (<= cnt 2) (<= cnt 3) (<= cnt 4) (<= cnt 5) (<= cnt 6) (<= cnt 7) (<= cnt 8) (<= cnt 9) (<= cnt 10) (<= cnt 11) (<= cnt 12) (<= cnt 13) (<= cnt 14) (<= cnt 15) (<= cnt 16) (<= cnt 17) (<= cnt 18) (<= cnt 19) (not (<= 3 cnt)) (not (<= 0 cnt)) (<= cnt 0) (not env_room) (not con_room) (not (<= (- 2) cnt)) (<= p0_2__r__nv_cnt (+ (- 1) cnt))) (or env_room con_room (<= cnt 1) (<= cnt 2) (<= cnt 3) (<= cnt 4) (<= cnt 5) (<= cnt 6) (<= cnt 7) (<= cnt 8) (<= cnt 9) (<= cnt 10) (<= cnt 11) (<= cnt 12) (<= cnt 13) (<= cnt 14) (<= cnt 15) (<= cnt 16) (<= cnt 17) (<= cnt 18) (<= cnt 19) (not (<= 3 cnt)) (not (<= 0 cnt)) (not (<= (- 2) cnt)) (<= p0_2__r__nv_cnt (+ (- 1) cnt)))) {goto 18;} else {abort();}
21: goto 21;
22: if (and (or env_room con_room (<= cnt 1) (<= cnt 2) (<= cnt 3) (<= cnt 4) (<= cnt 5) (<= cnt 6) (<= cnt 7) (<= cnt 8) (<= cnt 9) (<= cnt 10) (<= cnt 11) (<= cnt 12) (<= cnt 13) (<= cnt 14) (<= cnt 15) (<= cnt 16) (<= cnt 17) (<= cnt 18) (<= cnt 19) (<= cnt 20) (not (<= 4 cnt)) (not (<= 1 cnt)) (not (<= 3 cnt)) (not (<= 0 cnt)) (not (<= (- 1) cnt)) (<= (- 1) p0_2__r__nv_cnt) (not (<= (- 2) cnt))) (or (<= cnt 1) (<= cnt 2) (<= cnt 3) (<= cnt 4) (<= cnt 5) (<= cnt 6) (<= cnt 7) (<= cnt 8) (<= cnt 9) (<= cnt 10) (<= cnt 11) (<= cnt 12) (<= cnt 13) (<= cnt 14) (<= cnt 15) (<= cnt 16) (<= cnt 17) (<= cnt 18) (<= cnt 19) (<= cnt 20) (not (<= 4 cnt)) (not (<= 1 cnt)) (not (<= 3 cnt)) (not (<= 0 cnt)) (<= cnt 0) (not env_room) (not con_room) (not (<= (- 1) cnt)) (not (<= (- 2) cnt)) (<= p0_2__r__nv_cnt (+ (- 2) cnt)) (<= p0_2__r__nv_cnt (+ (- 1) cnt))) (or env_room con_room (<= cnt 1) (<= cnt 2) (<= cnt 3) (<= cnt 4) (<= cnt 5) (<= cnt 6) (<= cnt 7) (<= cnt 8) (<= cnt 9) (<= cnt 10) (<= cnt 11) (<= cnt 12) (<= cnt 13) (<= cnt 14) (<= cnt 15) (<= cnt 16) (<= cnt 17) (<= cnt 18) (<= cnt 19) (<= cnt 20) (not (<= 4 cnt)) (not (<= 1 cnt)) (not (<= 3 cnt)) (not (<= 0 cnt)) (<= cnt 0) (not (<= (- 1) cnt)) (not (<= (- 2) cnt)) (<= p0_2__r__nv_cnt (+ (- 2) cnt)) (<= p0_2__r__nv_cnt (+ (- 1) cnt))) (or (<= cnt 1) (<= cnt 2) (<= cnt 3) (<= cnt 4) (<= cnt 5) (<= cnt 6) (<= cnt 7) (<= cnt 8) (<= cnt 9) (<= cnt 10) (<= cnt 11) (<= cnt 12) (<= cnt 13) (<= cnt 14) (<= cnt 15) (<= cnt 16) (<= cnt 17) (<= cnt 18) (<= cnt 19) (<= cnt 20) (not (<= 4 cnt)) (not (<= 1 cnt)) (not (<= 3 cnt)) (not (<= 0 cnt)) (<= cnt 0) (not env_room) (not con_room) (not (<= (- 1) cnt)) (<= (- 1) p0_2__r__nv_cnt) (not (<= (- 2) cnt)))) {goto 22;} else {[ p0_1__r__nv_finished:=finished p0_1__r__nv_con_room:=con_room p0_1__r__nv_env_room:=env_room p0_1__r__nv_cnt:=cnt ]; abort();}
23: goto 23;
24: if (and (or env_room con_room (<= cnt 1) (<= cnt 2) (<= cnt 3) (<= cnt 4) (<= cnt 5) (<= cnt 6) (<= cnt 7) (<= cnt 8) (<= cnt 9) (<= cnt 10) (<= cnt 11) (<= cnt 12) (<= cnt 13) (<= cnt 14) (<= cnt 15) (<= cnt 16) (<= cnt 17) (<= cnt 18) (<= cnt 19) (not (<= 3 cnt)) (not (<= 0 cnt)) (not (<= (- 2) cnt)) (<= (- 1) p0_2__r__nv_cnt)) (or (<= cnt 1) (<= cnt 2) (<= cnt 3) (<= cnt 4) (<= cnt 5) (<= cnt 6) (<= cnt 7) (<= cnt 8) (<= cnt 9) (<= cnt 10) (<= cnt 11) (<= cnt 12) (<= cnt 13) (<= cnt 14) (<= cnt 15) (<= cnt 16) (<= cnt 17) (<= cnt 18) (<= cnt 19) (not (<= 3 cnt)) (not (<= 0 cnt)) (<= cnt 0) (not env_room) (not con_room) (not (<= (- 2) cnt)) (<= (- 1) p0_2__r__nv_cnt)) (or (<= cnt 1) (<= cnt 2) (<= cnt 3) (<= cnt 4) (<= cnt 5) (<= cnt 6) (<= cnt 7) (<= cnt 8) (<= cnt 9) (<= cnt 10) (<= cnt 11) (<= cnt 12) (<= cnt 13) (<= cnt 14) (<= cnt 15) (<= cnt 16) (<= cnt 17) (<= cnt 18) (<= cnt 19) (not (<= 3 cnt)) (not (<= 0 cnt)) (<= cnt 0) (not env_room) (not con_room) (not (<= (- 2) cnt)) (<= p0_2__r__nv_cnt (+ (- 1) cnt))) (or env_room con_room (<= cnt 1) (<= cnt 2) (<= cnt 3) (<= cnt 4) (<= cnt 5) (<= cnt 6) (<= cnt 7) (<= cnt 8) (<= cnt 9) (<= cnt 10) (<= cnt 11) (<= cnt 12) (<= cnt 13) (<= cnt 14) (<= cnt 15) (<= cnt 16) (<= cnt 17) (<= cnt 18) (<= cnt 19) (not (<= 3 cnt)) (not (<= 0 cnt)) (not (<= (- 2) cnt)) (<= p0_2__r__nv_cnt (+ (- 1) cnt)))) {goto 24;} else {abort();}
25: if (and (or env_room con_room (<= cnt 1) (<= cnt 2) (<= cnt 3) (<= cnt 4) (<= cnt 5) (<= cnt 6) (<= cnt 7) (<= cnt 8) (<= cnt 9) (<= cnt 10) (<= cnt 11) (<= cnt 12) (<= cnt 13) (<= cnt 14) (<= cnt 15) (<= cnt 16) (<= cnt 17) (<= cnt 18) (<= cnt 19) (<= cnt 20) (not (<= 4 cnt)) (not (<= 1 cnt)) (not (<= 3 cnt)) (not (<= 0 cnt)) (<= (- 1) p0_2__r__nv_cnt) (not (<= (- 1) cnt)) (not (<= (- 2) cnt))) (or (<= cnt 1) (<= cnt 2) (<= cnt 3) (<= cnt 4) (<= cnt 5) (<= cnt 6) (<= cnt 7) (<= cnt 8) (<= cnt 9) (<= cnt 10) (<= cnt 11) (<= cnt 12) (<= cnt 13) (<= cnt 14) (<= cnt 15) (<= cnt 16) (<= cnt 17) (<= cnt 18) (<= cnt 19) (<= cnt 20) (not (<= 4 cnt)) (not (<= 1 cnt)) (not (<= 3 cnt)) (not (<= 0 cnt)) (<= cnt 0) (not env_room) (not con_room) (not (<= (- 1) cnt)) (not (<= (- 2) cnt)) (<= p0_2__r__nv_cnt (+ (- 2) cnt)) (<= p0_2__r__nv_cnt (+ (- 1) cnt))) (or env_room con_room (<= cnt 1) (<= cnt 2) (<= cnt 3) (<= cnt 4) (<= cnt 5) (<= cnt 6) (<= cnt 7) (<= cnt 8) (<= cnt 9) (<= cnt 10) (<= cnt 11) (<= cnt 12) (<= cnt 13) (<= cnt 14) (<= cnt 15) (<= cnt 16) (<= cnt 17) (<= cnt 18) (<= cnt 19) (<= cnt 20) (not (<= 4 cnt)) (not (<= 1 cnt)) (not (<= 3 cnt)) (not (<= 0 cnt)) (<= cnt 0) (not (<= (- 1) cnt)) (not (<= (- 2) cnt)) (<= p0_2__r__nv_cnt (+ (- 2) cnt)) (<= p0_2__r__nv_cnt (+ (- 1) cnt))) (or (<= cnt 1) (<= cnt 2) (<= cnt 3) (<= cnt 4) (<= cnt 5) (<= cnt 6) (<= cnt 7) (<= cnt 8) (<= cnt 9) (<= cnt 10) (<= cnt 11) (<= cnt 12) (<= cnt 13) (<= cnt 14) (<= cnt 15) (<= cnt 16) (<= cnt 17) (<= cnt 18) (<= cnt 19) (<= cnt 20) (not (<= 4 cnt)) (not (<= 1 cnt)) (not (<= 3 cnt)) (not (<= 0 cnt)) (<= cnt 0) (not env_room) (not con_room) (<= (- 1) p0_2__r__nv_cnt) (not (<= (- 1) cnt)) (not (<= (- 2) cnt)))) {goto 22;} else {abort();}
Sucessfull Accelerations: 4

Benchmark: /home/luca/git/sweap/scripts/../examples/benchmarks/rpgsolve/arbiter-unreal.rpg
Runtime: 6718ms
Result: Unrealizable
Sucessfull Accelerations: 2

Benchmark: /home/luca/git/sweap/scripts/../examples/benchmarks/rpgsolve/neider-box-limited.rpg
Runtime: 455ms
Result: Realizable
read y x;
goto 0;
0: read  y x; case {if true [ x := 1 y := 1] goto 1;otherwise abort() };
1: read  y x; case {if (and (>= y 0) (<= y 2)) [ x := x y := y] goto 2;if (and (>= y 0) (<= y 1)) [ x := x y := (+ y 1)] goto 2;if (and (>= y 1) (<= y 2)) [ x := x y := (- y 1)] goto 2;otherwise abort() };
2: read  y x; case {if (and stax (>= y 0) (<= y 2)) [ x := x y := y] goto 1;if (and incx (not stax) (>= y 0) (<= y 2)) [ x := (+ x 1) y := y] goto 1;if (and (not incx) (not stax) (>= y 0) (<= y 2)) [ x := (- x 1) y := y] goto 1;otherwise abort() };
3: read  y x; case {otherwise abort() };
Sucessfull Accelerations: 0

Benchmark: /home/luca/git/sweap/scripts/../examples/benchmarks/rpgsolve/neider-box.rpg
Runtime: 685ms
Result: Realizable
read y x;
goto 0;
0: read  y x; case {if true [ x := 1 y := 1] goto 1;otherwise abort() };
1: read  y x; case {if (= x 1) [ x := x y := y] goto 2;if (= x 0) [ x := (+ x 1) y := y] goto 2;if (= x 2) [ x := (- x 1) y := y] goto 2;if (= x 1) [ x := x y := (+ y 1)] goto 2;if (= x 0) [ x := (+ x 1) y := (+ y 1)] goto 2;if (= x 2) [ x := (- x 1) y := (+ y 1)] goto 2;if (= x 1) [ x := x y := (- y 1)] goto 2;if (= x 0) [ x := (+ x 1) y := (- y 1)] goto 2;if (= x 2) [ x := (- x 1) y := (- y 1)] goto 2;otherwise abort() };
2: read  y x; case {if (and stay stax (>= x 0) (<= x 2)) [ x := x y := y] goto 1;if (and incy stax (not stay) (>= x 0) (<= x 2)) [ x := x y := (+ y 1)] goto 1;if (and stax (not incy) (not stay) (>= x 0) (<= x 2)) [ x := x y := (- y 1)] goto 1;if (and stay incx (not stax) (>= x 0) (<= x 1)) [ x := (+ x 1) y := y] goto 1;if (and incy incx (not stay) (not stax) (>= x 0) (<= x 1)) [ x := (+ x 1) y := (+ y 1)] goto 1;if (and incx (not incy) (not stay) (not stax) (>= x 0) (<= x 1)) [ x := (+ x 1) y := (- y 1)] goto 1;if (and stay (not incx) (not stax) (>= x 1) (<= x 2)) [ x := (- x 1) y := y] goto 1;if (and incy (not stay) (not incx) (not stax) (>= x 1) (<= x 2)) [ x := (- x 1) y := (+ y 1)] goto 1;if (and (not stax) (not stay) (not incy) (not incx) (>= x 1) (<= x 2)) [ x := (- x 1) y := (- y 1)] goto 1;otherwise abort() };
3: read  y x; case {otherwise abort() };
Sucessfull Accelerations: 0

Benchmark: /home/luca/git/sweap/scripts/../examples/benchmarks/rpgsolve/neider-diagonal.rpg
Runtime: 463ms
Result: Realizable
read y x;
goto 0;
0: read  y x; case {if true [ x := 0 y := 0] goto 1;otherwise abort() };
1: read  y x; case {if (and (<= (+ x (* (- 1) y)) 1) (<= (+ y (* (- 1) x)) 1)) [ y := y] goto 2;if (and (<= (+ x (* (- 1) y)) 2) (<= (+ y (* (- 1) x)) 0)) [ y := (+ y 1)] goto 2;if (and (<= (+ x (* (- 1) y)) 0) (<= (+ y (* (- 1) x)) 2)) [ y := (- y 1)] goto 2;otherwise abort() };
2: read  y x; case {if (and stax (<= (+ x (* (- 1) y)) 2) (<= (+ y (* (- 1) x)) 2)) [ x := x y := y] goto 1;if (and incx (not stax) (<= (+ x (* (- 1) y)) 1) (<= (+ y (* (- 1) x)) 2)) [ x := (+ x 1) y := y] goto 1;if (and (not incx) (not stax) (<= (+ x (* (- 1) y)) 2) (<= (+ y (* (- 1) x)) 1)) [ x := (- x 1) y := y] goto 1;otherwise abort() };
3: read  y x; case {otherwise abort() };
Sucessfull Accelerations: 0

Benchmark: /home/luca/git/sweap/scripts/../examples/benchmarks/rpgsolve/neider-evasion.rpg
Runtime: 764ms
Result: Realizable
read y1 x1 y0 x0;
goto 0;
0: read  y1 x1 y0 x0; case {if true [ x0 := 2 x1 := 0 y0 := 0 y1 := 0] goto 1;otherwise abort() };
1: read  y1 x1 y0 x0; case {if (and (or (not (= x0 (+ (- 1) x1))) (not (= y0 (+ 1 y1)))) (or (not (= x0 (+ 1 x1))) (not (= y0 (+ 1 y1)))) (or (not (= y0 (+ 1 y1))) (not (= x0 x1))) (or (not (= x0 (+ (- 1) x1))) (not (= y0 y1))) (or (not (= x0 (+ 1 x1))) (not (= y0 y1))) (or (not (= x0 x1)) (not (= y0 y1))) (or (not (= x0 (+ 1 x1))) (not (= y0 (+ (- 1) y1)))) (or (not (= x0 (+ (- 1) x1))) (not (= y0 (+ (- 1) y1)))) (or (not (= x0 x1)) (not (= y0 (+ (- 1) y1))))) [ x0 := x0 y0 := y0] goto 2;if (and (or (not (= y0 y1)) (not (= x0 (+ (- 2) x1)))) (or (not (= y0 y1)) (not (= x0 (+ (- 1) x1)))) (or (not (= y0 y1)) (not (= x0 x1))) (or (not (= x0 (+ (- 2) x1))) (not (= y0 (+ (- 1) y1)))) (or (not (= x0 (+ (- 1) x1))) (not (= y0 (+ (- 1) y1)))) (or (not (= x0 x1)) (not (= y0 (+ (- 1) y1)))) (or (not (= x0 (+ (- 1) x1))) (not (= y0 (+ 1 y1)))) (or (not (= x0 (+ (- 2) x1))) (not (= y0 (+ 1 y1)))) (or (not (= x0 x1)) (not (= y0 (+ 1 y1))))) [ x0 := (+ x0 1) y0 := y0] goto 2;if (and (or (not (= y0 y1)) (not (= x0 (+ 2 x1)))) (or (not (= y0 y1)) (not (= x0 (+ 1 x1)))) (or (not (= y0 y1)) (not (= x0 x1))) (or (not (= x0 (+ 2 x1))) (not (= y0 (+ (- 1) y1)))) (or (not (= x0 (+ 1 x1))) (not (= y0 (+ (- 1) y1)))) (or (not (= x0 x1)) (not (= y0 (+ (- 1) y1)))) (or (not (= x0 (+ 1 x1))) (not (= y0 (+ 1 y1)))) (or (not (= x0 (+ 2 x1))) (not (= y0 (+ 1 y1)))) (or (not (= x0 x1)) (not (= y0 (+ 1 y1))))) [ x0 := (- x0 1) y0 := y0] goto 2;if (and (or (not (= x0 (+ (- 1) x1))) (not (= y0 (+ (- 2) y1)))) (or (not (= x0 (+ 1 x1))) (not (= y0 (+ (- 2) y1)))) (or (not (= x0 x1)) (not (= y0 (+ (- 2) y1)))) (or (not (= x0 (+ (- 1) x1))) (not (= y0 y1))) (or (not (= x0 (+ 1 x1))) (not (= y0 y1))) (or (not (= x0 x1)) (not (= y0 y1))) (or (not (= x0 (+ 1 x1))) (not (= y0 (+ (- 1) y1)))) (or (not (= x0 (+ (- 1) x1))) (not (= y0 (+ (- 1) y1)))) (or (not (= x0 x1)) (not (= y0 (+ (- 1) y1))))) [ x0 := x0 y0 := (+ y0 1)] goto 2;if (and (or (not (= x0 (+ (- 1) x1))) (not (= y0 (+ (- 2) y1)))) (or (not (= x0 (+ (- 2) x1))) (not (= y0 (+ (- 2) y1)))) (or (not (= x0 x1)) (not (= y0 (+ (- 2) y1)))) (or (not (= x0 (+ (- 1) x1))) (not (= y0 y1))) (or (not (= x0 (+ (- 2) x1))) (not (= y0 y1))) (or (not (= x0 x1)) (not (= y0 y1))) (or (not (= x0 (+ (- 2) x1))) (not (= y0 (+ (- 1) y1)))) (or (not (= x0 (+ (- 1) x1))) (not (= y0 (+ (- 1) y1)))) (or (not (= x0 x1)) (not (= y0 (+ (- 1) y1))))) [ x0 := (+ x0 1) y0 := (+ y0 1)] goto 2;if (and (or (not (= x0 (+ 1 x1))) (not (= y0 (+ (- 2) y1)))) (or (not (= x0 (+ 2 x1))) (not (= y0 (+ (- 2) y1)))) (or (not (= x0 x1)) (not (= y0 (+ (- 2) y1)))) (or (not (= x0 (+ 1 x1))) (not (= y0 y1))) (or (not (= x0 (+ 2 x1))) (not (= y0 y1))) (or (not (= x0 x1)) (not (= y0 y1))) (or (not (= x0 (+ 2 x1))) (not (= y0 (+ (- 1) y1)))) (or (not (= x0 (+ 1 x1))) (not (= y0 (+ (- 1) y1)))) (or (not (= x0 x1)) (not (= y0 (+ (- 1) y1))))) [ x0 := (- x0 1) y0 := (+ y0 1)] goto 2;if (and (or (not (= x0 (+ (- 1) x1))) (not (= y0 (+ 2 y1)))) (or (not (= y0 (+ 2 y1))) (not (= x0 x1))) (or (not (= y0 (+ 2 y1))) (not (= x0 (+ 1 x1)))) (or (not (= x0 (+ 1 x1))) (not (= y0 (+ 1 y1)))) (or (not (= x0 x1)) (not (= y0 (+ 1 y1)))) (or (not (= x0 (+ (- 1) x1))) (not (= y0 (+ 1 y1)))) (or (not (= x0 x1)) (not (= y0 y1))) (or (not (= x0 (+ (- 1) x1))) (not (= y0 y1))) (or (not (= x0 (+ 1 x1))) (not (= y0 y1)))) [ x0 := x0 y0 := (- y0 1)] goto 2;if (and (or (not (= x0 (+ (- 1) x1))) (not (= y0 (+ 1 y1)))) (or (not (= y0 (+ 1 y1))) (not (= x0 (+ (- 2) x1)))) (or (not (= y0 (+ 1 y1))) (not (= x0 x1))) (or (not (= x0 (+ (- 1) x1))) (not (= y0 y1))) (or (not (= x0 (+ (- 2) x1))) (not (= y0 y1))) (or (not (= x0 x1)) (not (= y0 y1))) (or (not (= x0 (+ (- 2) x1))) (not (= y0 (+ 2 y1)))) (or (not (= x0 (+ (- 1) x1))) (not (= y0 (+ 2 y1)))) (or (not (= x0 x1)) (not (= y0 (+ 2 y1))))) [ x0 := (+ x0 1) y0 := (- y0 1)] goto 2;if (and (or (not (= x0 (+ 1 x1))) (not (= y0 (+ 1 y1)))) (or (not (= y0 (+ 1 y1))) (not (= x0 (+ 2 x1)))) (or (not (= y0 (+ 1 y1))) (not (= x0 x1))) (or (not (= x0 (+ 1 x1))) (not (= y0 y1))) (or (not (= x0 (+ 2 x1))) (not (= y0 y1))) (or (not (= x0 x1)) (not (= y0 y1))) (or (not (= x0 (+ 2 x1))) (not (= y0 (+ 2 y1)))) (or (not (= x0 (+ 1 x1))) (not (= y0 (+ 2 y1)))) (or (not (= x0 x1)) (not (= y0 (+ 2 y1))))) [ x0 := (- x0 1) y0 := (- y0 1)] goto 2;otherwise abort() };
2: read  y1 x1 y0 x0; case {if (and stay stax (or (not (= x0 x1)) (not (= y0 y1)))) [ x1 := x1 y1 := y1] goto 1;if (and incy stax (not stay) (or (not (= x0 x1)) (not (= y0 y1))) (or (not (= x0 x1)) (not (= y0 (+ 1 y1))))) [ x1 := x1 y1 := (+ y1 1)] goto 1;if (and stax (not stay) (not incy) (or (not (= x0 x1)) (not (= y0 y1))) (or (not (= x0 x1)) (not (= y0 (+ (- 1) y1))))) [ x1 := x1 y1 := (- y1 1)] goto 1;if (and stay incx (or (not (= y0 y1)) (not (= x0 x1))) (not stax) (or (not (= y0 y1)) (not (= x0 (+ 1 x1))))) [ x1 := (+ x1 1) y1 := y1] goto 1;if (and incy incx (or (not (= y0 y1)) (not (= x0 x1))) (not stay) (not stax) (or (not (= x0 (+ 1 x1))) (not (= y0 (+ 1 y1))))) [ x1 := (+ x1 1) y1 := (+ y1 1)] goto 1;if (and incx (or (not (= y0 y1)) (not (= x0 x1))) (not stay) (not stax) (not incy) (or (not (= x0 (+ 1 x1))) (not (= y0 (+ (- 1) y1))))) [ x1 := (+ x1 1) y1 := (- y1 1)] goto 1;if (and stay (or (not (= y0 y1)) (not (= x0 x1))) (or (not (= y0 y1)) (not (= x0 (+ (- 1) x1)))) (not stax) (not incx)) [ x1 := (- x1 1) y1 := y1] goto 1;if (and incy (or (not (= y0 y1)) (not (= x0 x1))) (not incx) (not stax) (not stay) (or (not (= x0 (+ (- 1) x1))) (not (= y0 (+ 1 y1))))) [ x1 := (- x1 1) y1 := (+ y1 1)] goto 1;if (and (or (not (= x0 x1)) (not (= y0 y1))) (not stax) (not stay) (not incx) (not incy) (or (not (= x0 (+ (- 1) x1))) (not (= y0 (+ (- 1) y1))))) [ x1 := (- x1 1) y1 := (- y1 1)] goto 1;otherwise abort() };
3: read  y1 x1 y0 x0; case {otherwise abort() };
Sucessfull Accelerations: 0

Benchmark: /home/luca/git/sweap/scripts/../examples/benchmarks/rpgsolve/neider-follow.rpg
Runtime: 1060ms
Result: Realizable
read y1 x1 y0 x0;
goto 0;
0: read  y1 x1 y0 x0; case {if true [ x0 := 0 x1 := 0 y0 := 0 y1 := 0] goto 1;otherwise abort() };
1: read  y1 x1 y0 x0; case {if (and (<= (+ x1 (* (- 1) x0) y0 (* (- 1) y1)) 0) (<= (+ x0 (* (- 1) x1) y0 (* (- 1) y1)) 0) (<= (+ x0 (* (- 1) x1) y1 (* (- 1) y0)) 0) (<= (+ x1 (* (- 1) x0) y1 (* (- 1) y0)) 0)) [ x0 := x0 y0 := y0] goto 2;if (and (<= (+ x1 (* (- 1) x0) y0 (* (- 1) y1)) 1) (<= (+ x0 (* (- 1) x1) y0 (* (- 1) y1)) (- 1)) (<= (+ x0 (* (- 1) x1) y1 (* (- 1) y0)) (- 1)) (<= (+ x1 (* (- 1) x0) y1 (* (- 1) y0)) 1)) [ x0 := (+ x0 1) y0 := y0] goto 2;if (and (<= (+ x1 (* (- 1) x0) y0 (* (- 1) y1)) (- 1)) (<= (+ x0 (* (- 1) x1) y0 (* (- 1) y1)) 1) (<= (+ x0 (* (- 1) x1) y1 (* (- 1) y0)) 1) (<= (+ x1 (* (- 1) x0) y1 (* (- 1) y0)) (- 1))) [ x0 := (- x0 1) y0 := y0] goto 2;if (and (<= (+ x1 (* (- 1) x0) y0 (* (- 1) y1)) (- 1)) (<= (+ x0 (* (- 1) x1) y0 (* (- 1) y1)) (- 1)) (<= (+ x0 (* (- 1) x1) y1 (* (- 1) y0)) 1) (<= (+ x1 (* (- 1) x0) y1 (* (- 1) y0)) 1)) [ x0 := x0 y0 := (+ y0 1)] goto 2;if (and (<= (+ x0 (* (- 1) x1) y1 (* (- 1) y0)) 0) (<= (+ x0 (* (- 1) x1) y0 (* (- 1) y1)) (- 2)) (<= (+ x1 (* (- 1) x0) y0 (* (- 1) y1)) 0) (<= (+ x1 (* (- 1) x0) y1 (* (- 1) y0)) 2)) [ x0 := (+ x0 1) y0 := (+ y0 1)] goto 2;if (and (<= (+ x0 (* (- 1) x1) y1 (* (- 1) y0)) 2) (<= (+ x0 (* (- 1) x1) y0 (* (- 1) y1)) 0) (<= (+ x1 (* (- 1) x0) y0 (* (- 1) y1)) (- 2)) (<= (+ x1 (* (- 1) x0) y1 (* (- 1) y0)) 0)) [ x0 := (- x0 1) y0 := (+ y0 1)] goto 2;if (and (<= (+ x1 (* (- 1) x0) y0 (* (- 1) y1)) 1) (<= (+ x0 (* (- 1) x1) y0 (* (- 1) y1)) 1) (<= (+ x0 (* (- 1) x1) y1 (* (- 1) y0)) (- 1)) (<= (+ x1 (* (- 1) x0) y1 (* (- 1) y0)) (- 1))) [ x0 := x0 y0 := (- y0 1)] goto 2;if (and (<= (+ x0 (* (- 1) x1) y1 (* (- 1) y0)) (- 2)) (<= (+ x0 (* (- 1) x1) y0 (* (- 1) y1)) 0) (<= (+ x1 (* (- 1) x0) y1 (* (- 1) y0)) 0) (<= (+ x1 (* (- 1) x0) y0 (* (- 1) y1)) 2)) [ x0 := (+ x0 1) y0 := (- y0 1)] goto 2;if (and (<= (+ x0 (* (- 1) x1) y1 (* (- 1) y0)) 0) (<= (+ x0 (* (- 1) x1) y0 (* (- 1) y1)) 2) (<= (+ x1 (* (- 1) x0) y0 (* (- 1) y1)) 0) (<= (+ x1 (* (- 1) x0) y1 (* (- 1) y0)) (- 2))) [ x0 := (- x0 1) y0 := (- y0 1)] goto 2;otherwise abort() };
2: read  y1 x1 y0 x0; case {if (and stay stax (or (<= (+ x0 (* (- 1) x1) y1 (* (- 1) y0)) 2) (not (<= 0 (+ x0 (* (- 1) x1)))) (not (<= 0 (+ y1 (* (- 1) y0))))) (or (<= (+ x1 (* (- 1) x0) y1 (* (- 1) y0)) 2) (not (<= 0 (+ y1 (* (- 1) y0)))) (not (<= 0 (+ x1 (* (- 1) x0))))) (or (not (<= 0 (+ x1 (* (- 1) x0)))) (not (<= 0 (+ y0 (* (- 1) y1)))) (<= (+ x1 (* (- 1) x0) y0 (* (- 1) y1)) 2)) (or (not (<= 0 (+ x0 (* (- 1) x1)))) (not (<= 0 (+ y0 (* (- 1) y1)))) (<= (+ x0 (* (- 1) x1) y0 (* (- 1) y1)) 2)) (or (<= (+ x0 (* (- 1) x1) y0 (* (- 1) y1)) 0) (<= (+ x1 (* (- 1) x0) y0 (* (- 1) y1)) 1) (<= (+ x1 (* (- 1) x0) y0 (* (- 1) y1)) 0)) (or (<= (+ x0 (* (- 1) x1) y1 (* (- 1) y0)) 0) (<= (+ x1 (* (- 1) x0) y1 (* (- 1) y0)) 0) (<= (+ x1 (* (- 1) x0) y1 (* (- 1) y0)) 1)) (or (<= (+ x0 (* (- 1) x1) y0 (* (- 1) y1)) 0) (<= (+ x0 (* (- 1) x1) y1 (* (- 1) y0)) 1) (<= (+ x0 (* (- 1) x1) y1 (* (- 1) y0)) 0)) (or (<= (+ x1 (* (- 1) x0) y0 (* (- 1) y1)) 1) (<= (+ x1 (* (- 1) x0) y1 (* (- 1) y0)) 0) (<= (+ x1 (* (- 1) x0) y0 (* (- 1) y1)) 0))) [ x1 := x1 y1 := y1] goto 1;if (and incy stax (or (not (<= 0 (+ x0 (* (- 1) x1)))) (not (<= 0 (+ y0 (* (- 1) y1)))) (<= (+ x0 (* (- 1) x1) y0 (* (- 1) y1)) 2)) (or (<= (+ x1 (* (- 1) x0) y1 (* (- 1) y0)) 2) (not (<= 0 (+ y1 (* (- 1) y0)))) (not (<= 0 (+ x1 (* (- 1) x0))))) (or (<= (+ x0 (* (- 1) x1) y1 (* (- 1) y0)) (- 1)) (<= (+ x1 (* (- 1) x0) y1 (* (- 1) y0)) (- 1)) (<= (+ x1 (* (- 1) x0) y1 (* (- 1) y0)) 0)) (or (<= (+ x0 (* (- 1) x1) y1 (* (- 1) y0)) 0) (<= (+ x1 (* (- 1) x0) y1 (* (- 1) y0)) (- 1)) (<= (+ x0 (* (- 1) x1) y1 (* (- 1) y0)) (- 1))) (or (not (<= 0 (+ x1 (* (- 1) x0)))) (not (<= 0 (+ y0 (* (- 1) y1)))) (<= (+ x1 (* (- 1) x0) y0 (* (- 1) y1)) 2)) (not stay) (or (<= (+ x0 (* (- 1) x1) y1 (* (- 1) y0)) (- 1)) (<= (+ x0 (* (- 1) x1) y1 (* (- 1) y0)) 0) (<= (+ x0 (* (- 1) x1) y1 (* (- 1) y0)) 1)) (or (<= (+ x1 (* (- 1) x0) y0 (* (- 1) y1)) 1) (<= (+ x1 (* (- 1) x0) y1 (* (- 1) y0)) (- 1)) (<= (+ x1 (* (- 1) x0) y1 (* (- 1) y0)) 0))) [ x1 := x1 y1 := (+ y1 1)] goto 1;if (and stax (or (<= (+ x0 (* (- 1) x1) y1 (* (- 1) y0)) 2) (not (<= 0 (+ x0 (* (- 1) x1)))) (not (<= 0 (+ y1 (* (- 1) y0))))) (or (not (<= 0 (+ x0 (* (- 1) x1)))) (not (<= 0 (+ y0 (* (- 1) y1)))) (<= (+ x0 (* (- 1) x1) y0 (* (- 1) y1)) 2)) (or (<= (+ x1 (* (- 1) x0) y1 (* (- 1) y0)) 2) (not (<= 0 (+ y1 (* (- 1) y0)))) (not (<= 0 (+ x1 (* (- 1) x0))))) (not stay) (not incy) (or (<= (+ x1 (* (- 1) x0) y0 (* (- 1) y1)) 0) (<= (+ x1 (* (- 1) x0) y1 (* (- 1) y0)) 1) (<= (+ x1 (* (- 1) x0) y0 (* (- 1) y1)) (- 1))) (or (<= (+ x1 (* (- 1) x0) y0 (* (- 1) y1)) (- 1)) (<= (+ x1 (* (- 1) x0) y0 (* (- 1) y1)) 0) (<= (+ x1 (* (- 1) x0) y0 (* (- 1) y1)) 1)) (or (<= (+ x0 (* (- 1) x1) y0 (* (- 1) y1)) (- 1)) (<= (+ x1 (* (- 1) x0) y0 (* (- 1) y1)) 0) (<= (+ x1 (* (- 1) x0) y0 (* (- 1) y1)) (- 1))) (or (<= (+ x0 (* (- 1) x1) y0 (* (- 1) y1)) 0) (<= (+ x0 (* (- 1) x1) y0 (* (- 1) y1)) (- 1)) (<= (+ x1 (* (- 1) x0) y0 (* (- 1) y1)) (- 1))) (or (<= (+ x0 (* (- 1) x1) y0 (* (- 1) y1)) 0) (<= (+ x0 (* (- 1) x1) y0 (* (- 1) y1)) (- 1)) (<= (+ x0 (* (- 1) x1) y1 (* (- 1) y0)) 1))) [ x1 := x1 y1 := (- y1 1)] goto 1;if (and stay incx (or (<= (+ x0 (* (- 1) x1) y1 (* (- 1) y0)) 2) (not (<= 0 (+ x0 (* (- 1) x1)))) (not (<= 0 (+ y1 (* (- 1) y0))))) (or (not (<= 0 (+ x0 (* (- 1) x1)))) (not (<= 0 (+ y0 (* (- 1) y1)))) (<= (+ x0 (* (- 1) x1) y0 (* (- 1) y1)) 2)) (or (<= (+ x1 (* (- 1) x0) y1 (* (- 1) y0)) 2) (not (<= 0 (+ y1 (* (- 1) y0)))) (not (<= 0 (+ x1 (* (- 1) x0))))) (or (<= (+ x1 (* (- 1) x0) y0 (* (- 1) y1)) (- 1)) (<= (+ x1 (* (- 1) x0) y1 (* (- 1) y0)) (- 1)) (<= (+ x1 (* (- 1) x0) y1 (* (- 1) y0)) 0)) (or (<= (+ x0 (* (- 1) x1) y1 (* (- 1) y0)) 1) (<= (+ x1 (* (- 1) x0) y1 (* (- 1) y0)) (- 1)) (<= (+ x1 (* (- 1) x0) y1 (* (- 1) y0)) 0)) (not stax) (or (<= (+ x1 (* (- 1) x0) y0 (* (- 1) y1)) 0) (<= (+ x1 (* (- 1) x0) y1 (* (- 1) y0)) (- 1)) (<= (+ x1 (* (- 1) x0) y0 (* (- 1) y1)) (- 1))) (or (<= (+ x1 (* (- 1) x0) y0 (* (- 1) y1)) (- 1)) (<= (+ x1 (* (- 1) x0) y0 (* (- 1) y1)) 0) (<= (+ x1 (* (- 1) x0) y0 (* (- 1) y1)) 1))) [ x1 := (+ x1 1) y1 := y1] goto 1;if (and incy incx (or (not (<= 0 (+ x0 (* (- 1) x1)))) (not (<= 0 (+ y0 (* (- 1) y1)))) (<= (+ x0 (* (- 1) x1) y0 (* (- 1) y1)) 2)) (or (not (<= 0 (+ x1 (* (- 1) x0)))) (not (<= 0 (+ y0 (* (- 1) y1)))) (<= (+ x1 (* (- 1) x0) y0 (* (- 1) y1)) 2)) (not stax) (not stay) (or (<= (+ x1 (* (- 1) x0) y0 (* (- 1) y1)) 1) (<= (+ x1 (* (- 1) x0) y1 (* (- 1) y0)) (- 2)) (<= (+ x1 (* (- 1) x0) y0 (* (- 1) y1)) 0)) (or (<= (+ x0 (* (- 1) x1) y1 (* (- 1) y0)) 2) (not (<= 0 (+ x0 (* (- 1) x1)))) (not (<= 0 (+ y1 (* (- 1) y0))))) (or (<= (+ x0 (* (- 1) x1) y1 (* (- 1) y0)) 0) (<= (+ x1 (* (- 1) x0) y1 (* (- 1) y0)) (- 2)) (<= (+ x1 (* (- 1) x0) y1 (* (- 1) y0)) (- 1))) (or (<= (+ x1 (* (- 1) x0) y1 (* (- 1) y0)) (- 2)) (<= (+ x1 (* (- 1) x0) y1 (* (- 1) y0)) 1)) (or (<= (+ x1 (* (- 1) x0) y0 (* (- 1) y1)) 0) (<= (+ x1 (* (- 1) x0) y1 (* (- 1) y0)) (- 2)) (<= (+ x1 (* (- 1) x0) y1 (* (- 1) y0)) (- 1)))) [ x1 := (+ x1 1) y1 := (+ y1 1)] goto 1;if (and incx (not stay) (not incy) (or (<= (+ x1 (* (- 1) x0) y1 (* (- 1) y0)) 2) (not (<= 0 (+ y1 (* (- 1) y0)))) (not (<= 0 (+ x1 (* (- 1) x0))))) (or (<= (+ x0 (* (- 1) x1) y1 (* (- 1) y0)) 2) (not (<= 0 (+ y1 (* (- 1) y0)))) (not (<= 0 (+ x0 (* (- 1) x1))))) (not stax) (or (<= (+ x1 (* (- 1) x0) y0 (* (- 1) y1)) (- 1)) (<= (+ x1 (* (- 1) x0) y1 (* (- 1) y0)) 0) (<= (+ x1 (* (- 1) x0) y0 (* (- 1) y1)) (- 2))) (or (not (<= 0 (+ x0 (* (- 1) x1)))) (not (<= 0 (+ y0 (* (- 1) y1)))) (<= (+ x0 (* (- 1) x1) y0 (* (- 1) y1)) 2)) (or (<= (+ x1 (* (- 1) x0) y0 (* (- 1) y1)) (- 2)) (<= (+ x1 (* (- 1) x0) y0 (* (- 1) y1)) (- 1)) (<= (+ x1 (* (- 1) x0) y0 (* (- 1) y1)) 0)) (or (<= (+ x0 (* (- 1) x1) y0 (* (- 1) y1)) 0) (<= (+ x1 (* (- 1) x0) y0 (* (- 1) y1)) (- 1)) (<= (+ x1 (* (- 1) x0) y0 (* (- 1) y1)) (- 2)))) [ x1 := (+ x1 1) y1 := (- y1 1)] goto 1;if (and stay (or (not (<= 0 (+ x0 (* (- 1) x1)))) (not (<= 0 (+ y0 (* (- 1) y1)))) (<= (+ x0 (* (- 1) x1) y0 (* (- 1) y1)) 2)) (or (<= (+ x1 (* (- 1) x0) y1 (* (- 1) y0)) 2) (not (<= 0 (+ y1 (* (- 1) y0)))) (not (<= 0 (+ x1 (* (- 1) x0))))) (not incx) (not stax) (or (<= (+ x0 (* (- 1) x1) y1 (* (- 1) y0)) 0) (<= (+ x1 (* (- 1) x0) y1 (* (- 1) y0)) 1) (<= (+ x0 (* (- 1) x1) y1 (* (- 1) y0)) (- 1))) (or (<= (+ x0 (* (- 1) x1) y1 (* (- 1) y0)) (- 1)) (<= (+ x0 (* (- 1) x1) y1 (* (- 1) y0)) 0) (<= (+ x0 (* (- 1) x1) y1 (* (- 1) y0)) 1)) (or (<= (+ x0 (* (- 1) x1) y0 (* (- 1) y1)) (- 1)) (<= (+ x0 (* (- 1) x1) y1 (* (- 1) y0)) 0) (<= (+ x0 (* (- 1) x1) y1 (* (- 1) y0)) (- 1))) (or (<= (+ x0 (* (- 1) x1) y0 (* (- 1) y1)) 0) (<= (+ x0 (* (- 1) x1) y0 (* (- 1) y1)) (- 1)) (<= (+ x0 (* (- 1) x1) y1 (* (- 1) y0)) (- 1))) (or (not (<= 0 (+ x1 (* (- 1) x0)))) (not (<= 0 (+ y0 (* (- 1) y1)))) (<= (+ x1 (* (- 1) x0) y0 (* (- 1) y1)) 2)) (or (<= (+ x0 (* (- 1) x1) y0 (* (- 1) y1)) 0) (<= (+ x0 (* (- 1) x1) y0 (* (- 1) y1)) (- 1)) (<= (+ x1 (* (- 1) x0) y0 (* (- 1) y1)) 1))) [ x1 := (- x1 1) y1 := y1] goto 1;if (and incy (or (not (<= 0 (+ x1 (* (- 1) x0)))) (not (<= 0 (+ y0 (* (- 1) y1)))) (<= (+ x1 (* (- 1) x0) y0 (* (- 1) y1)) 2)) (or (not (<= 0 (+ x0 (* (- 1) x1)))) (not (<= 0 (+ y0 (* (- 1) y1)))) (<= (+ x0 (* (- 1) x1) y0 (* (- 1) y1)) 2)) (or (<= (+ x0 (* (- 1) x1) y1 (* (- 1) y0)) (- 2)) (<= (+ x0 (* (- 1) x1) y1 (* (- 1) y0)) 1)) (or (<= (+ x0 (* (- 1) x1) y0 (* (- 1) y1)) 0) (<= (+ x0 (* (- 1) x1) y1 (* (- 1) y0)) (- 1)) (<= (+ x0 (* (- 1) x1) y1 (* (- 1) y0)) (- 2))) (not stax) (not incx) (not stay) (or (<= (+ x1 (* (- 1) x0) y1 (* (- 1) y0)) 2) (not (<= 0 (+ x1 (* (- 1) x0)))) (not (<= 0 (+ y1 (* (- 1) y0))))) (or (<= (+ x0 (* (- 1) x1) y1 (* (- 1) y0)) (- 2)) (<= (+ x1 (* (- 1) x0) y1 (* (- 1) y0)) 0) (<= (+ x1 (* (- 1) x0) y1 (* (- 1) y0)) 1)) (or (<= (+ x0 (* (- 1) x1) y1 (* (- 1) y0)) (- 1)) (<= (+ x1 (* (- 1) x0) y1 (* (- 1) y0)) 0) (<= (+ x0 (* (- 1) x1) y1 (* (- 1) y0)) (- 2)))) [ x1 := (- x1 1) y1 := (+ y1 1)] goto 1;if (and (not stax) (not incx) (not stay) (not incy) (or (<= (+ x1 (* (- 1) x0) y1 (* (- 1) y0)) 2) (not (<= 0 (+ y1 (* (- 1) y0)))) (not (<= 0 (+ x1 (* (- 1) x0))))) (or (<= (+ x0 (* (- 1) x1) y1 (* (- 1) y0)) 2) (not (<= 0 (+ y1 (* (- 1) y0)))) (not (<= 0 (+ x0 (* (- 1) x1))))) (or (not (<= 0 (+ x1 (* (- 1) x0)))) (not (<= 0 (+ y0 (* (- 1) y1)))) (<= (+ x1 (* (- 1) x0) y0 (* (- 1) y1)) 2)) (or (<= (+ x0 (* (- 1) x1) y0 (* (- 1) y1)) (- 2)) (<= (+ x0 (* (- 1) x1) y0 (* (- 1) y1)) (- 1)) (<= (+ x0 (* (- 1) x1) y0 (* (- 1) y1)) 1)) (or (<= (+ x0 (* (- 1) x1) y0 (* (- 1) y1)) (- 1)) (<= (+ x0 (* (- 1) x1) y0 (* (- 1) y1)) (- 2)) (<= (+ x0 (* (- 1) x1) y1 (* (- 1) y0)) 0)) (or (<= (+ x0 (* (- 1) x1) y0 (* (- 1) y1)) (- 1)) (<= (+ x0 (* (- 1) x1) y0 (* (- 1) y1)) (- 2)) (<= (+ x1 (* (- 1) x0) y0 (* (- 1) y1)) 0))) [ x1 := (- x1 1) y1 := (- y1 1)] goto 1;otherwise abort() };
3: read  y1 x1 y0 x0; case {otherwise abort() };
Sucessfull Accelerations: 0

Benchmark: /home/luca/git/sweap/scripts/../examples/benchmarks/rpgsolve/neider-solitary.rpg
Runtime: 454ms
Result: Realizable
read y x;
goto 0;
0: read  y x; case {if true [ x := 1 y := 1] goto 1;otherwise abort() };
1: read  y x; case {if (and (>= x 0) (<= x 2)) [ x := x y := y] goto 1;if (and (>= x 0) (<= x 1)) [ x := (+ x 1) y := y] goto 1;if (and (>= x 1) (<= x 2)) [ x := (- x 1) y := y] goto 1;if (and (>= x 0) (<= x 2)) [ x := x y := (+ y 1)] goto 1;if (and (>= x 0) (<= x 1)) [ x := (+ x 1) y := (+ y 1)] goto 1;if (and (>= x 1) (<= x 2)) [ x := (- x 1) y := (+ y 1)] goto 1;if (and (>= x 0) (<= x 2)) [ x := x y := (- y 1)] goto 1;if (and (>= x 0) (<= x 1)) [ x := (+ x 1) y := (- y 1)] goto 1;if (and (>= x 1) (<= x 2)) [ x := (- x 1) y := (- y 1)] goto 1;otherwise abort() };
2: read  y x; case {otherwise abort() };
Sucessfull Accelerations: 0

Benchmark: /home/luca/git/sweap/scripts/../examples/benchmarks/rpgsolve/neider-square-5x5.rpg
Runtime: 724ms
Result: Realizable
read y x;
goto 0;
0: read  y x; case {if true [ x := 1 y := 1] goto 1;otherwise abort() };
1: read  y x; case {if (and (>= y 1) (<= y 3) (>= x 1) (<= x 3)) [ x := x y := y] goto 2;if (and (>= y 1) (<= y 3) (>= x 0) (<= x 2)) [ x := (+ x 1) y := y] goto 2;if (and (>= y 1) (<= y 3) (>= x 2) (<= x 4)) [ x := (- x 1) y := y] goto 2;if (and (>= y 0) (<= y 2) (>= x 1) (<= x 3)) [ x := x y := (+ y 1)] goto 2;if (and (>= y 0) (<= y 2) (>= x 0) (<= x 2)) [ x := (+ x 1) y := (+ y 1)] goto 2;if (and (>= y 0) (<= y 2) (>= x 2) (<= x 4)) [ x := (- x 1) y := (+ y 1)] goto 2;if (and (>= y 2) (<= y 4) (>= x 1) (<= x 3)) [ x := x y := (- y 1)] goto 2;if (and (>= y 2) (<= y 4) (>= x 0) (<= x 2)) [ x := (+ x 1) y := (- y 1)] goto 2;if (and (>= y 2) (<= y 4) (>= x 2) (<= x 4)) [ x := (- x 1) y := (- y 1)] goto 2;otherwise abort() };
2: read  y x; case {if (and stay stax (>= y 0) (<= y 4) (>= x 0) (<= x 4)) [ x := x y := y] goto 1;if (and incy stax (not stay) (>= y 0) (<= y 3) (>= x 0) (<= x 4)) [ x := x y := (+ y 1)] goto 1;if (and stax (not incy) (not stay) (>= y 1) (<= y 4) (>= x 0) (<= x 4)) [ x := x y := (- y 1)] goto 1;if (and stay incx (not stax) (>= y 0) (<= y 4) (>= x 0) (<= x 3)) [ x := (+ x 1) y := y] goto 1;if (and incy incx (not stay) (not stax) (>= y 0) (<= y 3) (>= x 0) (<= x 3)) [ x := (+ x 1) y := (+ y 1)] goto 1;if (and incx (not incy) (not stay) (not stax) (>= y 1) (<= y 4) (>= x 0) (<= x 3)) [ x := (+ x 1) y := (- y 1)] goto 1;if (and stay (not incx) (not stax) (>= y 0) (<= y 4) (>= x 1) (<= x 4)) [ x := (- x 1) y := y] goto 1;if (and incy (not stay) (not incx) (not stax) (>= y 0) (<= y 3) (>= x 1) (<= x 4)) [ x := (- x 1) y := (+ y 1)] goto 1;if (and (not stax) (not stay) (not incy) (not incx) (>= y 1) (<= y 4) (>= x 1) (<= x 4)) [ x := (- x 1) y := (- y 1)] goto 1;otherwise abort() };
3: read  y x; case {otherwise abort() };
Sucessfull Accelerations: 0

Benchmark: /home/luca/git/sweap/scripts/../examples/benchmarks/rpgsolve/repeated-robot-resource-1d.rpg
Runtime: 24971ms
Result: Realizable
read x resource;
goto 0;
0: read  x resource; case {if (<= resource 0) [ resource := env_in] goto 0;if (>= resource 1) [ resource := (- resource 1) x := env_in] goto 1;otherwise abort() };
1: read  x resource; case {if (<= x 0) [] goto 0;if (and (or (not (<= x 0)) (= x 1)) (<= x 3)) [ x := (- x 1)] goto 1;if (and (or (<= x 2) (<= x 1)) (or (not (<= x 0)) (= x 1))) [] goto 1;if (= x 1) [ x := (+ x 1)] goto 1;otherwise abort() };
2: goto 2;
3: if (or (<= x 3) (<= x (- 1)) (<= x (- 2)) (<= x (- 3))) {goto 3;} else {[ p0_1__r__nv_x:=x p0_1__r__nv_resource:=resource ]; read  x resource; case {if (<= x 0) [] goto 2;if (and (or (<= x 3) (not (<= 0 resource)) (not (<= 0 x)) (<= x 1) (<= x (- 1)) (<= x (- 2)) (<= x (- 3)) (<= (+ p0_1__r__nv_x p0_1__r__nv_resource) (+ (- 1) x resource))) (or (<= x 2) (<= x 3) (not (<= 0 resource)) (not (<= 0 x)) (<= x (- 1)) (<= x (- 2)) (<= x (- 3)) (<= (- 1) p0_1__r__nv_resource)) (or (<= x 2) (<= x 3) (<= 0 resource) (not (<= 0 x)) (<= x 1) (<= x (- 1)) (<= x (- 2)) (<= x (- 3)) (<= p0_1__r__nv_x (+ (- 1) x))) (or (<= x 2) (<= x 3) (<= 0 resource) (not (<= 0 x)) (<= x 1) (<= x (- 1)) (<= x (- 2)) (<= x (- 3)) (<= (- 1) p0_1__r__nv_x)) (>= x 1)) [] goto 4;if (and (or (not (<= 0 resource)) (<= x 1) (<= x 2) (<= x 0) (<= (+ p0_1__r__nv_x p0_1__r__nv_resource) (+ x resource)) (<= x (- 2)) (<= x (- 3)) (<= x (- 4)) (not (<= (- 1) x))) (or (not (<= 0 resource)) (<= x 1) (<= x 2) (<= x (- 2)) (<= x (- 3)) (<= x (- 4)) (not (<= (- 1) x)) (<= (- 1) p0_1__r__nv_resource)) (or (<= 0 resource) (<= x 1) (<= x 2) (<= x 0) (<= p0_1__r__nv_x x) (<= x (- 2)) (<= x (- 3)) (<= x (- 4)) (not (<= (- 1) x))) (or (<= 0 resource) (<= x 1) (<= x 2) (<= x 0) (<= x (- 2)) (<= x (- 3)) (<= x (- 4)) (not (<= (- 1) x)) (<= (- 1) p0_1__r__nv_x)) (>= x 1)) [ x := (+ x 1)] goto 4;if (and (or (<= 0 resource) (<= x 2) (<= x 3) (<= x 4) (<= x 0) (<= x (- 1)) (<= x (- 2)) (<= p0_1__r__nv_x (+ (- 2) x))) (or (<= 0 resource) (<= x 2) (<= x 3) (<= x 4) (<= x (- 1)) (<= x (- 2)) (<= (- 1) p0_1__r__nv_x)) (or (<= x 2) (<= x 3) (<= x 4) (<= x 0) (not (<= 0 resource)) (<= x (- 1)) (<= x (- 2)) (<= (- 1) p0_1__r__nv_resource)) (or (<= x 2) (<= x 3) (<= x 4) (<= x 0) (not (<= 0 resource)) (<= x (- 1)) (<= x (- 2)) (<= (+ p0_1__r__nv_x p0_1__r__nv_resource) (+ (- 2) x resource))) (>= x 1)) [ x := (- x 1)] goto 4;otherwise abort() };}
4: if (and (or (<= x 3) (<= 0 resource) (not (<= 0 x)) (<= x 1) (<= x (- 1)) (<= x (- 2)) (<= x (- 3)) (<= (- 1) p0_1__r__nv_x)) (or (<= x 2) (<= x 3) (<= 0 resource) (not (<= 0 x)) (<= x (- 1)) (<= x (- 2)) (<= x (- 3)) (<= p0_1__r__nv_x (+ (- 1) x))) (or (<= x 2) (<= x 3) (not (<= 0 x)) (<= x 1) (not (<= 0 resource)) (<= x (- 1)) (<= x (- 2)) (<= x (- 3)) (<= (+ p0_1__r__nv_x p0_1__r__nv_resource) (+ (- 1) x resource))) (or (<= x 2) (<= x 3) (not (<= 0 x)) (<= x 1) (not (<= 0 resource)) (<= x (- 1)) (<= x (- 2)) (<= x (- 3)) (<= (- 1) p0_1__r__nv_resource))) {goto 3;} else {abort();}
Sucessfull Accelerations: 2

Benchmark: /home/luca/git/sweap/scripts/../examples/benchmarks/rpgsolve/robot-cat-real-1d.rpg
Runtime: 600013ms
Result: 
Sucessfull Accelerations: 0

Benchmark: /home/luca/git/sweap/scripts/../examples/benchmarks/rpgsolve/robot-cat-real-2d.rpg
Runtime: 600056ms
Result: 
Sucessfull Accelerations: 0

Benchmark: /home/luca/git/sweap/scripts/../examples/benchmarks/rpgsolve/robot-cat-unreal-1d.rpg
Runtime: 600013ms
Result: 
Sucessfull Accelerations: 0

Benchmark: /home/luca/git/sweap/scripts/../examples/benchmarks/rpgsolve/robot-cat-unreal-2d.rpg
Runtime: 600115ms
Result: 
Sucessfull Accelerations: 0

Benchmark: /home/luca/git/sweap/scripts/../examples/benchmarks/rpgsolve/robot-grid-comute-1d.rpg
Runtime: 600019ms
Result: 
Sucessfull Accelerations: 3

Benchmark: /home/luca/git/sweap/scripts/../examples/benchmarks/rpgsolve/robot-grid-comute-2d.rpg
Runtime: 600022ms
Result: 
Sucessfull Accelerations: 2

Benchmark: /home/luca/git/sweap/scripts/../examples/benchmarks/rpgsolve/robot-grid-reach-1d.rpg
Runtime: 1445ms
Result: Realizable
read x;
goto 0;
0: read  x; case {if (= x 0) [] goto 1;if (or (= x 1) (= x (- 1)) (= x (- 2)) (= x (- 3))) [ x := (+ x 1)] goto 0;if (or (= x 1) (= x 2) (= x 3) (= x (- 1))) [ x := (- x 1)] goto 0;if (and (or (= x 1) (= x 0) (= x 2) (= x (- 1)) (= x (- 2))) (or (not (= x 0)) (= x (- 1)) (= x 1))) [] goto 0;otherwise abort() };
1: read  x; case {if true [] goto 1;otherwise abort() };
2: if (or (= x 0) (= x 1) (= x 2) (= x 3) (= x (- 1)) (= x (- 2)) (= x (- 3))) {goto 2;} else {[ p0_1__r__nv_x:=x ]; read  x; case {if (= x 0) [] goto 3;if (and (or (= x 1) (= x 2) (= x 3) (<= 2 x) (= x (- 1)) (= x (- 2)) (= x (- 3)) (<= (* (- 1) p0_1__r__nv_x) (+ (- 1) (* (- 1) x)))) (or (= x 1) (= x 2) (= x 3) (not (<= 2 x)) (<= 1 p0_1__r__nv_x) (= x (- 1)) (= x (- 2)) (= x (- 3))) (or (= x 1) (= x 2) (= x 3) (<= 2 x) (<= p0_1__r__nv_x 1) (= x (- 1)) (= x (- 2)) (= x (- 3))) (or (= x 1) (= x 2) (= x 3) (not (<= 2 x)) (= x (- 1)) (= x (- 2)) (= x (- 3)) (<= p0_1__r__nv_x (+ (- 1) x))) (not (= x 0))) [] goto 4;if (and (or (= x 2) (<= 1 x) (<= p0_1__r__nv_x 1) (= x (- 2)) (= x (- 3)) (= x (- 4)) (= x (- 1))) (or (= x 1) (= x 2) (<= p0_1__r__nv_x x) (not (<= 1 x)) (= x (- 2)) (= x (- 3)) (= x (- 4))) (or (= x 1) (= x 2) (<= 1 x) (= x (- 2)) (= x (- 3)) (= x (- 4)) (= x (- 1)) (<= (* (- 1) p0_1__r__nv_x) (+ (- 2) (* (- 1) x)))) (or (= x 1) (= x 2) (not (<= 1 x)) (<= 1 p0_1__r__nv_x) (= x (- 2)) (= x (- 3)) (= x (- 4)) (= x (- 1)))) [ x := (+ x 1)] goto 4;if (and (or (<= 1 p0_1__r__nv_x) (= x 1) (= x 2) (= x 3) (= x 4) (not (<= 3 x)) (= x (- 1)) (= x (- 2))) (or (= x 1) (= x 2) (= x 3) (= x 4) (<= 3 x) (= x (- 1)) (= x (- 2)) (<= (* (- 1) p0_1__r__nv_x) (* (- 1) x))) (not (= x 0)) (or (= x 1) (= x 2) (= x 3) (= x 4) (<= 3 x) (<= p0_1__r__nv_x 1) (= x (- 1)) (= x (- 2))) (or (= x 1) (= x 2) (= x 3) (= x 4) (not (<= 3 x)) (= x (- 1)) (= x (- 2)) (<= p0_1__r__nv_x (+ (- 2) x)))) [ x := (- x 1)] goto 4;otherwise abort() };}
3: goto 3;
4: if (and (or (= x 0) (= x 1) (= x 2) (= x 3) (<= 2 x) (= x (- 1)) (= x (- 2)) (= x (- 3)) (<= (* (- 1) p0_1__r__nv_x) (+ (- 1) (* (- 1) x)))) (or (= x 0) (= x 1) (= x 2) (= x 3) (not (<= 2 x)) (= x (- 1)) (= x (- 2)) (= x (- 3)) (<= p0_1__r__nv_x (+ (- 1) x))) (or (= x 0) (= x 1) (= x 2) (= x 3) (<= 2 x) (<= p0_1__r__nv_x 1) (= x (- 1)) (= x (- 2)) (= x (- 3))) (or (= x 0) (= x 1) (= x 2) (= x 3) (<= 1 p0_1__r__nv_x) (not (<= 2 x)) (= x (- 1)) (= x (- 2)) (= x (- 3)))) {goto 2;} else {abort();}
Sucessfull Accelerations: 1

Benchmark: /home/luca/git/sweap/scripts/../examples/benchmarks/rpgsolve/robot-grid-reach-2d.rpg
Runtime: 600022ms
Result: 
Sucessfull Accelerations: 0

Benchmark: /home/luca/git/sweap/scripts/../examples/benchmarks/rpgsolve/robot-resource-1d.rpg
Runtime: 2797ms
Result: Unrealizable
Sucessfull Accelerations: 1

Benchmark: /home/luca/git/sweap/scripts/../examples/benchmarks/rpgsolve/robot-resource-2d.rpg
Runtime: 4760ms
Result: Unrealizable
Sucessfull Accelerations: 1

Benchmark: /home/luca/git/sweap/scripts/../examples/benchmarks/rpgsolve/heim-buechi.rpg
Runtime: 600003ms
Result: 
Sucessfull Accelerations: 4

Benchmark: /home/luca/git/sweap/scripts/../examples/benchmarks/rpgsolve/heim-buechi-u.rpg
Runtime: 600005ms
Result: 
Sucessfull Accelerations: 0

Benchmark: /home/luca/git/sweap/scripts/../examples/benchmarks/rpgsolve/heim-double-x.rpg
Runtime: 600004ms
Result: 
Sucessfull Accelerations: 0

Benchmark: /home/luca/git/sweap/scripts/../examples/benchmarks/rpgsolve/heim-normal.rpg
Runtime: 349781ms
Result: 
Sucessfull Accelerations: 0

Benchmark: /home/luca/git/sweap/scripts/../examples/benchmarks/rpgsolve/xyloop.rpg
Runtime: 600004ms
Result: 
Sucessfull Accelerations: 0

Benchmark: /home/luca/git/sweap/scripts/../examples/benchmarks/rpgsolve/finite/arbiter-10.rpg
Runtime: 6221ms
Result: Realizable
read finished con_room env_room cnt;
goto 0;
0: read  finished con_room env_room cnt; case {if (or (not (<= 0 no_of_tasks)) (not (<= no_of_tasks 10))) [] goto 0;if (and (>= no_of_tasks 0) (<= no_of_tasks 10)) [ cnt := no_of_tasks env_room := roomAorB] goto 1;otherwise abort() };
1: read  finished con_room env_room cnt; case {if (= cnt 0) [ finished := true] goto 0;if (and (or (= cnt 1) (<= cnt 3) (= cnt 4) (<= cnt 4) (= cnt 5) (<= cnt 5) (= cnt 6) (<= cnt 6) (= cnt 7) (<= cnt 7) (= cnt 8) (<= cnt 8) (= cnt 9) (not env_room) (not con_room) (<= cnt 0) (<= cnt 10)) (or env_room (not con_room) (<= cnt 0)) (or (= cnt 3) (= cnt 1) (<= cnt 3) (= cnt 4) (<= cnt 4) (= cnt 5) (<= cnt 5) (= cnt 6) (<= cnt 6) (= cnt 7) (<= cnt 7) (= cnt 8) (<= cnt 8) (= cnt 9) env_room con_room (<= cnt 0) (<= cnt 10) (<= cnt 2) (= cnt 2) (<= cnt 1)) (or (not env_room) con_room (<= cnt 0)) (>= cnt 1)) [ cnt := (- cnt 1)] goto 1;if (and (or (= cnt 0) (= cnt 1) (<= cnt 1) (= cnt 2) (<= cnt 2) (= cnt 3) (<= cnt 3) (= cnt 4) (<= cnt 4) (= cnt 5) (<= cnt 5) (= cnt 6) (<= cnt 6) (= cnt 7) (<= cnt 7) (= cnt 8) (<= cnt 8) (= cnt 9) (not con_room) (<= cnt 10)) (or env_room (not con_room) (<= cnt 0) (= cnt 0)) (or (= cnt 0) (= cnt 1) (<= cnt 1) (= cnt 2) (<= cnt 2) (= cnt 3) (<= cnt 3) (= cnt 4) (<= cnt 4) (= cnt 5) (<= cnt 5) (= cnt 6) (<= cnt 6) (= cnt 7) (<= cnt 7) (= cnt 8) (<= cnt 8) (= cnt 9) con_room (<= cnt 10) (<= cnt 0)) (or (not env_room) con_room (<= cnt 0)) (>= cnt 0)) [] goto 1;if (and (or (= cnt 2) (<= cnt 2) (= cnt 3) (<= cnt 3) (= cnt 4) (<= cnt 4) (= cnt 5) (<= cnt 5) (= cnt 6) (<= cnt 6) (= cnt 7) (<= cnt 0) (<= cnt 7) (= cnt 8) (<= cnt 8) (= cnt 9) (= cnt 1) (not env_room) (<= cnt 10)) (or (<= cnt 1) (= cnt 2) (<= cnt 2) (= cnt 3) (<= cnt 3) (= cnt 4) (<= cnt 4) (= cnt 5) (<= cnt 5) (= cnt 6) (<= cnt 6) (= cnt 7) (<= cnt 0) (<= cnt 7) (= cnt 8) (<= cnt 8) (= cnt 9) env_room (<= cnt 10) (= cnt 0)) (or (not (<= cnt 0)) (= cnt 1)) (or env_room con_room) (or (not env_room) (not con_room))) [] goto 2;otherwise abort() };
2: read  finished con_room env_room cnt; case {if (and (or env_room (= cnt 0) (= cnt 1) (<= cnt 0) (<= cnt 1) (= cnt 2) (<= cnt 2) (= cnt 3) (<= cnt 3) (= cnt 4) (<= cnt 4) (= cnt 5) (<= cnt 5) (= cnt 6) (<= cnt 6) (= cnt 7) (<= cnt 7) (= cnt 8) (<= cnt 8) (= cnt 9)) (or (= cnt 0) (= cnt 1) (<= cnt 0) (<= cnt 1) (= cnt 2) (<= cnt 2) (= cnt 3) (<= cnt 3) (= cnt 4) (<= cnt 4) (= cnt 5) (<= cnt 5) (= cnt 6) (<= cnt 6) (= cnt 7) (<= cnt 7) (= cnt 8) (<= cnt 8) (= cnt 9) (not env_room) (<= cnt 10)) (>= cnt 0)) [ con_room := true] goto 1;if (and (or (= cnt 5) (= cnt 1) (= cnt 0) env_room (<= cnt 5) (= cnt 6) (<= cnt 6) (= cnt 7) (= cnt 2) (<= cnt 1) (<= cnt 0) (<= cnt 7) (= cnt 8) (<= cnt 8) (= cnt 9) (= cnt 3) (<= cnt 2) (<= cnt 10)) (or (<= cnt 4) (= cnt 5) (= cnt 1) (= cnt 0) (<= cnt 5) (= cnt 6) (<= cnt 6) (= cnt 7) (= cnt 2) (<= cnt 1) (<= cnt 0) (<= cnt 7) (= cnt 8) (<= cnt 8) (= cnt 9) (= cnt 3) (<= cnt 2) (= cnt 4) (<= cnt 3) (not env_room)) (>= cnt 0)) [ con_room := false] goto 1;otherwise abort() };
3: abort();
Sucessfull Accelerations: 0

Benchmark: /home/luca/git/sweap/scripts/../examples/benchmarks/rpgsolve/finite/arbiter-50.rpg
Runtime: 27925ms
Result: Realizable
read finished con_room env_room cnt;
goto 0;
0: read  finished con_room env_room cnt; case {if (or (not (<= 0 no_of_tasks)) (not (<= no_of_tasks 50))) [] goto 0;if (and (>= no_of_tasks 0) (<= no_of_tasks 50)) [ cnt := no_of_tasks env_room := roomAorB] goto 1;otherwise abort() };
1: read  finished con_room env_room cnt; case {if (= cnt 0) [ finished := true] goto 0;if (and (or (not env_room) con_room) (or (<= cnt 0) (<= cnt 1) (= cnt 2) (<= cnt 2) (= cnt 3) (= cnt 1) (<= cnt 3) (= cnt 4) (<= cnt 4) (= cnt 5) (<= cnt 5) (= cnt 6) (<= cnt 6) (= cnt 7) (<= cnt 7) (= cnt 8) (<= cnt 8) (= cnt 9) (<= cnt 9) (= cnt 10) (<= cnt 10) (= cnt 11) (<= cnt 11) (= cnt 12) (<= cnt 12) (= cnt 13) (<= cnt 13) (= cnt 14) (<= cnt 14) (= cnt 15) (<= cnt 15) (= cnt 16) (<= cnt 16) (= cnt 17) (<= cnt 17) (= cnt 18) (<= cnt 18) (= cnt 19) (<= cnt 19) (= cnt 20) (<= cnt 20) (= cnt 21) (<= cnt 21) (= cnt 22) (<= cnt 22) (= cnt 23) (<= cnt 23) (= cnt 24) (<= cnt 24) (= cnt 25) (<= cnt 25) (= cnt 26) (<= cnt 26) (= cnt 27) (<= cnt 27) (= cnt 28) (<= cnt 28) (= cnt 29) (<= cnt 29) (= cnt 30) (<= cnt 30) (= cnt 31) (<= cnt 31) (= cnt 32) (<= cnt 32) (= cnt 33) (<= cnt 33) (= cnt 34) (<= cnt 34) (= cnt 35) (<= cnt 35) (= cnt 36) (<= cnt 36) (= cnt 37) (<= cnt 37) (= cnt 38) (<= cnt 38) (= cnt 39) (<= cnt 39) (= cnt 40) (<= cnt 40) (= cnt 41) (<= cnt 41) (= cnt 42) (<= cnt 42) (= cnt 43) (<= cnt 43) (= cnt 44) (<= cnt 44) (= cnt 45) (<= cnt 45) (= cnt 46) (<= cnt 46) (= cnt 47) (<= cnt 47) (= cnt 48) (<= cnt 48) (= cnt 49) (<= cnt 50) env_room con_room) (or env_room (not con_room) (<= cnt 0)) (or (<= cnt 0) (<= cnt 1) (= cnt 2) (<= cnt 2) (= cnt 3) (= cnt 1) (<= cnt 3) (= cnt 4) (<= cnt 4) (= cnt 5) (<= cnt 5) (= cnt 6) (<= cnt 6) (= cnt 7) (<= cnt 7) (= cnt 8) (<= cnt 8) (= cnt 9) (<= cnt 9) (= cnt 10) (<= cnt 10) (= cnt 11) (<= cnt 11) (= cnt 12) (<= cnt 12) (= cnt 13) (<= cnt 13) (= cnt 14) (<= cnt 14) (= cnt 15) (<= cnt 15) (= cnt 16) (<= cnt 16) (= cnt 17) (<= cnt 17) (= cnt 18) (<= cnt 18) (= cnt 19) (<= cnt 19) (= cnt 20) (<= cnt 20) (= cnt 21) (<= cnt 21) (= cnt 22) (<= cnt 22) (= cnt 23) (<= cnt 23) (= cnt 24) (<= cnt 24) (= cnt 25) (<= cnt 25) (= cnt 26) (<= cnt 26) (= cnt 27) (<= cnt 27) (= cnt 28) (<= cnt 28) (= cnt 29) (<= cnt 29) (= cnt 30) (<= cnt 30) (= cnt 31) (<= cnt 31) (= cnt 32) (<= cnt 32) (= cnt 33) (<= cnt 33) (= cnt 34) (<= cnt 34) (= cnt 35) (<= cnt 35) (= cnt 36) (<= cnt 36) (= cnt 37) (<= cnt 37) (= cnt 38) (<= cnt 38) (= cnt 39) (<= cnt 39) (= cnt 40) (<= cnt 40) (= cnt 41) (<= cnt 41) (= cnt 42) (<= cnt 42) (= cnt 43) (<= cnt 43) (= cnt 44) (<= cnt 44) (= cnt 45) (<= cnt 45) (= cnt 46) (<= cnt 46) (= cnt 47) (<= cnt 47) (= cnt 48) (<= cnt 48) (= cnt 49) (<= cnt 50) (not env_room)) (>= cnt 1)) [ cnt := (- cnt 1)] goto 1;if (and (or (= cnt 6) (<= cnt 6) (= cnt 7) (<= cnt 7) (= cnt 8) (<= cnt 8) (= cnt 9) (<= cnt 9) (= cnt 10) (<= cnt 10) (= cnt 11) (<= cnt 11) (= cnt 12) (<= cnt 12) (= cnt 13) (<= cnt 13) (= cnt 14) (<= cnt 14) (= cnt 15) (<= cnt 15) (= cnt 16) (<= cnt 16) (= cnt 17) (<= cnt 17) (= cnt 18) (<= cnt 18) (= cnt 19) (<= cnt 19) (= cnt 20) (= cnt 1) (<= cnt 20) (= cnt 21) (<= cnt 1) (<= cnt 21) (= cnt 22) (= cnt 2) (<= cnt 22) (= cnt 23) (<= cnt 23) (= cnt 24) (<= cnt 2) (<= cnt 24) (= cnt 25) (<= cnt 25) (= cnt 26) (= cnt 3) (<= cnt 26) (= cnt 27) (<= cnt 27) (= cnt 28) (<= cnt 28) (= cnt 29) (<= cnt 29) (= cnt 30) (<= cnt 30) (= cnt 31) (<= cnt 31) (= cnt 32) (<= cnt 32) (= cnt 33) (<= cnt 33) (= cnt 34) (<= cnt 34) (= cnt 35) (<= cnt 35) (= cnt 36) (<= cnt 36) (= cnt 37) (<= cnt 37) (= cnt 38) (<= cnt 38) (= cnt 39) (<= cnt 39) (= cnt 40) env_room con_room (<= cnt 40) (= cnt 41) (<= cnt 41) (= cnt 42) (= cnt 0) (<= cnt 42) (= cnt 43) (<= cnt 43) (= cnt 44) (<= cnt 0) (<= cnt 44) (= cnt 45) (<= cnt 45) (= cnt 46) (<= cnt 3) (<= cnt 46) (= cnt 47) (<= cnt 47) (= cnt 48) (= cnt 4) (<= cnt 48) (= cnt 49) (<= cnt 50)) (or con_room (<= cnt 0) (not env_room)) (or env_room (= cnt 0) (<= cnt 0) (not con_room)) (or (<= cnt 5) (= cnt 6) (<= cnt 6) (= cnt 7) (<= cnt 7) (= cnt 8) (<= cnt 8) (= cnt 9) (<= cnt 9) (= cnt 10) (<= cnt 10) (= cnt 11) (<= cnt 11) (= cnt 12) (<= cnt 12) (= cnt 13) (<= cnt 13) (= cnt 14) (<= cnt 14) (= cnt 15) (<= cnt 15) (= cnt 16) (<= cnt 16) (= cnt 17) (<= cnt 17) (= cnt 18) (<= cnt 18) (= cnt 19) (<= cnt 19) (= cnt 20) (= cnt 1) (<= cnt 20) (= cnt 21) (<= cnt 1) (<= cnt 21) (= cnt 22) (= cnt 2) (<= cnt 22) (= cnt 23) (<= cnt 23) (= cnt 24) (<= cnt 2) (<= cnt 24) (= cnt 25) (<= cnt 25) (= cnt 26) (= cnt 3) (<= cnt 26) (= cnt 27) (<= cnt 27) (= cnt 28) (<= cnt 28) (= cnt 29) (<= cnt 29) (= cnt 30) (<= cnt 30) (= cnt 31) (<= cnt 31) (= cnt 32) (<= cnt 32) (= cnt 33) (<= cnt 33) (= cnt 34) (<= cnt 34) (= cnt 35) (<= cnt 35) (= cnt 36) (<= cnt 36) (= cnt 37) (<= cnt 37) (= cnt 38) (<= cnt 38) (= cnt 39) (<= cnt 39) (= cnt 40) (<= cnt 40) (= cnt 41) (<= cnt 41) (= cnt 42) (= cnt 0) (<= cnt 42) (= cnt 43) (<= cnt 43) (= cnt 44) (<= cnt 0) (<= cnt 44) (= cnt 45) (<= cnt 45) (= cnt 46) (<= cnt 3) (<= cnt 46) (= cnt 47) (<= cnt 47) (= cnt 48) (= cnt 4) (<= cnt 48) (= cnt 49) (<= cnt 50) (= cnt 5) (not env_room) (not con_room) (<= cnt 4)) (>= cnt 0)) [] goto 1;if (and (or (= cnt 0) (<= cnt 1) (= cnt 2) (<= cnt 2) (= cnt 3) (<= cnt 3) (= cnt 4) (<= cnt 4) (= cnt 5) (<= cnt 5) (= cnt 6) (<= cnt 6) (= cnt 7) (<= cnt 7) (= cnt 8) (<= cnt 8) (= cnt 9) (<= cnt 9) (= cnt 10) (<= cnt 10) (= cnt 11) (<= cnt 11) (= cnt 12) (<= cnt 12) (= cnt 13) (<= cnt 13) (= cnt 14) (<= cnt 14) (= cnt 15) (<= cnt 15) (= cnt 16) (<= cnt 16) (= cnt 17) (<= cnt 17) (= cnt 18) (<= cnt 18) (= cnt 19) (<= cnt 19) (= cnt 20) (<= cnt 20) (= cnt 21) (<= cnt 21) (= cnt 22) (<= cnt 22) (= cnt 23) (<= cnt 23) (= cnt 24) (<= cnt 24) (= cnt 25) (<= cnt 25) (= cnt 26) (<= cnt 26) (= cnt 27) (<= cnt 27) (= cnt 28) (<= cnt 28) (= cnt 29) (<= cnt 29) (= cnt 30) (<= cnt 30) (= cnt 31) (<= cnt 31) (= cnt 32) (<= cnt 32) (= cnt 33) (<= cnt 33) (= cnt 34) (<= cnt 34) (= cnt 35) (<= cnt 35) (= cnt 36) (<= cnt 36) (= cnt 37) (<= cnt 37) (= cnt 38) (<= cnt 38) (= cnt 39) (<= cnt 39) (= cnt 40) (<= cnt 40) (= cnt 41) (<= cnt 41) (= cnt 42) (<= cnt 42) (= cnt 43) (<= cnt 43) (= cnt 44) (<= cnt 44) (= cnt 45) (<= cnt 45) (= cnt 46) (<= cnt 46) (= cnt 47) (<= cnt 47) (= cnt 48) (<= cnt 48) (= cnt 49) (not env_room) (<= cnt 50)) (or (not (<= cnt 0)) (= cnt 1)) (or (= cnt 1) (= cnt 0) (<= cnt 1) (= cnt 2) (<= cnt 2) (= cnt 3) (<= cnt 3) (= cnt 4) (<= cnt 4) (= cnt 5) (<= cnt 5) (= cnt 6) (<= cnt 6) (= cnt 7) (<= cnt 7) (= cnt 8) (<= cnt 8) (= cnt 9) (<= cnt 9) (= cnt 10) (<= cnt 10) (= cnt 11) (<= cnt 11) (= cnt 12) (<= cnt 12) (= cnt 13) (<= cnt 13) (= cnt 14) (<= cnt 14) (= cnt 15) (<= cnt 15) (= cnt 16) (<= cnt 16) (= cnt 17) (<= cnt 17) (= cnt 18) (<= cnt 18) (= cnt 19) (<= cnt 19) (= cnt 20) (<= cnt 20) (= cnt 21) (<= cnt 21) (= cnt 22) (<= cnt 22) (= cnt 23) (<= cnt 23) (= cnt 24) (<= cnt 24) (= cnt 25) (<= cnt 25) (= cnt 26) (<= cnt 26) (= cnt 27) (<= cnt 27) (= cnt 28) (<= cnt 28) (= cnt 29) (<= cnt 29) (= cnt 30) (<= cnt 30) (= cnt 31) (<= cnt 31) (= cnt 32) (<= cnt 32) (= cnt 33) (<= cnt 33) (= cnt 34) (<= cnt 34) (= cnt 35) (<= cnt 35) (= cnt 36) (<= cnt 36) (= cnt 37) (<= cnt 37) (= cnt 38) (<= cnt 38) (= cnt 39) (<= cnt 39) (= cnt 40) (<= cnt 40) (= cnt 41) (<= cnt 41) (= cnt 42) (<= cnt 42) (= cnt 43) (<= cnt 43) (= cnt 44) (<= cnt 44) (= cnt 45) (<= cnt 45) (= cnt 46) (<= cnt 46) (= cnt 47) (<= cnt 47) (= cnt 48) (<= cnt 48) (= cnt 49) env_room (<= cnt 50) (<= cnt 0)) (or (not env_room) (not con_room)) (or env_room con_room)) [] goto 2;otherwise abort() };
2: read  finished con_room env_room cnt; case {if (and (or (<= cnt 6) (= cnt 6) (<= cnt 21) (= cnt 22) (<= cnt 22) (= cnt 23) (<= cnt 8) (= cnt 8) (<= cnt 7) (<= cnt 23) (= cnt 24) (<= cnt 24) (= cnt 25) (<= cnt 25) (= cnt 26) (<= cnt 26) (= cnt 27) (= cnt 10) (<= cnt 9) (= cnt 9) (<= cnt 27) (= cnt 28) (<= cnt 28) (= cnt 29) (<= cnt 11) (= cnt 11) (<= cnt 10) (<= cnt 29) (= cnt 30) (<= cnt 30) (= cnt 31) (= cnt 13) (<= cnt 12) (= cnt 12) (<= cnt 14) (= cnt 14) (<= cnt 13) (<= cnt 31) (= cnt 32) (<= cnt 32) (= cnt 33) (= cnt 1) (<= cnt 0) (= cnt 15) (<= cnt 33) (= cnt 34) (<= cnt 34) (= cnt 35) (<= cnt 35) (= cnt 36) (<= cnt 36) (= cnt 37) (= cnt 2) (<= cnt 2) (= cnt 0) (= cnt 16) (<= cnt 15) (<= cnt 1) (<= cnt 37) (= cnt 38) (<= cnt 38) (= cnt 39) (<= cnt 39) (= cnt 40) (<= cnt 40) (= cnt 41) (= cnt 3) (= cnt 17) (<= cnt 16) (<= cnt 17) (<= cnt 3) (= cnt 4) (<= cnt 41) (= cnt 42) (<= cnt 42) (= cnt 43) (= cnt 19) (<= cnt 18) (= cnt 18) (<= cnt 43) (= cnt 44) (<= cnt 44) (= cnt 45) (<= cnt 4) (= cnt 5) (<= cnt 5) env_room (<= cnt 45) (= cnt 46) (<= cnt 46) (= cnt 47) (<= cnt 47) (= cnt 48) (<= cnt 48) (= cnt 49) (= cnt 20) (<= cnt 19)) (or (= cnt 7) (<= cnt 6) (= cnt 6) (<= cnt 21) (= cnt 22) (<= cnt 22) (= cnt 23) (<= cnt 8) (= cnt 8) (<= cnt 7) (<= cnt 23) (= cnt 24) (<= cnt 24) (= cnt 25) (<= cnt 25) (= cnt 26) (<= cnt 26) (= cnt 27) (= cnt 10) (<= cnt 9) (= cnt 9) (<= cnt 27) (= cnt 28) (<= cnt 28) (= cnt 29) (<= cnt 11) (= cnt 11) (<= cnt 10) (<= cnt 29) (= cnt 30) (<= cnt 30) (= cnt 31) (= cnt 13) (<= cnt 12) (= cnt 12) (<= cnt 14) (= cnt 14) (<= cnt 13) (<= cnt 31) (= cnt 32) (<= cnt 32) (= cnt 33) (= cnt 1) (<= cnt 0) (= cnt 15) (<= cnt 33) (= cnt 34) (<= cnt 34) (= cnt 35) (<= cnt 35) (= cnt 36) (<= cnt 36) (= cnt 37) (= cnt 2) (<= cnt 2) (= cnt 0) (= cnt 16) (<= cnt 15) (<= cnt 1) (<= cnt 37) (= cnt 38) (<= cnt 38) (= cnt 39) (<= cnt 39) (= cnt 40) (<= cnt 40) (= cnt 41) (= cnt 3) (= cnt 17) (<= cnt 16) (<= cnt 17) (<= cnt 3) (= cnt 4) (<= cnt 41) (= cnt 42) (<= cnt 42) (= cnt 43) (= cnt 19) (<= cnt 18) (= cnt 18) (<= cnt 43) (= cnt 44) (<= cnt 44) (= cnt 45) (<= cnt 4) (= cnt 5) (<= cnt 5) (<= cnt 45) (= cnt 46) (<= cnt 46) (= cnt 47) (<= cnt 47) (= cnt 48) (<= cnt 48) (= cnt 49) (= cnt 20) (<= cnt 19) (= cnt 21) (<= cnt 20) (not env_room) (<= cnt 50)) (>= cnt 0)) [ con_room := true] goto 1;if (and (or (<= cnt 9) (<= cnt 2) (<= cnt 21) (= cnt 22) (<= cnt 22) (= cnt 23) (= cnt 5) (= cnt 11) (<= cnt 10) (<= cnt 23) (= cnt 24) (<= cnt 24) (= cnt 25) (<= cnt 25) (= cnt 26) (<= cnt 26) (= cnt 27) (<= cnt 5) (= cnt 4) (<= cnt 4) (<= cnt 27) (= cnt 28) (<= cnt 28) (= cnt 29) (<= cnt 11) (= cnt 1) (= cnt 0) (= cnt 13) (<= cnt 12) (= cnt 12) (<= cnt 29) (= cnt 30) (<= cnt 30) (= cnt 31) (<= cnt 31) (= cnt 32) (<= cnt 32) (= cnt 33) (= cnt 6) (<= cnt 6) (= cnt 7) (<= cnt 33) (= cnt 34) (<= cnt 34) (= cnt 35) (<= cnt 14) (= cnt 14) (<= cnt 13) (<= cnt 35) (= cnt 36) (<= cnt 36) (= cnt 37) (<= cnt 1) (<= cnt 0) (= cnt 15) (<= cnt 37) (= cnt 38) (<= cnt 38) (= cnt 39) (= cnt 16) (<= cnt 15) (= cnt 2) env_room (<= cnt 17) (= cnt 17) (<= cnt 16) (<= cnt 39) (= cnt 40) (<= cnt 40) (= cnt 41) (<= cnt 41) (= cnt 42) (<= cnt 42) (= cnt 43) (= cnt 19) (<= cnt 18) (= cnt 18) (<= cnt 43) (= cnt 44) (<= cnt 44) (= cnt 45) (<= cnt 7) (= cnt 8) (<= cnt 8) (<= cnt 45) (= cnt 46) (<= cnt 46) (= cnt 47) (<= cnt 20) (= cnt 20) (<= cnt 19) (<= cnt 47) (= cnt 48) (<= cnt 48) (= cnt 49) (= cnt 3) (= cnt 21) (<= cnt 50)) (or (= cnt 10) (<= cnt 9) (<= cnt 2) (<= cnt 21) (= cnt 22) (<= cnt 22) (= cnt 23) (= cnt 5) (= cnt 11) (<= cnt 10) (<= cnt 23) (= cnt 24) (<= cnt 24) (= cnt 25) (<= cnt 25) (= cnt 26) (<= cnt 26) (= cnt 27) (<= cnt 5) (= cnt 4) (<= cnt 4) (<= cnt 27) (= cnt 28) (<= cnt 28) (= cnt 29) (<= cnt 11) (= cnt 1) (= cnt 0) (= cnt 13) (<= cnt 12) (= cnt 12) (<= cnt 29) (= cnt 30) (<= cnt 30) (= cnt 31) (<= cnt 31) (= cnt 32) (<= cnt 32) (= cnt 33) (= cnt 6) (<= cnt 6) (= cnt 7) (<= cnt 33) (= cnt 34) (<= cnt 34) (= cnt 35) (<= cnt 14) (= cnt 14) (<= cnt 13) (<= cnt 35) (= cnt 36) (<= cnt 36) (= cnt 37) (<= cnt 1) (<= cnt 0) (= cnt 15) (<= cnt 37) (= cnt 38) (<= cnt 38) (= cnt 39) (= cnt 16) (<= cnt 15) (= cnt 2) (<= cnt 17) (= cnt 17) (<= cnt 16) (<= cnt 39) (= cnt 40) (<= cnt 40) (= cnt 41) (<= cnt 41) (= cnt 42) (<= cnt 42) (= cnt 43) (= cnt 19) (<= cnt 18) (= cnt 18) (<= cnt 43) (= cnt 44) (<= cnt 44) (= cnt 45) (<= cnt 7) (= cnt 8) (<= cnt 8) (<= cnt 45) (= cnt 46) (<= cnt 46) (= cnt 47) (<= cnt 20) (= cnt 20) (<= cnt 19) (<= cnt 47) (= cnt 48) (<= cnt 48) (= cnt 49) (= cnt 3) (= cnt 21) (= cnt 9) (<= cnt 3) (not env_room)) (>= cnt 0)) [ con_room := false] goto 1;otherwise abort() };
3: abort();
Sucessfull Accelerations: 0

Benchmark: /home/luca/git/sweap/scripts/../examples/benchmarks/rpgsolve/finite/arbiter-5.rpg
Runtime: 3651ms
Result: Realizable
read finished con_room env_room cnt;
goto 0;
0: read  finished con_room env_room cnt; case {if (or (not (<= 0 no_of_tasks)) (not (<= no_of_tasks 5))) [] goto 0;if (and (>= no_of_tasks 0) (<= no_of_tasks 5)) [ cnt := no_of_tasks env_room := roomAorB] goto 1;otherwise abort() };
1: read  finished con_room env_room cnt; case {if (= cnt 0) [ finished := true] goto 0;if (and (or (not env_room) (<= cnt 0) con_room) (or (<= cnt 1) (= cnt 2) (<= cnt 2) (= cnt 3) env_room (= cnt 1) (<= cnt 3) (= cnt 4) (<= cnt 5) (<= cnt 0) con_room) (or env_room (not con_room) (<= cnt 0)) (or (not (<= cnt 0)) (>= cnt 1)) (or (<= cnt 1) (= cnt 2) (<= cnt 2) (= cnt 3) (not env_room) (= cnt 1) (<= cnt 3) (= cnt 4) (<= cnt 5) (<= cnt 0))) [ cnt := (- cnt 1)] goto 1;if (and (or (<= cnt 0) env_room (not con_room)) (or (= cnt 0) con_room (<= cnt 0) (not env_room)) (or (= cnt 0) (<= cnt 0) (not env_room) (not con_room) (= cnt 1) (<= cnt 1) (= cnt 2) (<= cnt 2) (= cnt 3) (<= cnt 3) (= cnt 4) (<= cnt 5)) (or (= cnt 0) con_room (<= cnt 0) env_room (= cnt 1) (<= cnt 1) (= cnt 2) (<= cnt 2) (= cnt 3) (<= cnt 3) (= cnt 4) (<= cnt 5)) (>= cnt 0)) [] goto 1;if (and (or (= cnt 1) (= cnt 0) (<= cnt 1) (= cnt 2) (<= cnt 2) (= cnt 3) env_room (<= cnt 5)) (or (not (<= cnt 0)) (= cnt 1)) (or (<= cnt 0) (= cnt 1) (= cnt 0) (<= cnt 1) (= cnt 2) (<= cnt 2) (= cnt 3) (<= cnt 5) (not env_room)) (or env_room con_room) (or (not env_room) (not con_room))) [] goto 2;otherwise abort() };
2: read  finished con_room env_room cnt; case {if (and (or env_room (= cnt 0) (= cnt 1) (<= cnt 0) (<= cnt 1) (= cnt 2) (<= cnt 2) (= cnt 3)) (or (= cnt 0) (= cnt 1) (<= cnt 0) (<= cnt 1) (= cnt 2) (<= cnt 2) (= cnt 3) (not env_room) (<= cnt 5)) (>= cnt 0)) [ con_room := true] goto 1;if (and (or (= cnt 1) (<= cnt 0) (<= cnt 1) (= cnt 2) (<= cnt 2) (= cnt 3) (<= cnt 5)) (or (= cnt 0) (= cnt 1) (<= cnt 0) (<= cnt 1) (= cnt 2) (<= cnt 2) (= cnt 3) (not env_room)) (>= cnt 0)) [ con_room := false] goto 1;otherwise abort() };
3: abort();
Sucessfull Accelerations: 0

Benchmark: /home/luca/git/sweap/scripts/../examples/benchmarks/rpgsolve/finite/arbiter-unreal-10.rpg
Runtime: 3883ms
Result: Unrealizable
Sucessfull Accelerations: 0

Benchmark: /home/luca/git/sweap/scripts/../examples/benchmarks/rpgsolve/finite/arbiter-unreal-50.rpg
Runtime: 20811ms
Result: Unrealizable
Sucessfull Accelerations: 0

Benchmark: /home/luca/git/sweap/scripts/../examples/benchmarks/rpgsolve/finite/arbiter-unreal-5.rpg
Runtime: 2798ms
Result: Unrealizable
Sucessfull Accelerations: 0

Benchmark: /home/luca/git/sweap/scripts/../examples/benchmarks/rpgsolve/finite/bloem-elevator-signal-10.rpg
Runtime: 10984ms
Result: Realizable
read floor target;
goto 0;
0: read  floor target; case {if true [ floor := 1 target := 1] goto 2;otherwise abort() };
1: if (and (>= floor 0) (<= floor 10)) {read  floor target; case {if (and (or (not (<= floor (- 1))) (not (<= floor 9))) (or (not (<= 1 signal)) (not (<= signal 10))) (<= floor 10)) [] goto 1;if (and (or (= signal floor) (<= floor 10)) (or (= signal floor) (<= 0 floor)) (>= signal 1) (<= signal 10)) [ target := signal] goto 2;otherwise abort() };} else {abort();}
2: read  floor target; case {if (and (= target floor) (or (not (<= floor 9)) (not (<= floor (- 1)))) (<= floor 10)) [] goto 1;if (and (or (= target (+ 1 floor)) (<= floor 8) (<= floor 9)) (or (not (= target floor)) (= target (+ 1 floor))) (or (= target (+ 3 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (= target (+ 6 floor)) (= target (+ 7 floor)) (= target floor) (<= floor 0) (= target (+ 8 floor)) (= target (+ 9 floor)) (= target (+ 1 floor)) (<= floor 3) (<= floor 2) (<= floor 4) (<= floor 1) (<= floor 6) (= target (+ 2 floor)) (<= floor 5) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor)) (= target (+ (- 8) floor))) (or (= target (+ 3 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (= target (+ 6 floor)) (= target (+ 7 floor)) (= target floor) (= target (+ 8 floor)) (= target (+ 9 floor)) (= target (+ 1 floor)) (= target (+ 2 floor)) (= target (+ 10 floor)) (not (<= floor 13)) (not (<= floor 3)) (not (<= floor 12)) (not (<= floor 2)) (not (<= floor 14)) (not (<= floor 4)) (not (<= floor 11)) (not (<= floor 1)) (not (<= floor 15)) (not (<= floor 5)) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (not (= target (+ (- 6) floor)))) (or (= target (+ 3 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (= target (+ 6 floor)) (= target (+ 7 floor)) (= target floor) (= target (+ 8 floor)) (= target (+ 9 floor)) (= target (+ 1 floor)) (= target (+ 2 floor)) (= target (+ 10 floor)) (not (<= floor 12)) (not (<= floor 2)) (not (<= floor 11)) (not (<= floor 1)) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (not (= target (+ (- 3) floor)))) (or (= target (+ 3 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (= target (+ 6 floor)) (= target (+ 7 floor)) (= target floor) (= target (+ 8 floor)) (= target (+ 9 floor)) (= target (+ 1 floor)) (not (<= floor 16)) (not (<= floor 6)) (= target (+ 2 floor)) (= target (+ 10 floor)) (not (<= floor 13)) (not (<= floor 3)) (not (<= floor 12)) (not (<= floor 2)) (not (<= floor 14)) (not (<= floor 4)) (not (<= floor 11)) (not (<= floor 1)) (not (<= floor 15)) (not (<= floor 5)) (not (<= floor 17)) (not (<= floor 7)) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor))) (or (= target (+ 3 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (= target (+ 6 floor)) (= target (+ 7 floor)) (= target floor) (= target (+ 8 floor)) (= target (+ 9 floor)) (= target (+ 1 floor)) (= target (+ 2 floor)) (not (<= floor 10)) (not (<= floor 0)) (= target (+ 10 floor)) (not (= target (+ (- 1) floor)))) (or (= target (+ 3 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (= target (+ 6 floor)) (= target (+ 7 floor)) (= target floor) (= target (+ 8 floor)) (= target (+ 9 floor)) (= target (+ 1 floor)) (= target (+ 2 floor)) (= target (+ 10 floor)) (not (<= floor 13)) (not (<= floor 3)) (not (<= floor 12)) (not (<= floor 2)) (not (<= floor 11)) (not (<= floor 1)) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (not (= target (+ (- 4) floor)))) (or (= target (+ 3 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (= target (+ 6 floor)) (= target (+ 7 floor)) (= target floor) (= target (+ 8 floor)) (= target (+ 9 floor)) (= target (+ 1 floor)) (= target (+ 2 floor)) (= target (+ 10 floor)) (not (<= floor 13)) (not (<= floor 3)) (not (<= floor 12)) (not (<= floor 2)) (not (<= floor 14)) (not (<= floor 4)) (not (<= floor 11)) (not (<= floor 1)) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor)) (not (= target (+ (- 5) floor)))) (or (= target (+ 3 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (= target (+ 6 floor)) (= target (+ 7 floor)) (= target floor) (<= floor 0) (= target (+ 8 floor)) (= target (+ 9 floor)) (= target (+ 1 floor)) (<= floor 1) (= target (+ 2 floor)) (not (<= floor 13)) (not (<= floor 3)) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (not (= target (+ (- 4) floor)))) (or (= target (+ 3 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (= target (+ 6 floor)) (= target (+ 7 floor)) (= target floor) (= target (+ 8 floor)) (= target (+ 1 floor)) (<= floor 1) (not (<= floor 16)) (not (<= floor 6)) (= target (+ 2 floor)) (not (<= floor 13)) (not (<= floor 3)) (not (<= floor 14)) (not (<= floor 4)) (not (<= floor 15)) (not (<= floor 5)) (not (<= floor 17)) (not (<= floor 7)) (not (= target (+ 9 floor))) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor))) (or (= target (+ 3 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (= target (+ 6 floor)) (= target (+ 7 floor)) (= target floor) (<= floor 0) (= target (+ 8 floor)) (= target (+ 9 floor)) (= target (+ 1 floor)) (<= floor 1) (not (<= floor 16)) (not (<= floor 6)) (= target (+ 2 floor)) (not (<= floor 13)) (not (<= floor 3)) (not (<= floor 12)) (not (<= floor 2)) (not (<= floor 14)) (not (<= floor 4)) (not (<= floor 15)) (not (<= floor 5)) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (not (= target (+ (- 7) floor)))) (or (= target (+ 3 floor)) (= target floor) (= target (+ 1 floor)) (<= floor 6) (= target (+ 2 floor)) (not (= target (+ 4 floor))) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor)) (= target (+ (- 8) floor))) (or (= target (+ 3 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (= target (+ 6 floor)) (= target (+ 7 floor)) (= target floor) (= target (+ 8 floor)) (= target (+ 1 floor)) (<= floor 3) (<= floor 2) (<= floor 4) (<= floor 1) (<= floor 6) (= target (+ 2 floor)) (<= floor 5) (not (= target (+ 9 floor))) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor)) (= target (+ (- 8) floor))) (or (= target (+ 3 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (= target (+ 6 floor)) (= target (+ 7 floor)) (= target floor) (<= floor 0) (= target (+ 8 floor)) (= target (+ 9 floor)) (= target (+ 1 floor)) (= target (+ 2 floor)) (not (<= floor 12)) (not (<= floor 2)) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (not (= target (+ (- 3) floor)))) (or (not (= target (+ 1 floor))) (<= floor 9)) (or (= target (+ 3 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (= target (+ 6 floor)) (= target (+ 7 floor)) (= target floor) (<= floor 0) (= target (+ 8 floor)) (= target (+ 9 floor)) (= target (+ 1 floor)) (<= floor 2) (<= floor 1) (= target (+ 2 floor)) (not (<= floor 14)) (not (<= floor 4)) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor)) (not (= target (+ (- 5) floor)))) (or (= target (+ 3 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (= target (+ 6 floor)) (= target (+ 7 floor)) (= target floor) (= target (+ 1 floor)) (<= floor 3) (<= floor 2) (<= floor 4) (= target (+ 2 floor)) (<= floor 5) (not (<= floor 17)) (not (<= floor 7)) (not (= target (+ 8 floor))) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor))) (or (= target (+ 3 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (= target (+ 6 floor)) (= target floor) (= target (+ 1 floor)) (<= floor 3) (<= floor 4) (= target (+ 2 floor)) (<= floor 5) (not (<= floor 17)) (not (<= floor 7)) (not (= target (+ 7 floor))) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor))) (or (= target (+ 3 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (= target floor) (= target (+ 1 floor)) (<= floor 4) (<= floor 6) (= target (+ 2 floor)) (<= floor 5) (not (= target (+ 6 floor))) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor)) (= target (+ (- 8) floor))) (or (= target (+ 3 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (= target (+ 6 floor)) (= target (+ 7 floor)) (= target floor) (<= floor 0) (= target (+ 8 floor)) (= target (+ 9 floor)) (= target (+ 1 floor)) (<= floor 3) (<= floor 2) (<= floor 1) (not (<= floor 16)) (not (<= floor 6)) (= target (+ 2 floor)) (not (<= floor 14)) (not (<= floor 4)) (not (<= floor 15)) (not (<= floor 5)) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (not (= target (+ (- 7) floor)))) (or (= target (+ 3 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (= target (+ 6 floor)) (= target (+ 7 floor)) (= target floor) (<= floor 0) (= target (+ 8 floor)) (= target (+ 9 floor)) (= target (+ 1 floor)) (<= floor 3) (<= floor 2) (<= floor 1) (= target (+ 2 floor)) (not (<= floor 15)) (not (<= floor 5)) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (not (= target (+ (- 6) floor)))) (or (= target (+ 3 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (= target (+ 6 floor)) (= target (+ 7 floor)) (= target floor) (<= floor 0) (= target (+ 8 floor)) (= target (+ 9 floor)) (= target (+ 1 floor)) (= target (+ 2 floor)) (not (<= floor 13)) (not (<= floor 3)) (not (<= floor 12)) (not (<= floor 2)) (not (<= floor 14)) (not (<= floor 4)) (not (<= floor 15)) (not (<= floor 5)) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (not (= target (+ (- 6) floor)))) (or (= target (+ 3 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (= target (+ 6 floor)) (= target (+ 7 floor)) (= target floor) (<= floor 0) (= target (+ 8 floor)) (= target (+ 9 floor)) (= target (+ 1 floor)) (<= floor 3) (<= floor 2) (<= floor 4) (<= floor 1) (= target (+ 2 floor)) (<= floor 5) (not (<= floor 17)) (not (<= floor 7)) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor))) (or (= target (+ 3 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (= target (+ 6 floor)) (= target floor) (= target (+ 1 floor)) (<= floor 3) (<= floor 4) (<= floor 6) (= target (+ 2 floor)) (<= floor 5) (not (= target (+ 7 floor))) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor)) (= target (+ (- 8) floor))) (or (= target (+ 3 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (= target floor) (= target (+ 1 floor)) (<= floor 4) (not (<= floor 16)) (not (<= floor 6)) (= target (+ 2 floor)) (not (<= floor 17)) (not (<= floor 7)) (not (= target (+ 6 floor))) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor))) (or (= target (+ 3 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (= target (+ 6 floor)) (= target (+ 7 floor)) (= target floor) (= target (+ 1 floor)) (<= floor 3) (<= floor 2) (<= floor 4) (<= floor 6) (= target (+ 2 floor)) (<= floor 5) (not (= target (+ 8 floor))) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor)) (= target (+ (- 8) floor))) (or (= target (+ 3 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (= target (+ 6 floor)) (= target (+ 7 floor)) (= target floor) (<= floor 0) (= target (+ 8 floor)) (= target (+ 9 floor)) (= target (+ 1 floor)) (<= floor 3) (<= floor 2) (<= floor 4) (<= floor 1) (not (<= floor 16)) (not (<= floor 6)) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (not (= target (+ (- 7) floor)))) (or (= target (+ 3 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (= target (+ 6 floor)) (= target (+ 7 floor)) (= target floor) (= target (+ 8 floor)) (= target (+ 1 floor)) (<= floor 3) (<= floor 2) (<= floor 4) (<= floor 1) (= target (+ 2 floor)) (<= floor 5) (not (<= floor 17)) (not (<= floor 7)) (not (= target (+ 9 floor))) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor))) (or (= target floor) (= target (+ 1 floor)) (= target (+ 2 floor)) (<= floor 7) (not (= target (+ 3 floor))) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor)) (= target (+ (- 8) floor))) (or (= target floor) (= target (+ 1 floor)) (<= floor 8) (not (= target (+ 2 floor))) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor)) (= target (+ (- 8) floor))) (or (= target (+ 3 floor)) (= target (+ 4 floor)) (= target floor) (= target (+ 1 floor)) (<= floor 6) (= target (+ 2 floor)) (<= floor 5) (not (= target (+ 5 floor))) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor)) (= target (+ (- 8) floor))) (or (= target (+ 3 floor)) (= target (+ 4 floor)) (= target floor) (= target (+ 1 floor)) (= target (+ 2 floor)) (<= floor 5) (not (<= floor 17)) (not (<= floor 7)) (not (= target (+ 5 floor))) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor))) (or (= target (+ 3 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (= target (+ 6 floor)) (= target (+ 7 floor)) (= target floor) (= target (+ 8 floor)) (= target (+ 1 floor)) (<= floor 3) (<= floor 2) (<= floor 4) (<= floor 1) (not (<= floor 16)) (not (<= floor 6)) (= target (+ 2 floor)) (not (<= floor 15)) (not (<= floor 5)) (not (<= floor 17)) (not (<= floor 7)) (not (= target (+ 9 floor))) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor))) (or (= target (+ 3 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (= target (+ 6 floor)) (= target (+ 7 floor)) (= target floor) (= target (+ 1 floor)) (<= floor 3) (<= floor 2) (<= floor 4) (not (<= floor 16)) (not (<= floor 6)) (= target (+ 2 floor)) (not (<= floor 15)) (not (<= floor 5)) (not (<= floor 17)) (not (<= floor 7)) (not (= target (+ 8 floor))) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor))) (or (= target (+ 3 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (= target (+ 6 floor)) (= target (+ 7 floor)) (= target floor) (<= floor 0) (= target (+ 8 floor)) (= target (+ 9 floor)) (= target (+ 1 floor)) (<= floor 3) (<= floor 2) (<= floor 4) (<= floor 1) (not (<= floor 16)) (not (<= floor 6)) (= target (+ 2 floor)) (not (<= floor 15)) (not (<= floor 5)) (not (<= floor 17)) (not (<= floor 7)) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor))) (or (= target (+ 3 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (= target (+ 6 floor)) (= target floor) (= target (+ 1 floor)) (<= floor 3) (not (<= floor 16)) (not (<= floor 6)) (= target (+ 2 floor)) (not (<= floor 15)) (not (<= floor 5)) (not (<= floor 17)) (not (<= floor 7)) (not (= target (+ 7 floor))) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor))) (or (= target (+ 3 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (= target (+ 6 floor)) (= target (+ 7 floor)) (= target floor) (<= floor 0) (= target (+ 8 floor)) (= target (+ 9 floor)) (= target (+ 1 floor)) (<= floor 3) (<= floor 2) (<= floor 1) (not (<= floor 16)) (not (<= floor 6)) (= target (+ 2 floor)) (not (<= floor 14)) (not (<= floor 4)) (not (<= floor 15)) (not (<= floor 5)) (not (<= floor 17)) (not (<= floor 7)) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor))) (or (= target (+ 3 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (= target (+ 6 floor)) (= target (+ 7 floor)) (= target floor) (= target (+ 8 floor)) (= target (+ 9 floor)) (= target (+ 1 floor)) (= target (+ 2 floor)) (= target (+ 10 floor)) (not (<= floor 11)) (not (<= floor 1)) (= target (+ (- 1) floor)) (not (= target (+ (- 2) floor)))) (or (= target (+ 3 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (= target (+ 6 floor)) (= target (+ 7 floor)) (= target floor) (<= floor 0) (= target (+ 8 floor)) (= target (+ 9 floor)) (= target (+ 1 floor)) (<= floor 2) (<= floor 1) (not (<= floor 16)) (not (<= floor 6)) (= target (+ 2 floor)) (not (<= floor 13)) (not (<= floor 3)) (not (<= floor 14)) (not (<= floor 4)) (not (<= floor 15)) (not (<= floor 5)) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (not (= target (+ (- 7) floor)))) (or (= target (+ 3 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (= target (+ 6 floor)) (= target (+ 7 floor)) (= target floor) (= target (+ 1 floor)) (<= floor 2) (not (<= floor 16)) (not (<= floor 6)) (= target (+ 2 floor)) (not (<= floor 14)) (not (<= floor 4)) (not (<= floor 15)) (not (<= floor 5)) (not (<= floor 17)) (not (<= floor 7)) (not (= target (+ 8 floor))) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor))) (or (= target (+ 3 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (= target (+ 6 floor)) (= target (+ 7 floor)) (= target floor) (<= floor 0) (= target (+ 8 floor)) (= target (+ 9 floor)) (= target (+ 1 floor)) (not (<= floor 16)) (not (<= floor 6)) (= target (+ 2 floor)) (not (<= floor 13)) (not (<= floor 3)) (not (<= floor 12)) (not (<= floor 2)) (not (<= floor 14)) (not (<= floor 4)) (not (<= floor 15)) (not (<= floor 5)) (not (<= floor 17)) (not (<= floor 7)) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor))) (or (= target (+ 3 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (= target (+ 6 floor)) (= target (+ 7 floor)) (= target floor) (= target (+ 8 floor)) (= target (+ 9 floor)) (= target (+ 1 floor)) (not (<= floor 16)) (not (<= floor 6)) (= target (+ 2 floor)) (= target (+ 10 floor)) (not (<= floor 13)) (not (<= floor 3)) (not (<= floor 12)) (not (<= floor 2)) (not (<= floor 14)) (not (<= floor 4)) (not (<= floor 11)) (not (<= floor 1)) (not (<= floor 15)) (not (<= floor 5)) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (not (= target (+ (- 7) floor)))) (or (= target (+ 3 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (= target (+ 6 floor)) (= target (+ 7 floor)) (= target floor) (<= floor 0) (= target (+ 8 floor)) (= target (+ 9 floor)) (= target (+ 1 floor)) (= target (+ 2 floor)) (not (<= floor 13)) (not (<= floor 3)) (not (<= floor 12)) (not (<= floor 2)) (not (<= floor 14)) (not (<= floor 4)) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor)) (not (= target (+ (- 5) floor)))) (or (= target (+ 3 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (= target (+ 6 floor)) (= target (+ 7 floor)) (= target floor) (<= floor 0) (= target (+ 8 floor)) (= target (+ 9 floor)) (= target (+ 1 floor)) (<= floor 2) (<= floor 1) (= target (+ 2 floor)) (not (<= floor 13)) (not (<= floor 3)) (not (<= floor 14)) (not (<= floor 4)) (not (<= floor 15)) (not (<= floor 5)) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (not (= target (+ (- 6) floor)))) (or (= target (+ 3 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (= target (+ 6 floor)) (= target (+ 7 floor)) (= target floor) (<= floor 0) (= target (+ 8 floor)) (= target (+ 9 floor)) (= target (+ 1 floor)) (<= floor 2) (<= floor 1) (not (<= floor 16)) (not (<= floor 6)) (= target (+ 2 floor)) (not (<= floor 13)) (not (<= floor 3)) (not (<= floor 14)) (not (<= floor 4)) (not (<= floor 15)) (not (<= floor 5)) (not (<= floor 17)) (not (<= floor 7)) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor))) (or (= target (+ 3 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (= target (+ 6 floor)) (= target (+ 7 floor)) (= target floor) (= target (+ 8 floor)) (= target (+ 1 floor)) (<= floor 3) (<= floor 2) (<= floor 1) (not (<= floor 16)) (not (<= floor 6)) (= target (+ 2 floor)) (not (<= floor 14)) (not (<= floor 4)) (not (<= floor 15)) (not (<= floor 5)) (not (<= floor 17)) (not (<= floor 7)) (not (= target (+ 9 floor))) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor))) (>= floor 0)) [ floor := (+ floor 1)] goto 2;if (and (or (= target floor) (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (not (<= floor 16)) (not (<= floor 6)) (= target (+ 6 floor)) (not (<= floor 15)) (not (<= floor 5)) (not (<= floor 14)) (not (<= floor 4)) (= target (+ 7 floor)) (not (<= floor 13)) (not (<= floor 3)) (= target (+ 8 floor)) (= target (+ (- 3) floor)) (= target (+ (- 2) floor)) (= target (+ (- 1) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (not (= target (+ (- 7) floor)))) (or (= target (+ 1 floor)) (= target floor) (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (not (<= floor 16)) (not (<= floor 6)) (not (<= floor 17)) (not (<= floor 7)) (= target (+ 6 floor)) (not (<= floor 18)) (not (<= floor 8)) (not (<= floor 9)) (not (<= floor 19)) (not (<= floor 15)) (not (<= floor 5)) (not (<= floor 14)) (not (<= floor 4)) (= target (+ 7 floor)) (not (<= floor 13)) (not (<= floor 3)) (= target (+ 8 floor)) (= target (+ (- 3) floor)) (= target (+ (- 2) floor)) (= target (+ (- 1) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor)) (= target (+ (- 8) floor)) (= target (+ (- 9) floor))) (or (= target (+ 1 floor)) (= target floor) (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (not (<= floor 16)) (not (<= floor 6)) (not (<= floor 17)) (not (<= floor 7)) (= target (+ 6 floor)) (not (<= floor 15)) (not (<= floor 5)) (not (<= floor 14)) (not (<= floor 4)) (= target (+ 7 floor)) (not (<= floor 13)) (not (<= floor 3)) (= target (+ 8 floor)) (= target (+ (- 3) floor)) (= target (+ (- 2) floor)) (= target (+ (- 1) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor)) (not (= target (+ (- 8) floor)))) (or (= target (+ 1 floor)) (= target floor) (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (not (<= floor 16)) (not (<= floor 6)) (not (<= floor 17)) (not (<= floor 7)) (= target (+ 6 floor)) (not (<= floor 18)) (not (<= floor 8)) (not (<= floor 15)) (not (<= floor 5)) (not (<= floor 14)) (not (<= floor 4)) (= target (+ 7 floor)) (not (<= floor 13)) (not (<= floor 3)) (= target (+ 8 floor)) (= target (+ (- 3) floor)) (= target (+ (- 2) floor)) (= target (+ (- 1) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor)) (= target (+ (- 8) floor)) (not (= target (+ (- 9) floor)))) (or (= target floor) (not (<= floor 11)) (not (<= floor 1)) (<= 1 floor) (= target (+ (- 1) floor))) (or (= target floor) (<= floor 9) (not (= target (+ 1 floor))) (= target (+ (- 3) floor)) (= target (+ (- 2) floor)) (= target (+ (- 1) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor)) (= target (+ (- 8) floor)) (= target (+ (- 9) floor)) (= target (+ (- 10) floor))) (or (= target (+ 1 floor)) (= target floor) (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (<= floor 6) (<= floor 7) (<= floor 4) (= target (+ 6 floor)) (<= floor 8) (<= floor 5) (= target (+ 7 floor)) (<= floor 2) (<= floor 3) (= target (+ (- 3) floor)) (= target (+ (- 2) floor)) (= target (+ (- 1) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor)) (= target (+ (- 8) floor)) (= target (+ (- 9) floor)) (= target (+ (- 10) floor))) (or (= target (+ 1 floor)) (= target floor) (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (not (<= floor 16)) (not (<= floor 6)) (not (<= floor 17)) (not (<= floor 7)) (<= floor 4) (= target (+ 6 floor)) (not (<= floor 18)) (not (<= floor 8)) (<= floor 5) (= target (+ 7 floor)) (<= floor 2) (<= floor 3) (= target (+ (- 3) floor)) (= target (+ (- 2) floor)) (= target (+ (- 1) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor)) (= target (+ (- 8) floor)) (not (= target (+ (- 9) floor)))) (or (= target (+ 1 floor)) (= target floor) (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (<= floor 6) (<= floor 7) (<= floor 4) (not (= target (+ 6 floor))) (<= floor 8) (<= floor 5) (= target (+ (- 3) floor)) (= target (+ (- 2) floor)) (= target (+ (- 1) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor)) (= target (+ (- 8) floor)) (= target (+ (- 9) floor)) (= target (+ (- 10) floor))) (or (= target (+ 1 floor)) (= target floor) (= target (+ 2 floor)) (= target (+ 3 floor)) (<= floor 6) (not (<= floor 18)) (not (<= floor 8)) (not (<= floor 9)) (not (<= floor 19)) (not (= target (+ 4 floor))) (= target (+ (- 3) floor)) (= target (+ (- 2) floor)) (= target (+ (- 1) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor)) (= target (+ (- 8) floor)) (= target (+ (- 9) floor))) (or (= target (+ 1 floor)) (= target floor) (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (not (<= floor 16)) (not (<= floor 6)) (not (<= floor 17)) (not (<= floor 7)) (<= floor 4) (= target (+ 6 floor)) (not (<= floor 18)) (not (<= floor 8)) (not (<= floor 9)) (not (<= floor 19)) (not (<= floor 15)) (not (<= floor 5)) (= target (+ 7 floor)) (<= floor 2) (<= floor 3) (= target (+ (- 3) floor)) (= target (+ (- 2) floor)) (= target (+ (- 1) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor)) (= target (+ (- 8) floor)) (= target (+ (- 9) floor))) (or (= target (+ 1 floor)) (= target floor) (= target (+ 2 floor)) (= target (+ 3 floor)) (<= floor 6) (<= floor 7) (<= floor 8) (not (= target (+ 4 floor))) (= target (+ (- 3) floor)) (= target (+ (- 2) floor)) (= target (+ (- 1) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor)) (= target (+ (- 8) floor)) (= target (+ (- 9) floor)) (= target (+ (- 10) floor))) (or (= target (+ 1 floor)) (= target floor) (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (not (<= floor 16)) (not (<= floor 6)) (not (<= floor 17)) (not (<= floor 7)) (<= floor 4) (not (= target (+ 6 floor))) (not (<= floor 18)) (not (<= floor 8)) (not (<= floor 9)) (not (<= floor 19)) (= target (+ (- 3) floor)) (= target (+ (- 2) floor)) (= target (+ (- 1) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor)) (= target (+ (- 8) floor)) (= target (+ (- 9) floor))) (or (= target (+ 1 floor)) (= target floor) (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (not (<= floor 17)) (not (<= floor 7)) (<= floor 4) (= target (+ 6 floor)) (<= floor 5) (= target (+ 7 floor)) (<= floor 2) (<= floor 3) (= target (+ (- 3) floor)) (= target (+ (- 2) floor)) (= target (+ (- 1) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor)) (not (= target (+ (- 8) floor)))) (or (= target (+ 1 floor)) (= target floor) (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (not (<= floor 16)) (not (<= floor 6)) (not (<= floor 17)) (not (<= floor 7)) (<= floor 4) (= target (+ 6 floor)) (not (<= floor 18)) (not (<= floor 8)) (not (<= floor 15)) (not (<= floor 5)) (= target (+ 7 floor)) (<= floor 2) (<= floor 3) (= target (+ (- 3) floor)) (= target (+ (- 2) floor)) (= target (+ (- 1) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor)) (= target (+ (- 8) floor)) (not (= target (+ (- 9) floor)))) (or (= target (+ 1 floor)) (= target floor) (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (not (<= floor 16)) (not (<= floor 6)) (not (<= floor 17)) (not (<= floor 7)) (<= floor 4) (= target (+ 6 floor)) (not (<= floor 18)) (not (<= floor 8)) (not (<= floor 9)) (not (<= floor 19)) (<= floor 5) (= target (+ 7 floor)) (<= floor 2) (<= floor 3) (= target (+ (- 3) floor)) (= target (+ (- 2) floor)) (= target (+ (- 1) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor)) (= target (+ (- 8) floor)) (= target (+ (- 9) floor))) (or (= target (+ 1 floor)) (= target floor) (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (<= floor 6) (<= floor 7) (<= floor 4) (= target (+ 6 floor)) (not (<= floor 9)) (not (<= floor 19)) (<= floor 5) (= target (+ 7 floor)) (<= floor 2) (<= floor 3) (= target (+ (- 3) floor)) (= target (+ (- 2) floor)) (= target (+ (- 1) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor)) (= target (+ (- 8) floor)) (= target (+ (- 9) floor))) (or (= target (+ 1 floor)) (= target floor) (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (not (<= floor 16)) (not (<= floor 6)) (not (<= floor 17)) (not (<= floor 7)) (= target (+ 6 floor)) (not (<= floor 18)) (not (<= floor 8)) (not (<= floor 9)) (not (<= floor 19)) (not (<= floor 15)) (not (<= floor 5)) (<= floor 3) (not (= target (+ 7 floor))) (= target (+ (- 3) floor)) (= target (+ (- 2) floor)) (= target (+ (- 1) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor)) (= target (+ (- 8) floor)) (= target (+ (- 9) floor))) (or (= target (+ 1 floor)) (= target floor) (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (not (<= floor 16)) (not (<= floor 6)) (not (<= floor 17)) (not (<= floor 7)) (= target (+ 6 floor)) (not (<= floor 15)) (not (<= floor 5)) (not (<= floor 14)) (not (<= floor 4)) (= target (+ 7 floor)) (<= floor 2) (<= floor 3) (= target (+ (- 3) floor)) (= target (+ (- 2) floor)) (= target (+ (- 1) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor)) (not (= target (+ (- 8) floor)))) (or (= target (+ 1 floor)) (= target floor) (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (<= floor 6) (not (<= floor 17)) (not (<= floor 7)) (<= floor 4) (not (= target (+ 6 floor))) (not (<= floor 18)) (not (<= floor 8)) (not (<= floor 9)) (not (<= floor 19)) (<= floor 5) (= target (+ (- 3) floor)) (= target (+ (- 2) floor)) (= target (+ (- 1) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor)) (= target (+ (- 8) floor)) (= target (+ (- 9) floor))) (or (= target (+ 1 floor)) (= target floor) (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (not (<= floor 16)) (not (<= floor 6)) (not (<= floor 17)) (not (<= floor 7)) (= target (+ 6 floor)) (not (<= floor 18)) (not (<= floor 8)) (not (<= floor 9)) (not (<= floor 19)) (not (<= floor 15)) (not (<= floor 5)) (not (<= floor 14)) (not (<= floor 4)) (= target (+ 7 floor)) (<= floor 2) (= target (+ (- 3) floor)) (= target (+ (- 2) floor)) (= target (+ (- 1) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor)) (= target (+ (- 8) floor)) (= target (+ (- 9) floor))) (or (= target (+ 1 floor)) (= target floor) (= target (+ 2 floor)) (<= floor 7) (not (<= floor 9)) (not (<= floor 19)) (not (= target (+ 3 floor))) (= target (+ (- 3) floor)) (= target (+ (- 2) floor)) (= target (+ (- 1) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor)) (= target (+ (- 8) floor)) (= target (+ (- 9) floor))) (or (= target (+ 1 floor)) (= target floor) (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (<= floor 6) (not (<= floor 17)) (not (<= floor 7)) (<= floor 4) (= target (+ 6 floor)) (not (<= floor 18)) (not (<= floor 8)) (not (<= floor 9)) (not (<= floor 19)) (<= floor 5) (= target (+ 7 floor)) (<= floor 2) (<= floor 3) (= target (+ (- 3) floor)) (= target (+ (- 2) floor)) (= target (+ (- 1) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor)) (= target (+ (- 8) floor)) (= target (+ (- 9) floor))) (or (= target (+ 1 floor)) (= target floor) (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (not (<= floor 16)) (not (<= floor 6)) (not (<= floor 17)) (not (<= floor 7)) (<= floor 4) (= target (+ 6 floor)) (not (<= floor 18)) (not (<= floor 8)) (not (<= floor 9)) (not (<= floor 19)) (<= floor 5) (<= floor 3) (not (= target (+ 7 floor))) (= target (+ (- 3) floor)) (= target (+ (- 2) floor)) (= target (+ (- 1) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor)) (= target (+ (- 8) floor)) (= target (+ (- 9) floor))) (or (= target (+ 1 floor)) (= target floor) (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (= target (+ 6 floor)) (not (<= floor 15)) (not (<= floor 5)) (not (<= floor 14)) (not (<= floor 4)) (= target (+ 7 floor)) (not (<= floor 13)) (not (<= floor 3)) (= target (+ 8 floor)) (= target (+ (- 3) floor)) (= target (+ (- 2) floor)) (= target (+ (- 1) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (not (= target (+ (- 6) floor)))) (or (= target (+ 1 floor)) (= target floor) (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (<= floor 6) (not (<= floor 17)) (not (<= floor 7)) (<= floor 4) (= target (+ 6 floor)) (not (<= floor 18)) (not (<= floor 8)) (not (<= floor 9)) (not (<= floor 19)) (<= floor 5) (<= floor 3) (not (= target (+ 7 floor))) (= target (+ (- 3) floor)) (= target (+ (- 2) floor)) (= target (+ (- 1) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor)) (= target (+ (- 8) floor)) (= target (+ (- 9) floor))) (or (= target (+ 1 floor)) (= target floor) (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (<= floor 6) (<= floor 7) (<= floor 4) (not (= target (+ 6 floor))) (not (<= floor 9)) (not (<= floor 19)) (<= floor 5) (= target (+ (- 3) floor)) (= target (+ (- 2) floor)) (= target (+ (- 1) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor)) (= target (+ (- 8) floor)) (= target (+ (- 9) floor))) (or (= target (+ 1 floor)) (= target floor) (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (<= floor 6) (<= floor 7) (<= floor 4) (= target (+ 6 floor)) (not (<= floor 18)) (not (<= floor 8)) (not (<= floor 9)) (not (<= floor 19)) (<= floor 5) (<= floor 3) (not (= target (+ 7 floor))) (= target (+ (- 3) floor)) (= target (+ (- 2) floor)) (= target (+ (- 1) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor)) (= target (+ (- 8) floor)) (= target (+ (- 9) floor))) (or (= target (+ 1 floor)) (not (= target floor)) (= target (+ (- 3) floor)) (= target (+ (- 2) floor)) (= target (+ (- 1) floor))) (or (= target (+ 1 floor)) (= target floor) (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (= target (+ 6 floor)) (not (<= floor 14)) (not (<= floor 4)) (= target (+ 7 floor)) (<= floor 2) (= target (+ (- 3) floor)) (= target (+ (- 2) floor)) (= target (+ (- 1) floor)) (= target (+ (- 4) floor)) (not (= target (+ (- 5) floor)))) (or (= target (+ 1 floor)) (= target floor) (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 4 floor)) (<= floor 6) (<= floor 7) (<= floor 8) (<= floor 5) (not (= target (+ 5 floor))) (= target (+ (- 3) floor)) (= target (+ (- 2) floor)) (= target (+ (- 1) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor)) (= target (+ (- 8) floor)) (= target (+ (- 9) floor)) (= target (+ (- 10) floor))) (or (= target (+ 1 floor)) (= target floor) (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (not (<= floor 16)) (not (<= floor 6)) (<= floor 4) (= target (+ 6 floor)) (= target (+ 7 floor)) (<= floor 2) (<= floor 3) (= target (+ (- 3) floor)) (= target (+ (- 2) floor)) (= target (+ (- 1) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (not (= target (+ (- 7) floor)))) (or (= target (+ 1 floor)) (= target floor) (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (= target (+ 6 floor)) (= target (+ 7 floor)) (= target (+ 8 floor)) (not (<= floor 12)) (not (<= floor 2)) (= target (+ (- 2) floor)) (= target (+ (- 1) floor)) (not (= target (+ (- 3) floor)))) (or (= target (+ 1 floor)) (= target floor) (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (not (<= floor 16)) (not (<= floor 6)) (not (<= floor 17)) (not (<= floor 7)) (= target (+ 6 floor)) (not (<= floor 18)) (not (<= floor 8)) (not (<= floor 15)) (not (<= floor 5)) (not (<= floor 14)) (not (<= floor 4)) (= target (+ 7 floor)) (<= floor 2) (<= floor 3) (= target (+ (- 3) floor)) (= target (+ (- 2) floor)) (= target (+ (- 1) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor)) (= target (+ (- 8) floor)) (not (= target (+ (- 9) floor)))) (or (= target (+ 1 floor)) (= target floor) (= target (+ 2 floor)) (<= floor 7) (<= floor 8) (not (= target (+ 3 floor))) (= target (+ (- 3) floor)) (= target (+ (- 2) floor)) (= target (+ (- 1) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor)) (= target (+ (- 8) floor)) (= target (+ (- 9) floor)) (= target (+ (- 10) floor))) (or (= target (+ 1 floor)) (= target floor) (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (<= floor 6) (<= floor 4) (= target (+ 6 floor)) (not (<= floor 18)) (not (<= floor 8)) (<= floor 5) (= target (+ 7 floor)) (<= floor 2) (<= floor 3) (= target (+ (- 3) floor)) (= target (+ (- 2) floor)) (= target (+ (- 1) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor)) (= target (+ (- 8) floor)) (not (= target (+ (- 9) floor)))) (or (<= 1 floor) (not (<= floor 0)) (not (= target (+ (- 1) floor)))) (or (= target (+ 1 floor)) (= target floor) (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (not (<= floor 16)) (not (<= floor 6)) (not (<= floor 17)) (not (<= floor 7)) (<= floor 4) (= target (+ 6 floor)) (not (<= floor 15)) (not (<= floor 5)) (= target (+ 7 floor)) (<= floor 2) (<= floor 3) (= target (+ (- 3) floor)) (= target (+ (- 2) floor)) (= target (+ (- 1) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor)) (not (= target (+ (- 8) floor)))) (or (= target (+ 1 floor)) (= target floor) (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (= target (+ 6 floor)) (= target (+ 7 floor)) (not (<= floor 13)) (not (<= floor 3)) (= target (+ 8 floor)) (= target (+ (- 3) floor)) (= target (+ (- 2) floor)) (= target (+ (- 1) floor)) (not (= target (+ (- 4) floor)))) (or (= target (+ 1 floor)) (= target floor) (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 4 floor)) (not (<= floor 17)) (not (<= floor 7)) (not (<= floor 18)) (not (<= floor 8)) (not (<= floor 9)) (not (<= floor 19)) (<= floor 5) (not (= target (+ 5 floor))) (= target (+ (- 3) floor)) (= target (+ (- 2) floor)) (= target (+ (- 1) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor)) (= target (+ (- 8) floor)) (= target (+ (- 9) floor))) (or (= target (+ 1 floor)) (= target floor) (<= floor 8) (not (= target (+ 2 floor))) (= target (+ (- 3) floor)) (= target (+ (- 2) floor)) (= target (+ (- 1) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor)) (= target (+ (- 8) floor)) (= target (+ (- 9) floor)) (= target (+ (- 10) floor))) (or (= target (+ 1 floor)) (= target floor) (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (= target (+ 6 floor)) (not (<= floor 14)) (not (<= floor 4)) (= target (+ 7 floor)) (not (<= floor 13)) (not (<= floor 3)) (= target (+ 8 floor)) (= target (+ (- 3) floor)) (= target (+ (- 2) floor)) (= target (+ (- 1) floor)) (= target (+ (- 4) floor)) (not (= target (+ (- 5) floor)))) (or (= target (+ 1 floor)) (= target floor) (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (= target (+ 6 floor)) (not (<= floor 15)) (not (<= floor 5)) (= target (+ 7 floor)) (<= floor 2) (<= floor 3) (= target (+ (- 3) floor)) (= target (+ (- 2) floor)) (= target (+ (- 1) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (not (= target (+ (- 6) floor)))) (or (= target (+ 1 floor)) (= target floor) (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (= target (+ 6 floor)) (= target (+ 7 floor)) (= target (+ 8 floor)) (not (<= floor 11)) (not (<= floor 1)) (= target (+ (- 1) floor)) (not (= target (+ (- 2) floor)))) (or (= target (+ 1 floor)) (= target floor) (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 4 floor)) (<= floor 6) (<= floor 7) (not (<= floor 9)) (not (<= floor 19)) (<= floor 5) (not (= target (+ 5 floor))) (= target (+ (- 3) floor)) (= target (+ (- 2) floor)) (= target (+ (- 1) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor)) (= target (+ (- 8) floor)) (= target (+ (- 9) floor))) (or (= target (+ 1 floor)) (= target floor) (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (<= floor 6) (<= floor 7) (<= floor 4) (= target (+ 6 floor)) (<= floor 8) (<= floor 5) (<= floor 3) (not (= target (+ 7 floor))) (= target (+ (- 3) floor)) (= target (+ (- 2) floor)) (= target (+ (- 1) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor)) (= target (+ (- 8) floor)) (= target (+ (- 9) floor)) (= target (+ (- 10) floor))) (or (= target (+ 1 floor)) (= target floor) (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (not (<= floor 16)) (not (<= floor 6)) (= target (+ 6 floor)) (not (<= floor 15)) (not (<= floor 5)) (not (<= floor 14)) (not (<= floor 4)) (= target (+ 7 floor)) (<= floor 2) (= target (+ (- 3) floor)) (= target (+ (- 2) floor)) (= target (+ (- 1) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (not (= target (+ (- 7) floor)))) (<= floor 10)) [ floor := (- floor 1)] goto 2;if (and (or (<= floor 9) (not (= target (+ 1 floor))) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor)) (= target (+ (- 8) floor)) (= target (+ (- 9) floor))) (or (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 1 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (= target (+ 6 floor)) (<= floor 3) (<= floor 4) (<= floor 5) (<= floor 6) (<= floor 7) (= target floor) (not (= target (+ 7 floor))) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor)) (= target (+ (- 8) floor)) (= target (+ (- 9) floor))) (or (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 1 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (= target (+ 6 floor)) (not (<= floor 13)) (not (<= floor 3)) (= target (+ 7 floor)) (not (<= floor 14)) (not (<= floor 4)) (not (<= floor 15)) (not (<= floor 5)) (not (<= floor 16)) (not (<= floor 6)) (= target (+ 8 floor)) (not (<= floor 17)) (not (<= floor 7)) (= target floor) (<= floor 1) (not (<= floor 18)) (not (<= floor 8)) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor)) (= target (+ (- 8) floor))) (or (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 1 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (= target (+ 6 floor)) (not (<= floor 13)) (not (<= floor 3)) (= target (+ 7 floor)) (not (<= floor 14)) (not (<= floor 4)) (not (<= floor 15)) (not (<= floor 5)) (= target (+ 8 floor)) (= target floor) (not (<= floor 12)) (not (<= floor 2)) (= target (+ 9 floor)) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (not (= target (+ (- 6) floor)))) (or (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 1 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (= target (+ 6 floor)) (<= floor 3) (<= floor 4) (<= floor 5) (not (<= floor 16)) (not (<= floor 6)) (not (<= floor 17)) (not (<= floor 7)) (= target floor) (not (<= floor 18)) (not (<= floor 8)) (not (= target (+ 7 floor))) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor)) (= target (+ (- 8) floor))) (or (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 1 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (= target (+ 6 floor)) (= target (+ 7 floor)) (not (<= floor 14)) (not (<= floor 4)) (not (<= floor 15)) (not (<= floor 5)) (not (<= floor 16)) (not (<= floor 6)) (not (<= floor 17)) (not (<= floor 7)) (= target floor) (not (<= floor 18)) (not (<= floor 8)) (<= floor 2) (not (= target (+ 8 floor))) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor)) (= target (+ (- 8) floor))) (or (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 1 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (= target (+ 6 floor)) (<= floor 3) (not (<= floor 15)) (not (<= floor 5)) (not (<= floor 16)) (not (<= floor 6)) (not (<= floor 17)) (not (<= floor 7)) (= target floor) (not (<= floor 18)) (not (<= floor 8)) (not (= target (+ 7 floor))) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor)) (= target (+ (- 8) floor))) (or (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 1 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (= target (+ 6 floor)) (= target (+ 7 floor)) (= target (+ 8 floor)) (= target floor) (= target (+ 9 floor)) (not (<= floor 11)) (not (<= floor 1)) (= target (+ (- 1) floor)) (not (= target (+ (- 2) floor)))) (or (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 1 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (= target (+ 6 floor)) (<= floor 3) (<= floor 4) (<= floor 5) (<= floor 6) (not (<= floor 17)) (not (<= floor 7)) (= target floor) (not (<= floor 18)) (not (<= floor 8)) (not (= target (+ 7 floor))) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor)) (= target (+ (- 8) floor))) (or (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 1 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (= target (+ 6 floor)) (= target (+ 7 floor)) (= target (+ 8 floor)) (= target floor) (= target (+ 9 floor)) (not (<= floor 0)) (not (= target (+ (- 1) floor)))) (or (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 1 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (= target (+ 6 floor)) (not (<= floor 13)) (not (<= floor 3)) (= target (+ 7 floor)) (not (<= floor 14)) (not (<= floor 4)) (= target (+ 8 floor)) (= target floor) (not (<= floor 12)) (not (<= floor 2)) (= target (+ 9 floor)) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor)) (not (= target (+ (- 5) floor)))) (or (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 1 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (= target (+ 6 floor)) (= target (+ 7 floor)) (= target (+ 8 floor)) (= target floor) (not (<= floor 12)) (not (<= floor 2)) (= target (+ 9 floor)) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (not (= target (+ (- 3) floor)))) (or (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 1 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (= target (+ 6 floor)) (not (<= floor 13)) (not (<= floor 3)) (= target (+ 7 floor)) (not (<= floor 14)) (not (<= floor 4)) (not (<= floor 15)) (not (<= floor 5)) (not (<= floor 16)) (not (<= floor 6)) (= target (+ 8 floor)) (not (<= floor 17)) (not (<= floor 7)) (= target floor) (not (<= floor 12)) (not (<= floor 2)) (= target (+ 9 floor)) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor)) (not (= target (+ (- 8) floor)))) (or (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 1 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (= target (+ 6 floor)) (not (<= floor 13)) (not (<= floor 3)) (= target (+ 7 floor)) (= target (+ 8 floor)) (= target floor) (<= floor 1) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (not (= target (+ (- 4) floor)))) (or (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 1 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (= target (+ 6 floor)) (not (<= floor 13)) (not (<= floor 3)) (= target (+ 7 floor)) (not (<= floor 14)) (not (<= floor 4)) (not (<= floor 15)) (not (<= floor 5)) (= target (+ 8 floor)) (= target floor) (<= floor 1) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (not (= target (+ (- 6) floor)))) (or (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 1 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (= target (+ 6 floor)) (<= floor 3) (= target (+ 7 floor)) (not (<= floor 14)) (not (<= floor 4)) (not (<= floor 15)) (not (<= floor 5)) (not (<= floor 16)) (not (<= floor 6)) (= target (+ 8 floor)) (= target floor) (<= floor 1) (<= floor 2) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (not (= target (+ (- 7) floor)))) (or (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 1 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (= target (+ 6 floor)) (not (<= floor 13)) (not (<= floor 3)) (= target (+ 7 floor)) (not (<= floor 14)) (not (<= floor 4)) (not (<= floor 15)) (not (<= floor 5)) (not (<= floor 16)) (not (<= floor 6)) (= target (+ 8 floor)) (not (<= floor 17)) (not (<= floor 7)) (= target floor) (not (<= floor 18)) (not (<= floor 8)) (not (<= floor 12)) (not (<= floor 2)) (= target (+ 9 floor)) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor)) (= target (+ (- 8) floor))) (or (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 1 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (= target (+ 6 floor)) (not (<= floor 13)) (not (<= floor 3)) (= target (+ 7 floor)) (= target (+ 8 floor)) (= target floor) (not (<= floor 12)) (not (<= floor 2)) (= target (+ 9 floor)) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (not (= target (+ (- 4) floor)))) (or (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 1 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (= target (+ 6 floor)) (<= floor 3) (= target (+ 7 floor)) (<= floor 4) (<= floor 5) (= target (+ 8 floor)) (not (<= floor 17)) (not (<= floor 7)) (= target floor) (<= floor 1) (<= floor 2) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor)) (not (= target (+ (- 8) floor)))) (or (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 1 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (= target (+ 6 floor)) (<= floor 3) (= target (+ 7 floor)) (<= floor 4) (not (<= floor 15)) (not (<= floor 5)) (not (<= floor 16)) (not (<= floor 6)) (= target (+ 8 floor)) (not (<= floor 17)) (not (<= floor 7)) (= target floor) (<= floor 1) (<= floor 2) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor)) (not (= target (+ (- 8) floor)))) (or (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 1 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (= target (+ 6 floor)) (<= floor 3) (= target (+ 7 floor)) (<= floor 4) (<= floor 5) (not (<= floor 16)) (not (<= floor 6)) (= target (+ 8 floor)) (not (<= floor 17)) (not (<= floor 7)) (= target floor) (<= floor 1) (not (<= floor 18)) (not (<= floor 8)) (<= floor 2) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor)) (= target (+ (- 8) floor))) (or (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 1 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (= target (+ 6 floor)) (not (<= floor 13)) (not (<= floor 3)) (= target (+ 7 floor)) (not (<= floor 14)) (not (<= floor 4)) (not (<= floor 15)) (not (<= floor 5)) (not (<= floor 16)) (not (<= floor 6)) (= target (+ 8 floor)) (not (<= floor 17)) (not (<= floor 7)) (= target floor) (<= floor 1) (<= floor 2) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor)) (not (= target (+ (- 8) floor)))) (or (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 1 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (= target (+ 6 floor)) (<= floor 3) (= target (+ 7 floor)) (<= floor 4) (<= floor 5) (<= floor 6) (= target (+ 8 floor)) (<= floor 7) (= target floor) (<= floor 1) (<= floor 2) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor)) (= target (+ (- 8) floor)) (= target (+ (- 9) floor))) (or (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 1 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (= target (+ 6 floor)) (<= floor 3) (= target (+ 7 floor)) (<= floor 4) (not (<= floor 15)) (not (<= floor 5)) (not (<= floor 16)) (not (<= floor 6)) (= target (+ 8 floor)) (not (<= floor 17)) (not (<= floor 7)) (= target floor) (<= floor 1) (not (<= floor 18)) (not (<= floor 8)) (<= floor 2) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor)) (= target (+ (- 8) floor))) (or (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 1 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (= target (+ 6 floor)) (<= floor 3) (= target (+ 7 floor)) (<= floor 4) (<= floor 5) (<= floor 6) (= target (+ 8 floor)) (= target floor) (<= floor 1) (not (<= floor 18)) (not (<= floor 8)) (<= floor 2) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor)) (= target (+ (- 8) floor))) (or (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 1 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (= target (+ 6 floor)) (<= floor 3) (= target (+ 7 floor)) (not (<= floor 14)) (not (<= floor 4)) (not (<= floor 15)) (not (<= floor 5)) (not (<= floor 16)) (not (<= floor 6)) (= target (+ 8 floor)) (not (<= floor 17)) (not (<= floor 7)) (= target floor) (<= floor 1) (<= floor 2) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor)) (not (= target (+ (- 8) floor)))) (or (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 1 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (= target (+ 6 floor)) (= target (+ 7 floor)) (not (<= floor 14)) (not (<= floor 4)) (= target (+ 8 floor)) (= target floor) (<= floor 1) (<= floor 2) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor)) (not (= target (+ (- 5) floor)))) (or (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 1 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (= target (+ 6 floor)) (<= floor 3) (= target (+ 7 floor)) (not (<= floor 14)) (not (<= floor 4)) (not (<= floor 15)) (not (<= floor 5)) (not (<= floor 16)) (not (<= floor 6)) (= target (+ 8 floor)) (not (<= floor 17)) (not (<= floor 7)) (= target floor) (<= floor 1) (not (<= floor 18)) (not (<= floor 8)) (<= floor 2) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor)) (= target (+ (- 8) floor))) (or (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 1 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (= target (+ 6 floor)) (<= floor 3) (= target (+ 7 floor)) (<= floor 4) (not (<= floor 16)) (not (<= floor 6)) (= target (+ 8 floor)) (= target floor) (<= floor 1) (<= floor 2) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (not (= target (+ (- 7) floor)))) (or (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 1 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (= target (+ 6 floor)) (<= floor 3) (= target (+ 7 floor)) (not (<= floor 15)) (not (<= floor 5)) (= target (+ 8 floor)) (= target floor) (<= floor 1) (<= floor 2) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (not (= target (+ (- 6) floor)))) (or (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 1 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (= target (+ 6 floor)) (not (<= floor 13)) (not (<= floor 3)) (= target (+ 7 floor)) (not (<= floor 14)) (not (<= floor 4)) (not (<= floor 15)) (not (<= floor 5)) (not (<= floor 16)) (not (<= floor 6)) (= target (+ 8 floor)) (= target floor) (<= floor 1) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (not (= target (+ (- 7) floor)))) (or (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 1 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (= target (+ 6 floor)) (not (<= floor 13)) (not (<= floor 3)) (= target (+ 7 floor)) (not (<= floor 14)) (not (<= floor 4)) (not (<= floor 15)) (not (<= floor 5)) (not (<= floor 16)) (not (<= floor 6)) (= target (+ 8 floor)) (= target floor) (not (<= floor 12)) (not (<= floor 2)) (= target (+ 9 floor)) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (not (= target (+ (- 7) floor)))) (or (= target (+ 2 floor)) (= target (+ 1 floor)) (<= floor 7) (= target floor) (not (= target (+ 3 floor))) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor)) (= target (+ (- 8) floor)) (= target (+ (- 9) floor))) (or (= target (+ 1 floor)) (= target floor) (<= floor 8) (not (= target (+ 2 floor))) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor)) (= target (+ (- 8) floor)) (= target (+ (- 9) floor))) (or (= target (+ 1 floor)) (not (= target floor)) (= target (+ (- 1) floor))) (or (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 1 floor)) (<= floor 6) (<= floor 7) (= target floor) (not (= target (+ 4 floor))) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor)) (= target (+ (- 8) floor)) (= target (+ (- 9) floor))) (or (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 1 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (= target (+ 6 floor)) (<= floor 3) (= target (+ 7 floor)) (<= floor 4) (<= floor 5) (<= floor 6) (= target floor) (not (<= floor 18)) (not (<= floor 8)) (<= floor 2) (not (= target (+ 8 floor))) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor)) (= target (+ (- 8) floor))) (or (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 1 floor)) (<= floor 6) (= target floor) (not (<= floor 18)) (not (<= floor 8)) (not (= target (+ 4 floor))) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor)) (= target (+ (- 8) floor))) (or (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 1 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (= target (+ 6 floor)) (<= floor 3) (= target (+ 7 floor)) (<= floor 4) (<= floor 5) (<= floor 6) (<= floor 7) (= target floor) (<= floor 2) (not (= target (+ 8 floor))) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor)) (= target (+ (- 8) floor)) (= target (+ (- 9) floor))) (or (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 1 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (= target (+ 6 floor)) (<= floor 3) (= target (+ 7 floor)) (<= floor 4) (not (<= floor 15)) (not (<= floor 5)) (not (<= floor 16)) (not (<= floor 6)) (not (<= floor 17)) (not (<= floor 7)) (= target floor) (not (<= floor 18)) (not (<= floor 8)) (<= floor 2) (not (= target (+ 8 floor))) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor)) (= target (+ (- 8) floor))) (or (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 1 floor)) (= target (+ 4 floor)) (<= floor 5) (not (<= floor 17)) (not (<= floor 7)) (= target floor) (not (<= floor 18)) (not (<= floor 8)) (not (= target (+ 5 floor))) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor)) (= target (+ (- 8) floor))) (or (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 1 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (<= floor 4) (not (<= floor 16)) (not (<= floor 6)) (not (<= floor 17)) (not (<= floor 7)) (= target floor) (not (<= floor 18)) (not (<= floor 8)) (not (= target (+ 6 floor))) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor)) (= target (+ (- 8) floor))) (or (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 1 floor)) (= target (+ 4 floor)) (<= floor 5) (<= floor 6) (<= floor 7) (= target floor) (not (= target (+ 5 floor))) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor)) (= target (+ (- 8) floor)) (= target (+ (- 9) floor))) (or (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 1 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (<= floor 4) (<= floor 5) (<= floor 6) (= target floor) (not (<= floor 18)) (not (<= floor 8)) (not (= target (+ 6 floor))) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor)) (= target (+ (- 8) floor))) (or (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 1 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (<= floor 4) (<= floor 5) (<= floor 6) (<= floor 7) (= target floor) (not (= target (+ 6 floor))) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor)) (= target (+ (- 8) floor)) (= target (+ (- 9) floor))) (or (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 1 floor)) (= target (+ 4 floor)) (= target (+ 5 floor)) (= target (+ 6 floor)) (<= floor 3) (= target (+ 7 floor)) (<= floor 4) (<= floor 5) (not (<= floor 16)) (not (<= floor 6)) (not (<= floor 17)) (not (<= floor 7)) (= target floor) (not (<= floor 18)) (not (<= floor 8)) (<= floor 2) (not (= target (+ 8 floor))) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor)) (= target (+ (- 6) floor)) (= target (+ (- 7) floor)) (= target (+ (- 8) floor))) (>= floor 0) (<= floor 10)) [ floor := floor] goto 2;otherwise abort() };
3: abort();
Sucessfull Accelerations: 0

Benchmark: /home/luca/git/sweap/scripts/../examples/benchmarks/rpgsolve/finite/bloem-elevator-signal-3.rpg
Runtime: 1611ms
Result: Realizable
read floor target;
goto 0;
0: read  floor target; case {if true [ floor := 1 target := 0] goto 2;otherwise abort() };
1: abort();
2: if (and (not (= target floor)) (>= floor 0) (<= floor 3)) {read  floor target; case {if (and (not (= target floor)) (>= floor 0) (<= floor 3)) [ floor := floor] goto 2;if (and (not (= target floor)) (not (= target (+ 1 floor))) (>= floor 0) (<= floor 2)) [ floor := (+ floor 1)] goto 2;if (and (not (= target floor)) (not (= target (+ (- 1) floor))) (>= floor 1) (<= floor 3)) [ floor := (- floor 1)] goto 2;otherwise abort() };} else {abort();}
3: abort();
Sucessfull Accelerations: 0

Benchmark: /home/luca/git/sweap/scripts/../examples/benchmarks/rpgsolve/finite/bloem-elevator-signal-50.rpg
Runtime: 600208ms
Result: 
Sucessfull Accelerations: 0

Benchmark: /home/luca/git/sweap/scripts/../examples/benchmarks/rpgsolve/finite/bloem-elevator-signal-5.rpg
Runtime: 5417ms
Result: Realizable
read floor target;
goto 0;
0: read  floor target; case {if true [ floor := 1 target := 1] goto 2;otherwise abort() };
1: if (and (>= floor 0) (<= floor 5)) {read  floor target; case {if (and (or (not (<= floor (- 1))) (not (<= floor 4))) (or (not (<= 1 signal)) (not (<= signal 5))) (<= floor 5)) [] goto 1;if (and (or (<= floor 5) (= signal floor)) (or (= signal floor) (<= 0 floor)) (>= signal 1) (<= signal 5)) [ target := signal] goto 2;otherwise abort() };} else {abort();}
2: read  floor target; case {if (and (= target floor) (or (not (<= floor 4)) (not (<= floor (- 1)))) (<= floor 5)) [] goto 1;if (and (or (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 4 floor)) (not (<= floor 5)) (not (<= floor 0)) (= target (+ 5 floor)) (= target floor) (not (<= floor 6)) (not (<= floor 1)) (= target (+ (- 1) floor)) (not (= target (+ (- 2) floor)))) (or (not (= target floor)) (= target (+ 1 floor))) (or (= target (+ 1 floor)) (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 4 floor)) (not (<= floor 5)) (not (<= floor 0)) (= target (+ 5 floor)) (not (= target (+ (- 1) floor)))) (or (= target (+ 1 floor)) (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 4 floor)) (<= floor 0) (= target floor) (not (<= floor 6)) (not (<= floor 1)) (= target (+ (- 1) floor)) (not (= target (+ (- 2) floor)))) (or (= target (+ 1 floor)) (= target (+ 2 floor)) (= target floor) (<= floor 2) (not (= target (+ 3 floor))) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor))) (or (= target (+ 1 floor)) (= target (+ 2 floor)) (= target (+ 3 floor)) (= target floor) (<= floor 1) (not (= target (+ 4 floor))) (not (<= floor 7)) (not (<= floor 2)) (= target (+ (- 1) floor)) (= target (+ (- 2) floor))) (or (= target (+ 1 floor)) (= target (+ 2 floor)) (= target (+ 3 floor)) (= target floor) (<= floor 2) (<= floor 1) (not (= target (+ 4 floor))) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor))) (or (= target (+ 1 floor)) (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 4 floor)) (not (<= floor 5)) (not (<= floor 0)) (= target (+ 5 floor)) (= target floor) (not (<= floor 6)) (not (<= floor 1)) (not (<= floor 7)) (not (<= floor 2)) (= target (+ (- 1) floor)) (= target (+ (- 2) floor))) (or (= target (+ 1 floor)) (= target floor) (<= floor 3) (not (= target (+ 2 floor))) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor))) (or (= target floor) (<= floor 3) (<= floor 4) (not (= target (+ 1 floor)))) (or (= target (+ 1 floor)) (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 4 floor)) (<= floor 0) (= target floor) (not (<= floor 6)) (not (<= floor 1)) (not (<= floor 7)) (not (<= floor 2)) (= target (+ (- 1) floor)) (= target (+ (- 2) floor))) (or (= target (+ 1 floor)) (= target floor) (<= floor 3) (<= floor 4)) (or (= target (+ 1 floor)) (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 4 floor)) (<= floor 0) (= target floor) (<= floor 1) (not (<= floor 7)) (not (<= floor 2)) (= target (+ (- 1) floor)) (= target (+ (- 2) floor))) (or (= target (+ 1 floor)) (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 4 floor)) (<= floor 0) (= target floor) (<= floor 2) (<= floor 1) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor))) (>= floor 0)) [ floor := (+ floor 1)] goto 2;if (and (or (= target (+ 1 floor)) (= target floor) (= target (+ 2 floor)) (not (<= floor 8)) (not (<= floor 3)) (not (<= floor 7)) (not (<= floor 2)) (= target (+ 3 floor)) (not (<= floor 4)) (not (<= floor 9)) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor))) (or (= target floor) (<= 1 floor) (= target (+ (- 1) floor)) (= target (+ (- 2) floor))) (or (<= 1 floor) (not (<= floor 0)) (not (= target (+ (- 1) floor)))) (or (= target (+ 1 floor)) (= target floor) (= target (+ 2 floor)) (= target (+ 3 floor)) (not (<= floor 6)) (not (<= floor 1)) (= target (+ (- 1) floor)) (not (= target (+ (- 2) floor)))) (or (= target (+ 1 floor)) (= target floor) (= target (+ 2 floor)) (<= floor 3) (<= floor 2) (<= floor 4) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor))) (or (= target (+ 1 floor)) (= target floor) (= target (+ 2 floor)) (not (<= floor 8)) (not (<= floor 3)) (<= floor 2) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (not (= target (+ (- 4) floor)))) (or (= target (+ 1 floor)) (not (= target floor)) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor))) (or (= target (+ 1 floor)) (= target floor) (= target (+ 2 floor)) (<= floor 3) (<= floor 2) (not (<= floor 4)) (not (<= floor 9)) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor))) (or (= target floor) (<= floor 4) (not (= target (+ 1 floor))) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor))) (or (= target (+ 1 floor)) (= target floor) (= target (+ 2 floor)) (not (<= floor 8)) (not (<= floor 3)) (<= floor 2) (not (<= floor 4)) (not (<= floor 9)) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor))) (or (= target (+ 1 floor)) (= target floor) (<= floor 3) (not (<= floor 4)) (not (<= floor 9)) (not (= target (+ 2 floor))) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor))) (or (= target (+ 1 floor)) (= target floor) (<= floor 3) (<= floor 4) (not (= target (+ 2 floor))) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor)) (= target (+ (- 5) floor))) (or (= target (+ 1 floor)) (= target floor) (= target (+ 2 floor)) (not (<= floor 8)) (not (<= floor 3)) (not (<= floor 7)) (not (<= floor 2)) (= target (+ 3 floor)) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (not (= target (+ (- 4) floor)))) (or (= target (+ 1 floor)) (= target floor) (= target (+ 2 floor)) (not (<= floor 7)) (not (<= floor 2)) (= target (+ 3 floor)) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (not (= target (+ (- 3) floor)))) (<= floor 5)) [ floor := (- floor 1)] goto 2;if (and (or (= target (+ 1 floor)) (= target (+ 2 floor)) (= target (+ 3 floor)) (not (<= floor 0)) (= target (+ 4 floor)) (not (= target (+ (- 1) floor)))) (or (= target floor) (= target (+ 1 floor)) (= target (+ 2 floor)) (= target (+ 3 floor)) (<= floor 2) (<= floor 1) (<= floor 3) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor))) (or (= target floor) (= target (+ 1 floor)) (= target (+ 2 floor)) (= target (+ 3 floor)) (<= floor 2) (<= floor 1) (not (<= floor 8)) (not (<= floor 3)) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor))) (or (= target floor) (= target (+ 1 floor)) (= target (+ 2 floor)) (= target (+ 3 floor)) (<= floor 1) (not (<= floor 8)) (not (<= floor 3)) (not (<= floor 7)) (not (<= floor 2)) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor))) (or (= target floor) (= target (+ 1 floor)) (= target (+ 2 floor)) (= target (+ 3 floor)) (not (<= floor 8)) (not (<= floor 3)) (= target (+ 4 floor)) (not (<= floor 7)) (not (<= floor 2)) (not (<= floor 6)) (not (<= floor 1)) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor))) (or (= target floor) (= target (+ 1 floor)) (= target (+ 2 floor)) (= target (+ 3 floor)) (<= floor 1) (not (<= floor 7)) (not (<= floor 2)) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (not (= target (+ (- 3) floor)))) (or (= target floor) (= target (+ 1 floor)) (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 4 floor)) (not (<= floor 7)) (not (<= floor 2)) (not (<= floor 6)) (not (<= floor 1)) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (not (= target (+ (- 3) floor)))) (or (= target floor) (<= floor 4) (not (= target (+ 1 floor))) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor))) (or (= target floor) (= target (+ 1 floor)) (= target (+ 2 floor)) (= target (+ 3 floor)) (= target (+ 4 floor)) (not (<= floor 6)) (not (<= floor 1)) (= target (+ (- 1) floor)) (not (= target (+ (- 2) floor)))) (or (= target floor) (= target (+ 1 floor)) (= target (+ 2 floor)) (<= floor 2) (not (= target (+ 3 floor))) (not (<= floor 8)) (not (<= floor 3)) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor))) (or (= target floor) (= target (+ 1 floor)) (<= floor 3) (not (= target (+ 2 floor))) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor))) (or (= target floor) (= target (+ 1 floor)) (= target (+ 2 floor)) (<= floor 2) (<= floor 3) (not (= target (+ 3 floor))) (= target (+ (- 1) floor)) (= target (+ (- 2) floor)) (= target (+ (- 3) floor)) (= target (+ (- 4) floor))) (or (not (= target floor)) (= target (+ (- 1) floor)) (= target (+ 1 floor))) (>= floor 0) (<= floor 5)) [ floor := floor] goto 2;otherwise abort() };
3: abort();
Sucessfull Accelerations: 0

Benchmark: /home/luca/git/sweap/scripts/../examples/benchmarks/rpgsolve/finite/bloem-elevator-simple-10.rpg
Runtime: 32763ms
Result: Realizable
read v10 v9 v8 v7 v6 v5 v4 v3 v2 v1 floor;
goto 0;
0: read  v10 v9 v8 v7 v6 v5 v4 v3 v2 v1 floor; case {if true [ floor := 1] goto 1;otherwise abort() };
1: if (or (= floor 1) (= floor 10) (= floor 2) (= floor 6) (= floor 9) (= floor 8) (= floor 4) (= floor 7) (= floor 3) (= floor 5)) {read  v10 v9 v8 v7 v6 v5 v4 v3 v2 v1 floor; case {if (or (= floor 1) (= floor 10) (= floor 2) (= floor 6) (= floor 9) (= floor 8) (= floor 4) (= floor 7) (= floor 3) (= floor 5)) [ v1 := false v10 := false v2 := false v3 := false v4 := false v5 := false v6 := false v7 := false v8 := false v9 := false] goto 2;otherwise abort() };} else {abort();}
2: read  v10 v9 v8 v7 v6 v5 v4 v3 v2 v1 floor; case {if (and v1 v2 v3 v4 v5 v6 v7 v8 v9 v10 (or (= floor 1) (= floor 10) (= floor 2) (= floor 6) (= floor 9) (= floor 8) (= floor 4) (= floor 7) (= floor 3) (= floor 5))) [] goto 1;if (and (or (not v1) (not v10) (not v2) (not v3) (not v4) (not v5) (not v6) (not v7) (not v8) (not v9)) (= floor 1)) [ floor := floor v1 := true] goto 2;if (and (or (not v1) (not v10) (not v2) (not v3) (not v4) (not v5) (not v6) (not v7) (not v8) (not v9)) (= floor 1)) [ floor := (+ floor 1) v1 := true] goto 2;if (and (or (not v1) (not v10) (not v2) (not v3) (not v4) (not v5) (not v6) (not v7) (not v8) (not v9)) (= floor 10)) [ floor := floor v10 := true] goto 2;if (and (or (not v1) (not v10) (not v2) (not v3) (not v4) (not v5) (not v6) (not v7) (not v8) (not v9)) (= floor 10)) [ floor := (- floor 1) v10 := true] goto 2;if (and (or (not v2) (not v1) (not v10) (not v3) (not v4) (not v5) (not v6) (not v7) (not v8) (not v9)) (= floor 2)) [ floor := floor v2 := true] goto 2;if (and (or (not v1) (not v10) (not v2) (not v3) (not v4) (not v5) (not v6) (not v7) (not v8) (not v9)) (= floor 2)) [ floor := (+ floor 1) v2 := true] goto 2;if (and (or (not v2) (not v1) (not v10) (not v3) (not v4) (not v5) (not v6) (not v7) (not v8) (not v9)) (= floor 2)) [ floor := (- floor 1) v2 := true] goto 2;if (and (or (not v3) (not v1) (not v10) (not v2) (not v4) (not v5) (not v6) (not v7) (not v8) (not v9)) (= floor 3)) [ floor := floor v3 := true] goto 2;if (and (or (not v3) (not v1) (not v10) (not v2) (not v4) (not v5) (not v6) (not v7) (not v8) (not v9)) (= floor 3)) [ floor := (+ floor 1) v3 := true] goto 2;if (and (or (not v3) (not v1) (not v10) (not v2) (not v4) (not v5) (not v6) (not v7) (not v8) (not v9)) (= floor 3)) [ floor := (- floor 1) v3 := true] goto 2;if (and (or (not v4) (not v1) (not v10) (not v2) (not v3) (not v5) (not v6) (not v7) (not v8) (not v9)) (= floor 4)) [ floor := floor v4 := true] goto 2;if (and (or v1 v10) (or (not v4) (not v1) (not v10) (not v2) (not v3) (not v5) (not v6) (not v7) (not v8) (not v9)) (= floor 4)) [ floor := (+ floor 1) v4 := true] goto 2;if (and (or (not v4) (not v1) (not v10) (not v2) (not v3) (not v5) (not v6) (not v7) (not v8) (not v9)) (= floor 4)) [ floor := (- floor 1) v4 := true] goto 2;if (and (or v1 v10) (or (not v5) (not v1) (not v10) (not v2) (not v3) (not v4) (not v6) (not v7) (not v8) (not v9)) (= floor 5)) [ floor := floor v5 := true] goto 2;if (and (or v1 v10) (or (not v5) (not v1) (not v10) (not v2) (not v3) (not v4) (not v6) (not v7) (not v8) (not v9)) (= floor 5)) [ floor := (+ floor 1) v5 := true] goto 2;if (and (or (not v5) (not v1) (not v10) (not v2) (not v3) (not v4) (not v6) (not v7) (not v8) (not v9)) (= floor 5)) [ floor := (- floor 1) v5 := true] goto 2;if (and (or v1 v10) (or (not v6) (not v1) (not v10) (not v2) (not v3) (not v4) (not v5) (not v7) (not v8) (not v9)) (= floor 6)) [ floor := floor v6 := true] goto 2;if (and (or (not v6) (not v1) (not v10) (not v2) (not v3) (not v4) (not v5) (not v7) (not v8) (not v9)) (= floor 6)) [ floor := (+ floor 1) v6 := true] goto 2;if (and (or v1 v10) (or (not v6) (not v1) (not v10) (not v2) (not v3) (not v4) (not v5) (not v7) (not v8) (not v9)) (= floor 6)) [ floor := (- floor 1) v6 := true] goto 2;if (and (or (not v7) (not v1) (not v10) (not v2) (not v3) (not v4) (not v5) (not v6) (not v8) (not v9)) (= floor 7)) [ floor := floor v7 := true] goto 2;if (and (or (not v7) (not v1) (not v10) (not v2) (not v3) (not v4) (not v5) (not v6) (not v8) (not v9)) (= floor 7)) [ floor := (+ floor 1) v7 := true] goto 2;if (and (or v1 v10) (or (not v7) (not v1) (not v10) (not v2) (not v3) (not v4) (not v5) (not v6) (not v8) (not v9)) (= floor 7)) [ floor := (- floor 1) v7 := true] goto 2;if (and (or (not v8) (not v1) (not v10) (not v2) (not v3) (not v4) (not v5) (not v6) (not v7) (not v9)) (= floor 8)) [ floor := floor v8 := true] goto 2;if (and (or (not v8) (not v1) (not v10) (not v2) (not v3) (not v4) (not v5) (not v6) (not v7) (not v9)) (= floor 8)) [ floor := (+ floor 1) v8 := true] goto 2;if (and (or (not v8) (not v1) (not v10) (not v2) (not v3) (not v4) (not v5) (not v6) (not v7) (not v9)) (= floor 8)) [ floor := (- floor 1) v8 := true] goto 2;if (and (or (not v9) (not v1) (not v10) (not v2) (not v3) (not v4) (not v5) (not v6) (not v7) (not v8)) (= floor 9)) [ floor := floor v9 := true] goto 2;if (and (or (not v9) (not v1) (not v10) (not v2) (not v3) (not v4) (not v5) (not v6) (not v7) (not v8)) (= floor 9)) [ floor := (+ floor 1) v9 := true] goto 2;if (and (or (not v9) (not v1) (not v10) (not v2) (not v3) (not v4) (not v5) (not v6) (not v7) (not v8)) (= floor 9)) [ floor := (- floor 1) v9 := true] goto 2;otherwise abort() };
3: abort();
Sucessfull Accelerations: 0

Benchmark: /home/luca/git/sweap/scripts/../examples/benchmarks/rpgsolve/finite/bloem-elevator-simple-3.rpg
Runtime: 4068ms
Result: Realizable
read v3 v2 v1 floor;
goto 0;
0: read  v3 v2 v1 floor; case {if true [ floor := 1] goto 1;otherwise abort() };
1: if (or (= floor 1) (= floor 3) (= floor 2)) {read  v3 v2 v1 floor; case {if (or (= floor 1) (= floor 3) (= floor 2)) [ v1 := false v2 := false v3 := false] goto 2;otherwise abort() };} else {abort();}
2: read  v3 v2 v1 floor; case {if (and v3 v1 v2 (or (= floor 1) (= floor 3) (= floor 2))) [] goto 1;if (and (or (not v1) (not v3) (not v2)) (= floor 1)) [ floor := floor v1 := true] goto 2;if (and (or (not v1) (not v3) (not v2)) (= floor 1)) [ floor := (+ floor 1) v1 := true] goto 2;if (and (or (not v3) (not v1) (not v2)) (= floor 3)) [ floor := floor v3 := true] goto 2;if (and (or (not v3) (not v1) (not v2)) (= floor 3)) [ floor := (- floor 1) v3 := true] goto 2;if (and (or v1 v3) (or (not v2) (not v1) (not v3)) (= floor 2)) [ floor := floor v2 := true] goto 2;if (and (or (not v1) (not v2) (not v3)) (= floor 2)) [ floor := (+ floor 1) v2 := true] goto 2;if (and (or (not v2) (not v1) (not v3)) (= floor 2)) [ floor := (- floor 1) v2 := true] goto 2;otherwise abort() };
3: abort();
Sucessfull Accelerations: 0

Benchmark: /home/luca/git/sweap/scripts/../examples/benchmarks/rpgsolve/finite/bloem-elevator-simple-50.rpg
Runtime: 600157ms
Result: 
Sucessfull Accelerations: 0

Benchmark: /home/luca/git/sweap/scripts/../examples/benchmarks/rpgsolve/finite/bloem-elevator-simple-5.rpg
Runtime: 7062ms
Result: Realizable
read v5 v4 v3 v2 v1 floor;
goto 0;
0: read  v5 v4 v3 v2 v1 floor; case {if true [ floor := 1] goto 1;otherwise abort() };
1: if (or (= floor 1) (= floor 2) (= floor 3) (= floor 5) (= floor 4)) {read  v5 v4 v3 v2 v1 floor; case {if (or (= floor 1) (= floor 2) (= floor 3) (= floor 5) (= floor 4)) [ v1 := false v2 := false v3 := false v4 := false v5 := false] goto 2;otherwise abort() };} else {abort();}
2: read  v5 v4 v3 v2 v1 floor; case {if (and v1 v2 v3 v4 v5 (or (= floor 1) (= floor 2) (= floor 3) (= floor 5) (= floor 4))) [] goto 1;if (and (or (not v1) (not v5) (not v2) (not v3) (not v4)) (= floor 1)) [ floor := floor v1 := true] goto 2;if (and (or (not v1) (not v5) (not v2) (not v3) (not v4)) (= floor 1)) [ floor := (+ floor 1) v1 := true] goto 2;if (and (or (not v1) (not v2) (not v3) (not v4) (not v5)) (= floor 5)) [ floor := floor v5 := true] goto 2;if (and (or (not v5) (not v1) (not v2) (not v3) (not v4)) (= floor 5)) [ floor := (- floor 1) v5 := true] goto 2;if (and (or (not v2) (not v1) (not v5) (not v3) (not v4)) (= floor 2)) [ floor := floor v2 := true] goto 2;if (and (or v1 v5) (or (not v2) (not v1) (not v5) (not v3) (not v4)) (= floor 2)) [ floor := (+ floor 1) v2 := true] goto 2;if (and (or (not v2) (not v1) (not v5) (not v3) (not v4)) (= floor 2)) [ floor := (- floor 1) v2 := true] goto 2;if (and (or v1 v5) (or (not v3) (not v1) (not v5) (not v2) (not v4)) (= floor 3)) [ floor := floor v3 := true] goto 2;if (and (or (not v3) (not v1) (not v5) (not v2) (not v4)) (= floor 3)) [ floor := (+ floor 1) v3 := true] goto 2;if (and (or (not v3) (not v1) (not v5) (not v2) (not v4)) (= floor 3)) [ floor := (- floor 1) v3 := true] goto 2;if (and (or (not v4) (not v1) (not v5) (not v2) (not v3)) (= floor 4)) [ floor := floor v4 := true] goto 2;if (and (or (not v4) (not v1) (not v5) (not v2) (not v3)) (= floor 4)) [ floor := (+ floor 1) v4 := true] goto 2;if (and (or v1 v5) (or (not v4) (not v1) (not v5) (not v2) (not v3)) (= floor 4)) [ floor := (- floor 1) v4 := true] goto 2;otherwise abort() };
3: abort();
Sucessfull Accelerations: 0

Benchmark: /home/luca/git/sweap/scripts/../examples/benchmarks/rpgsolve/finite/robot-grid-reach-1d-10.rpg
Runtime: 2340ms
Result: Realizable
read x;
goto 3;
0: read  x; case {if (= x 0) [] goto 1;if (and (or (= x 1) (= x 3) (= x 4) (= x 5) (= x 6) (= x 7) (= x 8) (= x 9) (<= x 10) (= x (- 1)) (= x (- 2)) (= x (- 3)) (= x (- 4)) (= x (- 5)) (= x (- 6)) (= x (- 7))) (>= x 1)) [ x := (- x 1)] goto 0;if (and (or (not (= x 0)) (= x 1)) (or (= x 1) (<= 0 x)) (or (= x 1) (= x 0) (= x 2) (= x 3) (= x 4) (= x 5) (= x 6) (= x 7) (= x 8) (= x 9) (= x (- 1)) (= x (- 2)) (= x (- 3)) (= x (- 4)) (= x (- 5)) (= x (- 6)) (= x (- 7)) (= x (- 8)) (= x (- 9)))) [] goto 0;if (and (or (= x 1) (<= 0 x)) (or (= x 1) (= x 2) (= x 3) (= x 4) (= x 5) (= x 6) (= x 7) (= x 8) (= x (- 1)) (= x (- 2)) (= x (- 3)) (= x (- 4)) (= x (- 5)) (= x (- 6)) (= x (- 7)) (= x (- 8)) (= x (- 9)) (= x (- 10)))) [ x := (+ x 1)] goto 0;otherwise abort() };
1: read  x; case {if true [] goto 1;otherwise abort() };
2: abort();
3: read  x; case {if (or (not (<= 0 env_in)) (not (<= env_in 10))) [] goto 1;if (and (>= env_in 0) (<= env_in 10)) [ x := env_in] goto 0;otherwise abort() };
Sucessfull Accelerations: 0

Benchmark: /home/luca/git/sweap/scripts/../examples/benchmarks/rpgsolve/finite/robot-grid-reach-1d-50.rpg
Runtime: 10874ms
Result: Realizable
read x;
goto 3;
0: read  x; case {if (= x 0) [] goto 1;if (and (or (= x 2) (= x 1) (= x 3) (= x 4) (= x 5) (= x 6) (= x 7) (= x 8) (= x 9) (= x 10) (= x 11) (= x 12) (= x 13) (= x 14) (= x 15) (= x 16) (= x 17) (= x 18) (= x 19) (= x 20) (= x 21) (= x 22) (= x 23) (= x 24) (= x 25) (= x 26) (= x 27) (= x 28) (= x 29) (= x 30) (= x 31) (= x 32) (= x 33) (= x 34) (= x 35) (= x 36) (= x 37) (= x 38) (= x 39) (= x 40) (= x 41) (= x 42) (= x 43) (= x 44) (= x 45) (= x 46) (= x 47) (= x 48) (= x 49) (<= x 50) (= x (- 1)) (= x (- 2)) (= x (- 3)) (= x (- 4)) (= x (- 5)) (= x (- 6)) (= x (- 7)) (= x (- 8)) (= x (- 9)) (= x (- 10)) (= x (- 11)) (= x (- 12)) (= x (- 13)) (= x (- 14)) (= x (- 15)) (= x (- 16)) (= x (- 17)) (= x (- 18)) (= x (- 19)) (= x (- 20)) (= x (- 21)) (= x (- 22)) (= x (- 23)) (= x (- 24)) (= x (- 25)) (= x (- 26)) (= x (- 27)) (= x (- 28)) (= x (- 29)) (= x (- 30)) (= x (- 31)) (= x (- 32)) (= x (- 33)) (= x (- 34)) (= x (- 35)) (= x (- 36)) (= x (- 37)) (= x (- 38)) (= x (- 39)) (= x (- 40)) (= x (- 41)) (= x (- 42)) (= x (- 43)) (= x (- 44)) (= x (- 45)) (= x (- 46)) (= x (- 47))) (>= x 1)) [ x := (- x 1)] goto 0;if (and (or (= x 1) (= x 0) (= x 2) (= x 3) (= x 4) (= x 5) (= x 6) (= x 7) (= x 8) (= x 9) (= x 10) (= x 11) (= x 12) (= x 13) (= x 14) (= x 15) (= x 16) (= x 17) (= x 18) (= x 19) (= x 20) (= x 21) (= x 22) (= x 23) (= x 24) (= x 25) (= x 26) (= x 27) (= x 28) (= x 29) (= x 30) (= x 31) (= x 32) (= x 33) (= x 34) (= x 35) (= x 36) (= x 37) (= x 38) (= x 39) (= x 40) (= x 41) (= x 42) (= x 43) (= x 44) (= x 45) (= x 46) (= x 47) (= x 48) (= x 49) (= x (- 1)) (= x (- 2)) (= x (- 3)) (= x (- 4)) (= x (- 5)) (= x (- 6)) (= x (- 7)) (= x (- 8)) (= x (- 9)) (= x (- 10)) (= x (- 11)) (= x (- 12)) (= x (- 13)) (= x (- 14)) (= x (- 15)) (= x (- 16)) (= x (- 17)) (= x (- 18)) (= x (- 19)) (= x (- 20)) (= x (- 21)) (= x (- 22)) (= x (- 23)) (= x (- 24)) (= x (- 25)) (= x (- 26)) (= x (- 27)) (= x (- 28)) (= x (- 29)) (= x (- 30)) (= x (- 31)) (= x (- 32)) (= x (- 33)) (= x (- 34)) (= x (- 35)) (= x (- 36)) (= x (- 37)) (= x (- 38)) (= x (- 39)) (= x (- 40)) (= x (- 41)) (= x (- 42)) (= x (- 43)) (= x (- 44)) (= x (- 45)) (= x (- 46)) (= x (- 47)) (= x (- 48)) (= x (- 49))) (or (= x 1) (<= 0 x)) (or (not (= x 0)) (= x 1))) [] goto 0;if (and (or (= x 1) (= x 0) (= x 2) (= x 3) (= x 4) (= x 5) (= x 6) (= x 7) (= x 8) (= x 9) (= x 10) (= x 11) (= x 12) (= x 13) (= x 14) (= x 15) (= x 16) (= x 17) (= x 18) (= x 19) (= x 20) (= x 21) (= x 22) (= x 23) (= x 24) (= x 25) (= x 26) (= x 27) (= x 28) (= x 29) (= x 30) (= x 31) (= x 32) (= x 33) (= x 34) (= x 35) (= x 36) (= x 37) (= x 38) (= x 39) (= x 40) (= x 41) (= x 42) (= x 43) (= x 44) (= x 45) (= x 46) (= x 47) (= x 48) (= x (- 1)) (= x (- 2)) (= x (- 3)) (= x (- 4)) (= x (- 5)) (= x (- 6)) (= x (- 7)) (= x (- 8)) (= x (- 9)) (= x (- 10)) (= x (- 11)) (= x (- 12)) (= x (- 13)) (= x (- 14)) (= x (- 15)) (= x (- 16)) (= x (- 17)) (= x (- 18)) (= x (- 19)) (= x (- 20)) (= x (- 21)) (= x (- 22)) (= x (- 23)) (= x (- 24)) (= x (- 25)) (= x (- 26)) (= x (- 27)) (= x (- 28)) (= x (- 29)) (= x (- 30)) (= x (- 31)) (= x (- 32)) (= x (- 33)) (= x (- 34)) (= x (- 35)) (= x (- 36)) (= x (- 37)) (= x (- 38)) (= x (- 39)) (= x (- 40)) (= x (- 41)) (= x (- 42)) (= x (- 43)) (= x (- 44)) (= x (- 45)) (= x (- 46)) (= x (- 47)) (= x (- 48)) (= x (- 49)) (= x (- 50))) (or (= x 1) (<= 0 x)) (or (not (= x 0)) (= x 1))) [ x := (+ x 1)] goto 0;otherwise abort() };
1: read  x; case {if true [] goto 1;otherwise abort() };
2: abort();
3: read  x; case {if (or (not (<= 0 env_in)) (not (<= env_in 50))) [] goto 1;if (and (>= env_in 0) (<= env_in 50)) [ x := env_in] goto 0;otherwise abort() };
Sucessfull Accelerations: 0

Benchmark: /home/luca/git/sweap/scripts/../examples/benchmarks/rpgsolve/finite/robot-grid-reach-1d-5.rpg
Runtime: 1496ms
Result: Realizable
read x;
goto 3;
0: read  x; case {if (= x 0) [] goto 1;if (and (or (= x 0) (= x 2) (= x 1) (= x 3) (= x 4) (<= x 5) (= x (- 1)) (= x (- 2))) (>= x 1)) [ x := (- x 1)] goto 0;if (and (or (not (= x 0)) (= x 1)) (or (= x 1) (= x 0) (= x 2) (= x 3) (= x 4) (= x (- 1)) (= x (- 2)) (= x (- 3)) (= x (- 4))) (>= x 0)) [] goto 0;if (and (or (= x 1) (= x 2) (= x 3) (= x (- 1)) (= x (- 2)) (= x (- 3)) (= x (- 4)) (= x (- 5))) (or (= x 1) (<= 0 x)) (or (not (= x 0)) (= x 1))) [ x := (+ x 1)] goto 0;otherwise abort() };
1: read  x; case {if true [] goto 1;otherwise abort() };
2: abort();
3: read  x; case {if (or (not (<= 0 env_in)) (not (<= env_in 5))) [] goto 1;if (and (>= env_in 0) (<= env_in 5)) [ x := env_in] goto 0;otherwise abort() };
Sucessfull Accelerations: 0

Benchmark: /home/luca/git/sweap/scripts/../examples/benchmarks/rpgsolve/finite/robot-grid-reach-2d-10.rpg
Runtime: 13597ms
Result: Realizable
read y x;
goto 3;
0: read  y x; case {if (and (= y 0) (= x 0)) [] goto 1;if (and (or (= y 0) (= y 1) (= y 2) (= y 3) (= y 4) (= y 5) (= y 6) (= y 7) (= y 8) (= y 9) (<= y 10) (= x 3) (= x 1) (<= 3 x) (= y (- 1)) (= x (- 1)) (= y (- 2)) (= x (- 2)) (= y (- 3)) (= x (- 3)) (= y (- 4)) (= x (- 4)) (= y (- 5)) (= x (- 5)) (= y (- 6)) (= x (- 6)) (= y (- 7)) (= x (- 7)) (= y (- 8)) (= x (- 8)) (= y (- 9)) (= x (- 9))) (or (= x 0) (= x 2) (= x 1) (>= x 1) (<= 0 x)) (or (= y 0) (>= y 0)) (or (= x 0) (= x 2) (= y 0) (= y 1) (= y 2) (= y 3) (= y 4) (= y 5) (= y 6) (= y 7) (= x 4) (= y 8) (= y 9) (<= y 10) (= x 1) (<= 4 x) (= y (- 1)) (= x (- 1)) (= y (- 2)) (= x (- 2)) (= y (- 3)) (= x (- 3)) (= y (- 4)) (= x (- 4)) (= y (- 5)) (= x (- 5)) (= y (- 6)) (= x (- 6)) (= y (- 7)) (= x (- 7)) (= y (- 8)) (= x (- 8)) (= y (- 9)) (= x (- 9)) (= x (- 10)) (= y (- 10))) (or (= x 0) (= x 2) (= y 0) (= y 1) (= y 2) (= y 3) (= y 4) (= y 5) (= y 6) (= y 7) (= y 8) (= y 9) (<= y 10) (= x 3) (= x 5) (= x 1) (<= 5 x) (= y (- 1)) (= x (- 1)) (= y (- 2)) (= x (- 2)) (= y (- 3)) (= x (- 3)) (= y (- 4)) (= x (- 4)) (= y (- 5)) (= x (- 5)) (= y (- 6)) (= x (- 6)) (= y (- 7)) (= x (- 7)) (= y (- 8)) (= x (- 8)) (= y (- 9)) (= x (- 9)) (= x (- 10)) (= y (- 10)) (= x (- 11)) (= y (- 11))) (or (= x 0) (= x 2) (= y 0) (= y 1) (= y 2) (= y 3) (= y 4) (= y 5) (= y 6) (= y 7) (= x 4) (= y 8) (= y 9) (<= y 10) (= x 3) (= x 5) (= x 6) (= x 8) (= x 1) (<= 8 x) (= y (- 1)) (= x (- 1)) (= y (- 2)) (= x (- 2)) (= y (- 3)) (= x (- 3)) (= y (- 4)) (= x (- 4)) (= y (- 5)) (= x (- 5)) (= y (- 6)) (= x (- 6)) (= y (- 7)) (= x (- 7)) (= y (- 8)) (= x (- 8)) (= y (- 9)) (= x (- 9)) (= x (- 10)) (= y (- 10)) (= x (- 11)) (= y (- 11))) (or (= x 0) (= x 2) (= y 0) (= y 1) (= y 2) (= y 3) (= y 4) (= y 5) (= y 6) (= y 7) (= x 4) (= y 8) (= y 9) (<= y 10) (= x 3) (= x 5) (= x 7) (= x 6) (= x 1) (= x 9) (<= 9 x) (= y (- 1)) (= x (- 1)) (= y (- 2)) (= x (- 2)) (= y (- 3)) (= x (- 3)) (= y (- 4)) (= x (- 4)) (= y (- 5)) (= x (- 5)) (= y (- 6)) (= x (- 6)) (= y (- 7)) (= x (- 7)) (= y (- 8)) (= x (- 8)) (= y (- 9)) (= x (- 9)) (= x (- 10)) (= y (- 10)) (= x (- 11)) (= y (- 11))) (or (= x 0) (= x 2) (= y 0) (= y 1) (= y 2) (= x 4) (= x 3) (= x 5) (= x 7) (= x 6) (= x 8) (= x 10) (= x 1) (<= x 10) (>= y 4) (= y (- 1)) (= x (- 1)) (= y (- 2)) (= x (- 2)) (= y (- 3)) (= x (- 3)) (= y (- 4)) (= x (- 4)) (= y (- 5)) (= x (- 5)) (= y (- 6)) (= x (- 6)) (= y (- 7)) (= x (- 7)) (= y (- 8)) (= x (- 8)) (= y (- 9)) (= x (- 9))) (or (= x 0) (= x 2) (= y 0) (= y 1) (= y 2) (= y 3) (= y 4) (= y 5) (= y 6) (= y 7) (= x 4) (= y 8) (= y 9) (<= y 10) (= x 3) (= x 6) (= x 1) (<= 6 x) (= y (- 1)) (= x (- 1)) (= y (- 2)) (= x (- 2)) (= y (- 3)) (= x (- 3)) (= y (- 4)) (= x (- 4)) (= y (- 5)) (= x (- 5)) (= y (- 6)) (= x (- 6)) (= y (- 7)) (= x (- 7)) (= y (- 8)) (= x (- 8)) (= y (- 9)) (= x (- 9)) (= x (- 10)) (= y (- 10)) (= x (- 11)) (= y (- 11))) (or (= x 0) (= x 2) (= y 0) (= y 1) (= y 2) (= y 3) (= y 4) (= y 5) (= y 6) (= y 7) (= x 4) (= y 8) (= y 9) (<= y 10) (= x 3) (= x 5) (= x 7) (= x 6) (= x 8) (= x 1) (= x 9) (= x 11) (<= 11 x) (= y (- 1)) (= x (- 1)) (= y (- 2)) (= x (- 2)) (= y (- 3)) (= x (- 3)) (= y (- 4)) (= x (- 4)) (= y (- 5)) (= x (- 5)) (= y (- 6)) (= x (- 6)) (= y (- 7)) (= x (- 7)) (= y (- 8)) (= x (- 8)) (= y (- 9)) (= x (- 9)) (= x (- 10)) (= y (- 10)) (= x (- 11)) (= y (- 11))) (or (= x 0) (= x 2) (= x 4) (= x 3) (= x 5) (= x 7) (= x 6) (= x 8) (= x 1) (= x 9) (<= x 10) (>= y 1) (= y (- 1)) (= x (- 1)) (= y (- 2)) (= x (- 2)) (= y (- 3)) (= x (- 3)) (= y (- 4)) (= x (- 4)) (= y (- 5)) (= x (- 5)) (= y (- 6)) (= x (- 6)) (= y (- 7)) (= x (- 7))) (or (= x 0) (= x 2) (= y 0) (= y 1) (= y 2) (= y 3) (= y 4) (= y 5) (= y 6) (= y 7) (= x 4) (= y 8) (= y 9) (<= y 10) (= x 3) (= x 5) (= x 7) (= x 6) (= x 8) (= x 10) (<= 10 x) (= y (- 1)) (= x (- 1)) (= y (- 2)) (= x (- 2)) (= y (- 3)) (= x (- 3)) (= y (- 4)) (= x (- 4)) (= y (- 5)) (= x (- 5)) (= y (- 6)) (= x (- 6)) (= y (- 7)) (= x (- 7)) (= y (- 8)) (= x (- 8)) (= y (- 9)) (= x (- 9)) (= x (- 10)) (= y (- 10)) (= x (- 11)) (= y (- 11))) (or (= x 0) (= x 2) (= y 0) (= y 1) (= y 2) (= y 3) (= y 4) (= y 5) (= y 6) (= y 7) (= x 4) (= y 8) (= y 9) (<= y 10) (= x 3) (= x 5) (= x 7) (= x 1) (<= 7 x) (= y (- 1)) (= x (- 1)) (= y (- 2)) (= x (- 2)) (= y (- 3)) (= x (- 3)) (= y (- 4)) (= x (- 4)) (= y (- 5)) (= x (- 5)) (= y (- 6)) (= x (- 6)) (= y (- 7)) (= x (- 7)) (= y (- 8)) (= x (- 8)) (= y (- 9)) (= x (- 9)) (= x (- 10)) (= y (- 10)) (= x (- 11)) (= y (- 11))) (or (= x 0) (= x 2) (= y 0) (= y 1) (= y 2) (= y 3) (= y 4) (= x 4) (= x 3) (= x 5) (= x 7) (= x 6) (= x 8) (= x 10) (= x 1) (<= x 10) (>= y 6) (= y (- 1)) (= x (- 1)) (= y (- 2)) (= x (- 2)) (= y (- 3)) (= x (- 3)) (= y (- 4)) (= x (- 4)) (= y (- 5)) (= x (- 5)) (= y (- 6)) (= x (- 6)) (= y (- 7)) (= x (- 7)) (= y (- 8)) (= x (- 8)) (= y (- 9)) (= x (- 9))) (or (= x 0) (= x 2) (= y 0) (= y 1) (= x 4) (= x 3) (= x 5) (= x 7) (= x 6) (= x 8) (= x 1) (= x 9) (<= x 10) (>= y 3) (= y (- 1)) (= x (- 1)) (= y (- 2)) (= x (- 2)) (= y (- 3)) (= x (- 3)) (= y (- 4)) (= x (- 4)) (= y (- 5)) (= x (- 5)) (= y (- 6)) (= x (- 6)) (= y (- 7)) (= x (- 7)) (= y (- 8)) (= x (- 8))) (or (= x 0) (= x 2) (= y 0) (= y 1) (= y 2) (= y 3) (= y 4) (= y 5) (= y 6) (= y 7) (= x 4) (= x 3) (= x 5) (= x 7) (= x 6) (= x 8) (= x 10) (= x 1) (<= x 10) (= y (- 1)) (= x (- 1)) (= y (- 2)) (= x (- 2)) (= y (- 3)) (= x (- 3)) (= y (- 4)) (= x (- 4)) (= y (- 5)) (= x (- 5)) (= y (- 6)) (= x (- 6)) (= y (- 7)) (= x (- 7)) (= y (- 8)) (= x (- 8)) (= y (- 9)) (= x (- 9))) (or (= x 0) (= x 2) (= y 0) (= y 1) (= y 2) (= y 3) (= y 4) (= y 5) (= y 6) (= x 4) (= x 3) (= x 5) (= x 7) (= x 6) (= x 8) (= x 10) (= x 1) (<= x 10) (>= y 8) (= y (- 1)) (= x (- 1)) (= y (- 2)) (= x (- 2)) (= y (- 3)) (= x (- 3)) (= y (- 4)) (= x (- 4)) (= y (- 5)) (= x (- 5)) (= y (- 6)) (= x (- 6)) (= y (- 7)) (= x (- 7)) (= y (- 8)) (= x (- 8)) (= y (- 9)) (= x (- 9))) (or (= x 0) (= x 2) (= y 0) (= x 4) (= x 3) (= x 5) (= x 7) (= x 6) (= x 8) (= x 1) (= x 9) (<= x 10) (>= y 2) (= y (- 1)) (= x (- 1)) (= y (- 2)) (= x (- 2)) (= y (- 3)) (= x (- 3)) (= y (- 4)) (= x (- 4)) (= y (- 5)) (= x (- 5)) (= y (- 6)) (= x (- 6)) (= y (- 7)) (= x (- 7)) (= y (- 8)) (= x (- 8))) (or (= x 0) (= x 2) (= y 0) (= y 1) (= y 2) (= y 3) (= y 4) (= y 5) (= x 4) (= x 3) (= x 5) (= x 7) (= x 6) (= x 8) (= x 10) (= x 1) (<= x 10) (>= y 7) (= y (- 1)) (= x (- 1)) (= y (- 2)) (= x (- 2)) (= y (- 3)) (= x (- 3)) (= y (- 4)) (= x (- 4)) (= y (- 5)) (= x (- 5)) (= y (- 6)) (= x (- 6)) (= y (- 7)) (= x (- 7)) (= y (- 8)) (= x (- 8)) (= y (- 9)) (= x (- 9))) (or (= x 0) (= x 2) (= y 0) (= y 1) (= y 2) (= y 3) (= x 4) (= x 3) (= x 5) (= x 7) (= x 6) (= x 8) (= x 10) (= x 1) (<= x 10) (>= y 5) (= y (- 1)) (= x (- 1)) (= y (- 2)) (= x (- 2)) (= y (- 3)) (= x (- 3)) (= y (- 4)) (= x (- 4)) (= y (- 5)) (= x (- 5)) (= y (- 6)) (= x (- 6)) (= y (- 7)) (= x (- 7)) (= y (- 8)) (= x (- 8)) (= y (- 9)) (= x (- 9))) (or (>= x 1) (not (= x 0)) (not (= y 0))) (or (= x 1) (= y 0) (>= x 1))) [ x := (- x 1)] goto 0;if (and (or (= x 0) (= x 2) (= x 5) (= x 4) (= x 6) (= x 7) (= x 8) (<= x 10) (= x 3) (= x 9) (= y 1) (>= y 3) (= x (- 1)) (= y (- 1)) (= x (- 2)) (= y (- 2)) (= x (- 3)) (= x (- 4)) (= y (- 3)) (= x (- 5)) (= y (- 4)) (= x (- 6)) (= y (- 5)) (= x (- 7)) (= y (- 6)) (= x (- 8)) (= y (- 7)) (= x (- 9)) (= y (- 8)) (= x (- 10))) (or (= x 1) (= x 0) (= x 2) (= x 5) (= x 4) (= x 6) (= x 7) (= x 8) (<= x 10) (= x 3) (= y 0) (= y 2) (= y 3) (= y 1) (= x 10) (>= y 5) (= x (- 1)) (= y (- 1)) (= x (- 2)) (= y (- 2)) (= x (- 3)) (= x (- 4)) (= y (- 3)) (= x (- 5)) (= y (- 4)) (= x (- 6)) (= y (- 5)) (= x (- 7)) (= y (- 6)) (= x (- 8)) (= y (- 7)) (= x (- 9)) (= y (- 8)) (= x (- 10)) (= y (- 9)) (= x (- 11))) (or (= x 1) (= x 0) (= x 2) (= x 5) (= x 4) (= x 6) (= x 7) (= x 8) (<= x 10) (= x 3) (= y 0) (= y 2) (= y 1) (= x 10) (>= y 4) (= x (- 1)) (= y (- 1)) (= x (- 2)) (= y (- 2)) (= x (- 3)) (= x (- 4)) (= y (- 3)) (= x (- 5)) (= y (- 4)) (= x (- 6)) (= y (- 5)) (= x (- 7)) (= y (- 6)) (= x (- 8)) (= y (- 7)) (= x (- 9)) (= y (- 8)) (= x (- 10))) (or (= x 1) (= x 0) (= x 2) (= x 5) (= x 4) (= x 6) (= x 7) (= x 8) (<= x 10) (= y 0) (= y 2) (= y 3) (= y 4) (= y 1) (= x 10) (>= y 6) (= x (- 1)) (= y (- 1)) (= x (- 2)) (= y (- 2)) (= x (- 3)) (= x (- 4)) (= y (- 3)) (= x (- 5)) (= y (- 4)) (= x (- 6)) (= y (- 5)) (= x (- 7)) (= y (- 6)) (= x (- 8)) (= y (- 7)) (= x (- 9)) (= y (- 8)) (= x (- 10)) (= y (- 9)) (= x (- 11))) (or (= x 1) (= x 0) (= x 2) (= x 5) (= x 4) (= x 6) (= x 7) (= x 8) (<= x 10) (= x 3) (= y 0) (= y 2) (= y 3) (= y 4) (= y 1) (= y 5) (= x 10) (>= y 7) (= x (- 1)) (= y (- 1)) (= x (- 2)) (= y (- 2)) (= x (- 3)) (= x (- 4)) (= y (- 3)) (= x (- 5)) (= y (- 4)) (= x (- 6)) (= y (- 5)) (= x (- 7)) (= y (- 6)) (= x (- 8)) (= y (- 7)) (= x (- 9)) (= y (- 8)) (= x (- 10)) (= y (- 9)) (= x (- 11))) (or (= x 1) (= x 0) (= x 2) (= x 4) (= y 0) (= y 2) (= y 3) (= y 4) (= y 1) (= y 5) (= y 6) (= y 7) (= y 8) (= y 9) (<= y 10) (<= 4 x) (= x (- 1)) (= y (- 1)) (= x (- 2)) (= y (- 2)) (= x (- 3)) (= x (- 4)) (= y (- 3)) (= x (- 5)) (= y (- 4)) (= x (- 6)) (= y (- 5)) (= x (- 7)) (= y (- 6)) (= x (- 8)) (= y (- 7)) (= x (- 9)) (= y (- 8)) (= x (- 10)) (= y (- 9)) (= x (- 11))) (or (= x 1) (= x 0) (= x 2) (= x 5) (= x 3) (= y 0) (= y 2) (= y 3) (= y 4) (= y 1) (= y 5) (= y 6) (= y 7) (= y 8) (= y 9) (<= y 10) (<= 5 x) (= x (- 1)) (= y (- 1)) (= x (- 2)) (= y (- 2)) (= x (- 3)) (= x (- 4)) (= y (- 3)) (= x (- 5)) (= y (- 4)) (= x (- 6)) (= y (- 5)) (= x (- 7)) (= y (- 6)) (= x (- 8)) (= y (- 7)) (= x (- 9)) (= y (- 8)) (= x (- 10)) (= y (- 9)) (= x (- 11))) (or (= x 1) (= x 0) (= x 2) (= x 5) (= x 4) (= x 6) (= x 7) (= x 8) (= x 3) (= x 9) (= y 0) (= y 2) (= y 3) (= y 4) (= y 1) (= y 5) (= y 6) (= y 7) (= y 8) (= y 9) (<= y 10) (= x 11) (= x (- 1)) (= y (- 1)) (= x (- 2)) (= y (- 2)) (= x (- 3)) (= x (- 4)) (= y (- 3)) (= x (- 5)) (= y (- 4)) (= x (- 6)) (= y (- 5)) (= x (- 7)) (= y (- 6)) (= x (- 8)) (= y (- 7)) (= x (- 9)) (= y (- 8)) (= x (- 10)) (= y (- 9)) (= x (- 11))) (or (= x 1) (= x 0) (= x 2) (= x 5) (= x 4) (= x 7) (= x 3) (= y 0) (= y 2) (= y 3) (= y 4) (= y 1) (= y 5) (= y 6) (= y 7) (= y 8) (= y 9) (<= y 10) (<= 7 x) (= x (- 1)) (= y (- 1)) (= x (- 2)) (= y (- 2)) (= x (- 3)) (= x (- 4)) (= y (- 3)) (= x (- 5)) (= y (- 4)) (= x (- 6)) (= y (- 5)) (= x (- 7)) (= y (- 6)) (= x (- 8)) (= y (- 7)) (= x (- 9)) (= y (- 8)) (= x (- 10)) (= y (- 9)) (= x (- 11))) (or (= x 1) (= x 0) (= x 2) (= x 5) (= x 4) (= x 6) (= x 7) (= x 8) (= x 3) (= y 0) (= y 2) (= y 3) (= y 4) (= y 1) (= y 5) (= y 6) (= y 7) (= y 8) (= y 9) (<= y 10) (= x 10) (= x (- 1)) (= y (- 1)) (= x (- 2)) (= y (- 2)) (= x (- 3)) (= x (- 4)) (= y (- 3)) (= x (- 5)) (= y (- 4)) (= x (- 6)) (= y (- 5)) (= x (- 7)) (= y (- 6)) (= x (- 8)) (= y (- 7)) (= x (- 9)) (= y (- 8)) (= x (- 10)) (= y (- 9)) (= x (- 11))) (or (= x 3) (= y 0) (= y 2) (= y 3) (= y 4) (= y 5) (= y 6) (= y 7) (= y 8) (= y 9) (<= y 10) (<= 3 x) (= x (- 1)) (= y (- 1)) (= x (- 2)) (= y (- 2)) (= x (- 3)) (= x (- 4)) (= y (- 3)) (= x (- 5)) (= y (- 4)) (= x (- 6)) (= y (- 5)) (= x (- 7)) (= y (- 6)) (= x (- 8)) (= y (- 7)) (= x (- 9)) (= y (- 8)) (= x (- 10))) (or (= x 1) (= x 0) (= x 2) (= x 4) (= x 6) (= x 3) (= y 0) (= y 2) (= y 3) (= y 4) (= y 1) (= y 5) (= y 6) (= y 7) (= y 8) (= y 9) (<= y 10) (<= 6 x) (= x (- 1)) (= y (- 1)) (= x (- 2)) (= y (- 2)) (= x (- 3)) (= x (- 4)) (= y (- 3)) (= x (- 5)) (= y (- 4)) (= x (- 6)) (= y (- 5)) (= x (- 7)) (= y (- 6)) (= x (- 8)) (= y (- 7)) (= x (- 9)) (= y (- 8)) (= x (- 10)) (= y (- 9)) (= x (- 11))) (or (= x 1) (= x 0) (= x 2) (= x 5) (= x 4) (= x 6) (= x 8) (= x 3) (= y 0) (= y 2) (= y 3) (= y 4) (= y 1) (= y 5) (= y 6) (= y 7) (= y 8) (= y 9) (<= y 10) (<= 8 x) (= x (- 1)) (= y (- 1)) (= x (- 2)) (= y (- 2)) (= x (- 3)) (= x (- 4)) (= y (- 3)) (= x (- 5)) (= y (- 4)) (= x (- 6)) (= y (- 5)) (= x (- 7)) (= y (- 6)) (= x (- 8)) (= y (- 7)) (= x (- 9)) (= y (- 8)) (= x (- 10)) (= y (- 9)) (= x (- 11))) (or (= x 1) (= x 0) (= x 2) (= x 5) (= x 4) (= x 6) (= x 7) (= x 3) (= x 9) (= y 0) (= y 2) (= y 3) (= y 4) (= y 1) (= y 5) (= y 6) (= y 7) (= y 8) (= y 9) (<= y 10) (<= 9 x) (= x (- 1)) (= y (- 1)) (= x (- 2)) (= y (- 2)) (= x (- 3)) (= x (- 4)) (= y (- 3)) (= x (- 5)) (= y (- 4)) (= x (- 6)) (= y (- 5)) (= x (- 7)) (= y (- 6)) (= x (- 8)) (= y (- 7)) (= x (- 9)) (= y (- 8)) (= x (- 10)) (= y (- 9)) (= x (- 11))) (or (= x 1) (= x 0) (= x 2) (= x 5) (= x 4) (= x 6) (= x 7) (= x 8) (<= x 10) (= x 3) (= x 9) (>= y 2) (= x (- 1)) (= y (- 1)) (= x (- 2)) (= y (- 2)) (= x (- 3)) (= x (- 4)) (= y (- 3)) (= x (- 5)) (= y (- 4)) (= x (- 6)) (= y (- 5)) (= x (- 7)) (= y (- 6)) (= x (- 8)) (= y (- 7)) (= x (- 9))) (or (= x 1) (= x 0) (= x 2) (= x 5) (= x 4) (= x 6) (= x 8) (<= x 10) (= x 3) (= y 0) (= y 2) (= y 3) (= y 4) (= y 1) (= y 5) (= y 6) (= x (- 1)) (= y (- 1)) (= x (- 2)) (= y (- 2)) (= x (- 3)) (= x (- 4)) (= y (- 3)) (= x (- 5)) (= y (- 4)) (= x (- 6)) (= y (- 5)) (= x (- 7)) (= y (- 6)) (= x (- 8))) (>= y 1) (>= x 0)) [ y := (- y 1)] goto 0;if (and (or (= y 3) (= y 4) (= y 5) (= y 6) (= y 7) (= y 8) (= y 9) (= x 2) (= y 1) (<= y 10) (= y 0) (= x 1) (= x 3) (= x 5) (= x 4) (= x 7) (<= 7 x) (= x (- 1)) (= y (- 1)) (= x (- 2)) (= y (- 2)) (= x (- 3)) (= y (- 3)) (= x (- 4)) (= y (- 4)) (= x (- 5)) (= y (- 5)) (= x (- 6)) (= y (- 6)) (= x (- 7)) (= y (- 7)) (= x (- 8)) (= y (- 8)) (= x (- 9)) (= y (- 9)) (= x (- 10)) (= x (- 11)) (= y (- 10)) (= x (- 12)) (= y (- 11))) (or (not (= x 0)) (not (= y 0))) (or (= y 2) (= y 3) (= y 4) (= y 5) (= y 6) (= y 7) (= y 8) (= y 9) (= x 2) (= y 1) (<= y 10) (<= 2 x) (= x (- 1)) (= y (- 1)) (= x (- 2)) (= y (- 2)) (= x (- 3)) (= y (- 3)) (= x (- 4)) (= y (- 4)) (= x (- 5)) (= y (- 5)) (= x (- 6)) (= y (- 6)) (= x (- 7)) (= y (- 7)) (= x (- 8)) (= y (- 8)) (= x (- 9)) (= y (- 9)) (= x (- 10))) (or (= y 2) (= y 3) (= y 4) (= y 5) (= y 6) (= y 7) (= y 8) (= y 9) (= x 2) (= y 1) (<= y 10) (= y 0) (= x 1) (= x 3) (= x 5) (= x 4) (= x 7) (= x 0) (= x 6) (= x 9) (<= 9 x) (= x (- 1)) (= y (- 1)) (= x (- 2)) (= y (- 2)) (= x (- 3)) (= y (- 3)) (= x (- 4)) (= y (- 4)) (= x (- 5)) (= y (- 5)) (= x (- 6)) (= y (- 6)) (= x (- 7)) (= y (- 7)) (= x (- 8)) (= y (- 8)) (= x (- 9)) (= y (- 9)) (= x (- 10)) (= x (- 11)) (= y (- 10)) (= x (- 12)) (= y (- 11))) (or (= y 2) (= y 3) (= y 4) (= y 5) (= y 6) (= y 7) (= y 8) (= y 9) (= x 2) (= y 1) (<= y 10) (= y 0) (= x 1) (= x 4) (= x 0) (<= 4 x) (= x (- 1)) (= y (- 1)) (= x (- 2)) (= y (- 2)) (= x (- 3)) (= y (- 3)) (= x (- 4)) (= y (- 4)) (= x (- 5)) (= y (- 5)) (= x (- 6)) (= y (- 6)) (= x (- 7)) (= y (- 7)) (= x (- 8)) (= y (- 8)) (= x (- 9)) (= y (- 9)) (= x (- 10)) (= x (- 11)) (= y (- 10)) (= x (- 12)) (= y (- 11))) (or (= y 2) (= y 3) (= y 4) (= y 5) (= y 6) (= y 7) (= y 8) (= y 9) (= x 2) (= y 1) (<= y 10) (= y 0) (= x 1) (= x 3) (= x 5) (= x 4) (= x 7) (= x 0) (= x 6) (= x 9) (= x 8) (= x 11) (= x (- 1)) (= y (- 1)) (= x (- 2)) (= y (- 2)) (= x (- 3)) (= y (- 3)) (= x (- 4)) (= y (- 4)) (= x (- 5)) (= y (- 5)) (= x (- 6)) (= y (- 6)) (= x (- 7)) (= y (- 7)) (= x (- 8)) (= y (- 8)) (= x (- 9)) (= y (- 9)) (= x (- 10)) (= x (- 11)) (= y (- 10)) (= x (- 12)) (= y (- 11))) (or (= y 2) (= y 3) (= y 4) (= y 5) (= y 6) (= y 7) (= y 8) (= y 9) (= x 2) (= y 1) (= y 0) (= x 1) (= x 3) (= x 5) (= x 4) (= x 7) (= x 0) (= x 6) (= x 9) (= x 8) (= x 11) (>= y 11) (<= y 9) (<= x 9) (<= 11 x) (= x (- 1)) (= y (- 1)) (= x (- 2)) (= y (- 2)) (= x (- 3)) (= y (- 3)) (= x (- 4)) (= y (- 4)) (= x (- 5)) (= y (- 5)) (= x (- 6)) (= y (- 6)) (= x (- 7)) (= y (- 7)) (= x (- 8)) (= y (- 8)) (= x (- 9)) (= y (- 9)) (= x (- 10)) (= x (- 11)) (= y (- 10)) (= x (- 12)) (= y (- 11)) (= y (- 12))) (or (= y 2) (= y 3) (= y 4) (= y 5) (= y 6) (= y 7) (= y 8) (= y 9) (= x 2) (= y 1) (<= y 10) (= y 0) (= x 1) (= x 3) (= x 5) (= x 4) (= x 0) (= x 6) (= x 8) (<= 8 x) (= x (- 1)) (= y (- 1)) (= x (- 2)) (= y (- 2)) (= x (- 3)) (= y (- 3)) (= x (- 4)) (= y (- 4)) (= x (- 5)) (= y (- 5)) (= x (- 6)) (= y (- 6)) (= x (- 7)) (= y (- 7)) (= x (- 8)) (= y (- 8)) (= x (- 9)) (= y (- 9)) (= x (- 10)) (= x (- 11)) (= y (- 10)) (= x (- 12)) (= y (- 11))) (or (= y 2) (= y 3) (= y 4) (= y 5) (= y 6) (= y 7) (= y 8) (= y 9) (= x 2) (= y 1) (<= y 10) (= y 0) (= x 1) (= x 3) (= x 5) (= x 4) (= x 7) (= x 0) (= x 6) (= x 8) (= x 10) (<= 10 x) (= x (- 1)) (= y (- 1)) (= x (- 2)) (= y (- 2)) (= x (- 3)) (= y (- 3)) (= x (- 4)) (= y (- 4)) (= x (- 5)) (= y (- 5)) (= x (- 6)) (= y (- 6)) (= x (- 7)) (= y (- 7)) (= x (- 8)) (= y (- 8)) (= x (- 9)) (= y (- 9)) (= x (- 10)) (= x (- 11)) (= y (- 10)) (= x (- 12)) (= y (- 11))) (or (= y 2) (= y 3) (= y 4) (= y 5) (= y 6) (= y 7) (= y 8) (= y 9) (= x 2) (= y 1) (<= y 10) (= y 0) (= x 1) (= x 3) (= x 5) (= x 0) (<= 5 x) (= x (- 1)) (= y (- 1)) (= x (- 2)) (= y (- 2)) (= x (- 3)) (= y (- 3)) (= x (- 4)) (= y (- 4)) (= x (- 5)) (= y (- 5)) (= x (- 6)) (= y (- 6)) (= x (- 7)) (= y (- 7)) (= x (- 8)) (= y (- 8)) (= x (- 9)) (= y (- 9)) (= x (- 10)) (= x (- 11)) (= y (- 10)) (= x (- 12)) (= y (- 11))) (or (= y 2) (= y 3) (= y 4) (= y 5) (= y 6) (= y 7) (= y 8) (= y 9) (= x 2) (= y 1) (<= y 10) (= y 0) (= x 1) (= x 3) (= x 4) (= x 0) (= x 6) (<= 6 x) (= x (- 1)) (= y (- 1)) (= x (- 2)) (= y (- 2)) (= x (- 3)) (= y (- 3)) (= x (- 4)) (= y (- 4)) (= x (- 5)) (= y (- 5)) (= x (- 6)) (= y (- 6)) (= x (- 7)) (= y (- 7)) (= x (- 8)) (= y (- 8)) (= x (- 9)) (= y (- 9)) (= x (- 10)) (= x (- 11)) (= y (- 10)) (= x (- 12)) (= y (- 11))) (or (= y 2) (= y 3) (= y 4) (= y 5) (= y 6) (= y 7) (= y 8) (= y 9) (= y 1) (<= y 10) (= x 1) (= x 3) (= x 0) (<= 3 x) (= x (- 1)) (= y (- 1)) (= x (- 2)) (= y (- 2)) (= x (- 3)) (= y (- 3)) (= x (- 4)) (= y (- 4)) (= x (- 5)) (= y (- 5)) (= x (- 6)) (= y (- 6)) (= x (- 7)) (= y (- 7)) (= x (- 8)) (= y (- 8)) (= x (- 9)) (= y (- 9)) (= x (- 10)) (= x (- 11)) (= y (- 10))) (>= x 0) (<= x 10) (>= y 0)) [] goto 0;if (and (or (= y 2) (= y 3) (= x 1) (= x 2) (= x 4) (= y 4) (= x 3) (= x 5) (= x 6) (= x 7) (= y 0) (= y 5) (= y 6) (= y 7) (= y 8) (= x 0) (= x 9) (<= x 9) (= x (- 1)) (= x (- 2)) (= y (- 1)) (= x (- 3)) (= y (- 2)) (= x (- 4)) (= y (- 3)) (= x (- 5)) (= y (- 4)) (= x (- 6)) (= y (- 5)) (= x (- 7)) (= y (- 6)) (= x (- 8)) (= y (- 7)) (= x (- 9)) (= y (- 8)) (= x (- 10)) (= y (- 9)) (= x (- 11)) (= y (- 10)) (= x (- 12))) (or (= y 1) (= y 2) (= y 3) (= x 1) (= y 4) (= y 0) (= y 5) (= y 6) (= y 7) (= y 8) (= y 9) (<= y 10) (<= 1 x) (= x (- 1)) (= x (- 2)) (= y (- 1)) (= x (- 3)) (= y (- 2)) (= x (- 4)) (= y (- 3)) (= x (- 5)) (= y (- 4)) (= x (- 6)) (= y (- 5)) (= x (- 7)) (= y (- 6)) (= x (- 8)) (= y (- 7)) (= x (- 9)) (= y (- 8)) (= x (- 10)) (= y (- 9)) (= x (- 11))) (or (= y 1) (= y 2) (= y 3) (= x 1) (= x 2) (= x 4) (= y 4) (= x 3) (= x 5) (= x 6) (= x 7) (= x 8) (= y 0) (= y 5) (= y 6) (= y 7) (= y 8) (= y 9) (<= y 10) (= x 10) (= x (- 1)) (= x (- 2)) (= y (- 1)) (= x (- 3)) (= y (- 2)) (= x (- 4)) (= y (- 3)) (= x (- 5)) (= y (- 4)) (= x (- 6)) (= y (- 5)) (= x (- 7)) (= y (- 6)) (= x (- 8)) (= y (- 7)) (= x (- 9)) (= y (- 8)) (= x (- 10)) (= y (- 9)) (= x (- 11)) (= y (- 10)) (= x (- 12)) (= y (- 11)) (= x (- 13))) (or (= y 1) (= y 2) (= y 3) (= x 1) (= x 2) (= x 4) (= y 4) (= x 3) (= x 5) (= x 6) (= x 7) (= x 8) (= y 0) (= y 5) (= y 6) (= y 7) (= y 8) (= y 9) (= x 10) (= x 0) (>= y 11) (<= y 9) (<= x 8) (<= 10 x) (= x (- 1)) (= x (- 2)) (= y (- 1)) (= x (- 3)) (= y (- 2)) (= x (- 4)) (= y (- 3)) (= x (- 5)) (= y (- 4)) (= x (- 6)) (= y (- 5)) (= x (- 7)) (= y (- 6)) (= x (- 8)) (= y (- 7)) (= x (- 9)) (= y (- 8)) (= x (- 10)) (= y (- 9)) (= x (- 11)) (= y (- 10)) (= x (- 12)) (= y (- 11)) (= x (- 13)) (= y (- 12))) (or (= y 1) (= y 2) (= y 3) (= x 1) (= y 4) (= x 3) (= y 0) (= y 5) (= y 6) (= y 7) (= y 8) (= y 9) (<= y 10) (= x 0) (<= 3 x) (= x (- 1)) (= x (- 2)) (= y (- 1)) (= x (- 3)) (= y (- 2)) (= x (- 4)) (= y (- 3)) (= x (- 5)) (= y (- 4)) (= x (- 6)) (= y (- 5)) (= x (- 7)) (= y (- 6)) (= x (- 8)) (= y (- 7)) (= x (- 9)) (= y (- 8)) (= x (- 10)) (= y (- 9)) (= x (- 11)) (= y (- 10)) (= x (- 12)) (= y (- 11)) (= x (- 13))) (or (= y 1) (= y 2) (= y 3) (= x 1) (= x 2) (= x 4) (= y 4) (= x 3) (= x 5) (= x 6) (= x 7) (= y 0) (= y 5) (= y 6) (= y 7) (= y 8) (= y 9) (<= y 10) (= x 0) (= x 9) (<= 9 x) (= x (- 1)) (= x (- 2)) (= y (- 1)) (= x (- 3)) (= y (- 2)) (= x (- 4)) (= y (- 3)) (= x (- 5)) (= y (- 4)) (= x (- 6)) (= y (- 5)) (= x (- 7)) (= y (- 6)) (= x (- 8)) (= y (- 7)) (= x (- 9)) (= y (- 8)) (= x (- 10)) (= y (- 9)) (= x (- 11)) (= y (- 10)) (= x (- 12)) (= y (- 11)) (= x (- 13))) (or (= y 1) (= y 2) (= y 3) (= x 1) (= x 2) (= y 4) (= x 3) (= x 5) (= y 0) (= y 5) (= y 6) (= y 7) (= y 8) (= y 9) (<= y 10) (= x 0) (<= 5 x) (= x (- 1)) (= x (- 2)) (= y (- 1)) (= x (- 3)) (= y (- 2)) (= x (- 4)) (= y (- 3)) (= x (- 5)) (= y (- 4)) (= x (- 6)) (= y (- 5)) (= x (- 7)) (= y (- 6)) (= x (- 8)) (= y (- 7)) (= x (- 9)) (= y (- 8)) (= x (- 10)) (= y (- 9)) (= x (- 11)) (= y (- 10)) (= x (- 12)) (= y (- 11)) (= x (- 13))) (or (= y 1) (= y 2) (= y 3) (= x 1) (= x 2) (= x 4) (= y 4) (= x 3) (= x 5) (= x 7) (= y 0) (= y 5) (= y 6) (= y 7) (= y 8) (= y 9) (<= y 10) (= x 0) (<= 7 x) (= x (- 1)) (= x (- 2)) (= y (- 1)) (= x (- 3)) (= y (- 2)) (= x (- 4)) (= y (- 3)) (= x (- 5)) (= y (- 4)) (= x (- 6)) (= y (- 5)) (= x (- 7)) (= y (- 6)) (= x (- 8)) (= y (- 7)) (= x (- 9)) (= y (- 8)) (= x (- 10)) (= y (- 9)) (= x (- 11)) (= y (- 10)) (= x (- 12)) (= y (- 11)) (= x (- 13))) (or (= y 1) (= y 2) (= y 3) (= x 1) (= x 2) (= x 4) (= y 4) (= x 3) (= x 6) (= y 0) (= y 5) (= y 6) (= y 7) (= y 8) (= y 9) (<= y 10) (= x 0) (<= 6 x) (= x (- 1)) (= x (- 2)) (= y (- 1)) (= x (- 3)) (= y (- 2)) (= x (- 4)) (= y (- 3)) (= x (- 5)) (= y (- 4)) (= x (- 6)) (= y (- 5)) (= x (- 7)) (= y (- 6)) (= x (- 8)) (= y (- 7)) (= x (- 9)) (= y (- 8)) (= x (- 10)) (= y (- 9)) (= x (- 11)) (= y (- 10)) (= x (- 12)) (= y (- 11)) (= x (- 13))) (or (= y 1) (= y 2) (= y 3) (= x 1) (= x 2) (= x 4) (= y 4) (= x 3) (= x 5) (= x 6) (= x 8) (= y 0) (= y 5) (= y 6) (= y 7) (= y 8) (= y 9) (<= y 10) (= x 0) (<= 8 x) (= x (- 1)) (= x (- 2)) (= y (- 1)) (= x (- 3)) (= y (- 2)) (= x (- 4)) (= y (- 3)) (= x (- 5)) (= y (- 4)) (= x (- 6)) (= y (- 5)) (= x (- 7)) (= y (- 6)) (= x (- 8)) (= y (- 7)) (= x (- 9)) (= y (- 8)) (= x (- 10)) (= y (- 9)) (= x (- 11)) (= y (- 10)) (= x (- 12)) (= y (- 11)) (= x (- 13))) (or (= y 1) (= y 2) (= y 3) (= x 1) (= x 2) (= x 4) (= y 4) (= y 0) (= y 5) (= y 6) (= y 7) (= y 8) (= y 9) (<= y 10) (= x 0) (<= 4 x) (= x (- 1)) (= x (- 2)) (= y (- 1)) (= x (- 3)) (= y (- 2)) (= x (- 4)) (= y (- 3)) (= x (- 5)) (= y (- 4)) (= x (- 6)) (= y (- 5)) (= x (- 7)) (= y (- 6)) (= x (- 8)) (= y (- 7)) (= x (- 9)) (= y (- 8)) (= x (- 10)) (= y (- 9)) (= x (- 11)) (= y (- 10)) (= x (- 12)) (= y (- 11)) (= x (- 13))) (or (= x 1) (= x 2) (= x 4) (= x 3) (= x 5) (= x 6) (= x 7) (= x 8) (= y 0) (= x 0) (<= x 9) (>= y 2) (= x (- 1)) (= x (- 2)) (= y (- 1)) (= x (- 3)) (= y (- 2)) (= x (- 4)) (= y (- 3)) (= x (- 5)) (= y (- 4)) (= x (- 6)) (= y (- 5)) (= x (- 7)) (= y (- 6)) (= x (- 8)) (= y (- 7)) (= x (- 9)) (= y (- 8)) (= x (- 10)) (= y (- 9)) (= x (- 11))) (or (= y 1) (= y 2) (= y 3) (= x 2) (= y 4) (= y 0) (= y 5) (= y 6) (= y 7) (= y 8) (= y 9) (<= y 10) (= x 0) (<= 2 x) (= x (- 1)) (= x (- 2)) (= y (- 1)) (= x (- 3)) (= y (- 2)) (= x (- 4)) (= y (- 3)) (= x (- 5)) (= y (- 4)) (= x (- 6)) (= y (- 5)) (= x (- 7)) (= y (- 6)) (= x (- 8)) (= y (- 7)) (= x (- 9)) (= y (- 8)) (= x (- 10)) (= y (- 9)) (= x (- 11)) (= y (- 10)) (= x (- 12))) (or (= y 1) (= y 2) (= y 3) (= x 1) (= x 2) (= x 4) (= y 4) (= x 3) (= x 5) (= x 6) (= x 7) (= y 0) (= y 5) (= y 6) (= x 0) (= x 9) (<= x 9) (>= y 8) (= x (- 1)) (= x (- 2)) (= y (- 1)) (= x (- 3)) (= y (- 2)) (= x (- 4)) (= y (- 3)) (= x (- 5)) (= y (- 4)) (= x (- 6)) (= y (- 5)) (= x (- 7)) (= y (- 6)) (= x (- 8)) (= y (- 7)) (= x (- 9)) (= y (- 8)) (= x (- 10)) (= y (- 9)) (= x (- 11)) (= y (- 10)) (= x (- 12))) (or (= y 1) (= y 2) (= y 3) (= x 1) (= x 2) (= x 4) (= y 4) (= x 3) (= x 5) (= x 6) (= x 7) (= y 0) (= y 5) (= x 0) (= x 9) (<= x 9) (>= y 7) (= x (- 1)) (= x (- 2)) (= y (- 1)) (= x (- 3)) (= y (- 2)) (= x (- 4)) (= y (- 3)) (= x (- 5)) (= y (- 4)) (= x (- 6)) (= y (- 5)) (= x (- 7)) (= y (- 6)) (= x (- 8)) (= y (- 7)) (= x (- 9)) (= y (- 8)) (= x (- 10)) (= y (- 9)) (= x (- 11)) (= y (- 10)) (= x (- 12))) (or (= y 1) (= y 2) (= x 1) (= x 2) (= x 4) (= x 3) (= x 5) (= x 6) (= x 7) (= y 0) (= x 0) (= x 9) (<= x 9) (>= y 4) (= x (- 1)) (= x (- 2)) (= y (- 1)) (= x (- 3)) (= y (- 2)) (= x (- 4)) (= y (- 3)) (= x (- 5)) (= y (- 4)) (= x (- 6)) (= y (- 5)) (= x (- 7)) (= y (- 6)) (= x (- 8)) (= y (- 7)) (= x (- 9)) (= y (- 8)) (= x (- 10)) (= y (- 9)) (= x (- 11)) (= y (- 10)) (= x (- 12))) (or (= y 1) (= y 2) (= y 3) (= x 1) (= x 2) (= x 4) (= x 3) (= x 5) (= x 6) (= x 7) (= y 0) (= x 0) (= x 9) (<= x 9) (>= y 5) (= x (- 1)) (= x (- 2)) (= y (- 1)) (= x (- 3)) (= y (- 2)) (= x (- 4)) (= y (- 3)) (= x (- 5)) (= y (- 4)) (= x (- 6)) (= y (- 5)) (= x (- 7)) (= y (- 6)) (= x (- 8)) (= y (- 7)) (= x (- 9)) (= y (- 8)) (= x (- 10)) (= y (- 9)) (= x (- 11)) (= y (- 10)) (= x (- 12))) (or (= y 1) (= y 2) (= y 3) (= x 1) (= x 2) (= x 4) (= y 4) (= x 3) (= x 5) (= x 6) (= x 7) (= y 0) (= x 0) (= x 9) (<= x 9) (>= y 6) (= x (- 1)) (= x (- 2)) (= y (- 1)) (= x (- 3)) (= y (- 2)) (= x (- 4)) (= y (- 3)) (= x (- 5)) (= y (- 4)) (= x (- 6)) (= y (- 5)) (= x (- 7)) (= y (- 6)) (= x (- 8)) (= y (- 7)) (= x (- 9)) (= y (- 8)) (= x (- 10)) (= y (- 9)) (= x (- 11)) (= y (- 10)) (= x (- 12))) (or (= y 1) (= y 2) (= y 3) (= x 1) (= x 2) (= x 4) (= y 4) (= x 3) (= x 5) (= x 6) (= x 7) (= y 0) (= y 5) (= y 6) (= y 7) (= x 0) (= x 9) (<= x 9) (>= y 9) (= x (- 1)) (= x (- 2)) (= y (- 1)) (= x (- 3)) (= y (- 2)) (= x (- 4)) (= y (- 3)) (= x (- 5)) (= y (- 4)) (= x (- 6)) (= y (- 5)) (= x (- 7)) (= y (- 6)) (= x (- 8)) (= y (- 7)) (= x (- 9)) (= y (- 8)) (= x (- 10)) (= y (- 9)) (= x (- 11)) (= y (- 10)) (= x (- 12))) (or (= y 1) (= x 1) (= x 2) (= x 4) (= x 3) (= x 5) (= x 6) (= x 7) (= x 8) (= y 0) (= x 0) (= x 9) (<= x 9) (>= y 3) (= x (- 1)) (= x (- 2)) (= y (- 1)) (= x (- 3)) (= y (- 2)) (= x (- 4)) (= y (- 3)) (= x (- 5)) (= y (- 4)) (= x (- 6)) (= y (- 5)) (= x (- 7)) (= y (- 6)) (= x (- 8)) (= y (- 7)) (= x (- 9)) (= y (- 8)) (= x (- 10)) (= y (- 9)) (= x (- 11))) (or (not (= x 0)) (not (= y 0))) (or (= y 1) (= y 2) (= y 3) (= x 1) (= x 2) (= x 4) (= y 4) (= x 3) (= x 5) (= x 6) (= x 7) (= x 8) (= x 0) (= x 9) (<= x 9) (>= y 6) (>= y 3) (= x (- 1)) (= x (- 2)) (= y (- 1)) (= x (- 3)) (= y (- 2)) (= x (- 4)) (= y (- 3)) (= x (- 5)) (= y (- 4)) (= x (- 6)) (= y (- 5)) (= x (- 7)) (= y (- 6)) (= x (- 8)) (= y (- 7)) (= x (- 9)) (= y (- 8)) (= x (- 10)) (= y (- 9)) (= x (- 11)) (= y (- 10)) (= x (- 12))) (>= y 0) (>= x 0)) [ x := (+ x 1)] goto 0;if (and (or (= x 1) (= x 4) (= x 3) (= x 6) (= x 5) (= x 8) (= y 1) (= y 2) (= y 3) (= y 4) (= y 5) (= y 6) (= y 7) (= y 8) (<= y 9) (<= 8 x) (<= 1 x) (= y (- 1)) (= x (- 1)) (= y (- 2)) (= x (- 2)) (= y (- 3)) (= x (- 3)) (= y (- 4)) (= x (- 4)) (= y (- 5)) (= x (- 5)) (= y (- 6)) (= x (- 6)) (= y (- 7)) (= x (- 7)) (= y (- 8)) (= x (- 8)) (= y (- 9)) (= x (- 9)) (= y (- 10)) (= x (- 10)) (= y (- 11)) (= x (- 11)) (= x (- 12)) (= y (- 12))) (or (not (= x 0)) (not (= y 0))) (or (= x 2) (= x 1) (= x 4) (= x 3) (= x 6) (= x 5) (= x 8) (= x 0) (= x 7) (= x 9) (<= x 10) (>= y 1) (= y (- 1)) (= x (- 1)) (= y (- 2)) (= x (- 2)) (= y (- 3)) (= x (- 3)) (= y (- 4)) (= x (- 4)) (= y (- 5)) (= x (- 5)) (= y (- 6)) (= x (- 6)) (= y (- 7)) (= x (- 7)) (= y (- 8)) (= x (- 8)) (= y (- 9)) (= x (- 9)) (= y (- 10)) (= x (- 10))) (or (= x 2) (= x 1) (= x 4) (= x 3) (= x 6) (= x 5) (= x 8) (= y 1) (= y 2) (= y 0) (= x 0) (= x 7) (<= x 10) (= x 10) (>= y 4) (= y (- 1)) (= x (- 1)) (= y (- 2)) (= x (- 2)) (= y (- 3)) (= x (- 3)) (= y (- 4)) (= x (- 4)) (= y (- 5)) (= x (- 5)) (= y (- 6)) (= x (- 6)) (= y (- 7)) (= x (- 7)) (= y (- 8)) (= x (- 8)) (= y (- 9)) (= x (- 9)) (= y (- 10)) (= x (- 10)) (= y (- 11)) (= x (- 11))) (or (= x 2) (= x 1) (= x 4) (= x 3) (= x 6) (= x 5) (= x 8) (= y 1) (= y 2) (= y 3) (= y 4) (= y 5) (= y 6) (= y 7) (= y 8) (= y 0) (= x 0) (= x 7) (= x 9) (= x 11) (>= y 10) (<= y 8) (<= x 9) (<= 11 x) (= y (- 1)) (= x (- 1)) (= y (- 2)) (= x (- 2)) (= y (- 3)) (= x (- 3)) (= y (- 4)) (= x (- 4)) (= y (- 5)) (= x (- 5)) (= y (- 6)) (= x (- 6)) (= y (- 7)) (= x (- 7)) (= y (- 8)) (= x (- 8)) (= y (- 9)) (= x (- 9)) (= y (- 10)) (= x (- 10)) (= y (- 11)) (= x (- 11)) (= x (- 12)) (= y (- 12)) (= y (- 13))) (or (= x 2) (= x 1) (= x 4) (= x 3) (= x 6) (= x 5) (= x 8) (= y 1) (= y 0) (= x 0) (= x 7) (<= x 10) (= x 10) (>= y 3) (= y (- 1)) (= x (- 1)) (= y (- 2)) (= x (- 2)) (= y (- 3)) (= x (- 3)) (= y (- 4)) (= x (- 4)) (= y (- 5)) (= x (- 5)) (= y (- 6)) (= x (- 6)) (= y (- 7)) (= x (- 7)) (= y (- 8)) (= x (- 8)) (= y (- 9)) (= x (- 9)) (= y (- 10)) (= x (- 10)) (= y (- 11)) (= x (- 11))) (or (= x 2) (= x 1) (= x 4) (= x 3) (= x 6) (= x 5) (= x 8) (= y 1) (= y 2) (= y 3) (= y 0) (= x 0) (= x 7) (<= x 10) (= x 10) (>= y 5) (= y (- 1)) (= x (- 1)) (= y (- 2)) (= x (- 2)) (= y (- 3)) (= x (- 3)) (= y (- 4)) (= x (- 4)) (= y (- 5)) (= x (- 5)) (= y (- 6)) (= x (- 6)) (= y (- 7)) (= x (- 7)) (= y (- 8)) (= x (- 8)) (= y (- 9)) (= x (- 9)) (= y (- 10)) (= x (- 10)) (= y (- 11)) (= x (- 11))) (or (= x 2) (= x 1) (= x 4) (= x 3) (= x 6) (= x 5) (= x 8) (= y 1) (= y 2) (= y 3) (= y 4) (= y 0) (= x 0) (= x 7) (<= x 10) (= x 10) (>= y 6) (= y (- 1)) (= x (- 1)) (= y (- 2)) (= x (- 2)) (= y (- 3)) (= x (- 3)) (= y (- 4)) (= x (- 4)) (= y (- 5)) (= x (- 5)) (= y (- 6)) (= x (- 6)) (= y (- 7)) (= x (- 7)) (= y (- 8)) (= x (- 8)) (= y (- 9)) (= x (- 9)) (= y (- 10)) (= x (- 10)) (= y (- 11)) (= x (- 11))) (or (= x 2) (= x 1) (= x 4) (= x 3) (= x 6) (= x 5) (= y 1) (= y 2) (= y 3) (= y 4) (= y 5) (= y 6) (= y 7) (= y 8) (<= y 9) (= y 0) (= x 0) (= x 7) (= x 9) (<= 9 x) (= y (- 1)) (= x (- 1)) (= y (- 2)) (= x (- 2)) (= y (- 3)) (= x (- 3)) (= y (- 4)) (= x (- 4)) (= y (- 5)) (= x (- 5)) (= y (- 6)) (= x (- 6)) (= y (- 7)) (= x (- 7)) (= y (- 8)) (= x (- 8)) (= y (- 9)) (= x (- 9)) (= y (- 10)) (= x (- 10)) (= y (- 11)) (= x (- 11)) (= x (- 12)) (= y (- 12))) (or (= x 2) (= x 1) (= x 4) (= y 1) (= y 2) (= y 3) (= y 4) (= y 5) (= y 6) (= y 7) (= y 8) (<= y 9) (= y 0) (= x 0) (<= 4 x) (= y (- 1)) (= x (- 1)) (= y (- 2)) (= x (- 2)) (= y (- 3)) (= x (- 3)) (= y (- 4)) (= x (- 4)) (= y (- 5)) (= x (- 5)) (= y (- 6)) (= x (- 6)) (= y (- 7)) (= x (- 7)) (= y (- 8)) (= x (- 8)) (= y (- 9)) (= x (- 9)) (= y (- 10)) (= x (- 10)) (= y (- 11)) (= x (- 11)) (= x (- 12)) (= y (- 12))) (or (= x 2) (= x 1) (= x 4) (= x 3) (= x 6) (= x 5) (= x 8) (= y 1) (= y 2) (= y 3) (= y 4) (= y 5) (= y 6) (= y 7) (= y 8) (<= y 9) (= y 0) (= x 0) (= x 7) (= x 9) (= x 11) (= y (- 1)) (= x (- 1)) (= y (- 2)) (= x (- 2)) (= y (- 3)) (= x (- 3)) (= y (- 4)) (= x (- 4)) (= y (- 5)) (= x (- 5)) (= y (- 6)) (= x (- 6)) (= y (- 7)) (= x (- 7)) (= y (- 8)) (= x (- 8)) (= y (- 9)) (= x (- 9)) (= y (- 10)) (= x (- 10)) (= y (- 11)) (= x (- 11)) (= x (- 12)) (= y (- 12))) (or (= x 1) (= x 3) (= y 1) (= y 2) (= y 3) (= y 4) (= y 5) (= y 6) (= y 7) (= y 8) (<= y 9) (= y 0) (= x 0) (<= 3 x) (= y (- 1)) (= x (- 1)) (= y (- 2)) (= x (- 2)) (= y (- 3)) (= x (- 3)) (= y (- 4)) (= x (- 4)) (= y (- 5)) (= x (- 5)) (= y (- 6)) (= x (- 6)) (= y (- 7)) (= x (- 7)) (= y (- 8)) (= x (- 8)) (= y (- 9)) (= x (- 9)) (= y (- 10)) (= x (- 10)) (= y (- 11)) (= x (- 11))) (or (= x 2) (= x 1) (= x 4) (= x 3) (= x 6) (= x 5) (= x 8) (= y 1) (= y 2) (= y 3) (= y 4) (= y 5) (= y 6) (= y 7) (= y 8) (<= y 9) (<= 8 x) (= y 0) (= x 0) (= y (- 1)) (= x (- 1)) (= y (- 2)) (= x (- 2)) (= y (- 3)) (= x (- 3)) (= y (- 4)) (= x (- 4)) (= y (- 5)) (= x (- 5)) (= y (- 6)) (= x (- 6)) (= y (- 7)) (= x (- 7)) (= y (- 8)) (= x (- 8)) (= y (- 9)) (= x (- 9)) (= y (- 10)) (= x (- 10)) (= y (- 11)) (= x (- 11)) (= x (- 12)) (= y (- 12))) (or (= x 2) (= y 1) (= y 2) (= y 3) (= y 4) (= y 5) (= y 6) (= y 7) (= y 8) (<= y 9) (= y 0) (= x 0) (<= 2 x) (= y (- 1)) (= x (- 1)) (= y (- 2)) (= x (- 2)) (= y (- 3)) (= x (- 3)) (= y (- 4)) (= x (- 4)) (= y (- 5)) (= x (- 5)) (= y (- 6)) (= x (- 6)) (= y (- 7)) (= x (- 7)) (= y (- 8)) (= x (- 8)) (= y (- 9)) (= x (- 9)) (= y (- 10)) (= x (- 10))) (or (= x 2) (= x 1) (= x 4) (= x 3) (= x 6) (= x 5) (= x 8) (= y 0) (= x 0) (= x 7) (<= x 10) (= x 10) (>= y 2) (= y (- 1)) (= x (- 1)) (= y (- 2)) (= x (- 2)) (= y (- 3)) (= x (- 3)) (= y (- 4)) (= x (- 4)) (= y (- 5)) (= x (- 5)) (= y (- 6)) (= x (- 6)) (= y (- 7)) (= x (- 7)) (= y (- 8)) (= x (- 8)) (= y (- 9)) (= x (- 9)) (= y (- 10)) (= x (- 10))) (or (= x 2) (= x 1) (= x 4) (= x 3) (= x 6) (= x 5) (= x 8) (= y 1) (= y 2) (= y 3) (= y 4) (= y 5) (= y 6) (= y 7) (= y 8) (<= y 9) (= y 0) (= x 0) (= x 7) (= x 10) (<= 10 x) (= y (- 1)) (= x (- 1)) (= y (- 2)) (= x (- 2)) (= y (- 3)) (= x (- 3)) (= y (- 4)) (= x (- 4)) (= y (- 5)) (= x (- 5)) (= y (- 6)) (= x (- 6)) (= y (- 7)) (= x (- 7)) (= y (- 8)) (= x (- 8)) (= y (- 9)) (= x (- 9)) (= y (- 10)) (= x (- 10)) (= y (- 11)) (= x (- 11)) (= x (- 12)) (= y (- 12))) (or (= x 2) (= x 1) (= x 4) (= x 3) (= x 6) (= x 5) (= x 8) (= y 1) (= y 2) (= y 3) (= y 4) (= y 5) (= y 0) (= x 0) (<= x 10) (= y (- 1)) (= x (- 1)) (= y (- 2)) (= x (- 2)) (= y (- 3)) (= x (- 3)) (= y (- 4)) (= x (- 4)) (= y (- 5)) (= x (- 5)) (= y (- 6)) (= x (- 6)) (= y (- 7)) (= x (- 7)) (= y (- 8)) (= x (- 8)) (= y (- 9)) (= x (- 9))) (or (= x 2) (= x 1) (= x 3) (= x 5) (= y 1) (= y 2) (= y 3) (= y 4) (= y 5) (= y 6) (= y 7) (= y 8) (<= y 9) (= y 0) (= x 0) (<= 5 x) (= y (- 1)) (= x (- 1)) (= y (- 2)) (= x (- 2)) (= y (- 3)) (= x (- 3)) (= y (- 4)) (= x (- 4)) (= y (- 5)) (= x (- 5)) (= y (- 6)) (= x (- 6)) (= y (- 7)) (= x (- 7)) (= y (- 8)) (= x (- 8)) (= y (- 9)) (= x (- 9)) (= y (- 10)) (= x (- 10)) (= y (- 11)) (= x (- 11)) (= x (- 12)) (= y (- 12))) (or (= x 2) (= x 1) (= x 4) (= x 3) (= x 5) (= y 1) (= y 2) (= y 3) (= y 4) (= y 5) (= y 6) (= y 7) (= y 8) (<= y 9) (= y 0) (= x 0) (= x 7) (<= 7 x) (= y (- 1)) (= x (- 1)) (= y (- 2)) (= x (- 2)) (= y (- 3)) (= x (- 3)) (= y (- 4)) (= x (- 4)) (= y (- 5)) (= x (- 5)) (= y (- 6)) (= x (- 6)) (= y (- 7)) (= x (- 7)) (= y (- 8)) (= x (- 8)) (= y (- 9)) (= x (- 9)) (= y (- 10)) (= x (- 10)) (= y (- 11)) (= x (- 11)) (= x (- 12)) (= y (- 12))) (or (= x 2) (= x 1) (= x 4) (= x 3) (= x 6) (= y 1) (= y 2) (= y 3) (= y 4) (= y 5) (= y 6) (= y 7) (= y 8) (<= y 9) (= y 0) (= x 0) (<= 6 x) (= y (- 1)) (= x (- 1)) (= y (- 2)) (= x (- 2)) (= y (- 3)) (= x (- 3)) (= y (- 4)) (= x (- 4)) (= y (- 5)) (= x (- 5)) (= y (- 6)) (= x (- 6)) (= y (- 7)) (= x (- 7)) (= y (- 8)) (= x (- 8)) (= y (- 9)) (= x (- 9)) (= y (- 10)) (= x (- 10)) (= y (- 11)) (= x (- 11)) (= x (- 12)) (= y (- 12))) (>= x 0) (>= y 0)) [ y := (+ y 1)] goto 0;otherwise abort() };
1: read  y x; case {if true [] goto 1;otherwise abort() };
2: abort();
3: read  y x; case {if (or (not (<= 0 env_in_x)) (not (<= env_in_x 10)) (not (<= 0 env_in_y)) (not (<= env_in_y 10))) [] goto 1;if (and (>= env_in_x 0) (<= env_in_x 10) (>= env_in_y 0) (<= env_in_y 10)) [ x := env_in_x y := env_in_y] goto 0;otherwise abort() };
Sucessfull Accelerations: 0

Benchmark: /home/luca/git/sweap/scripts/../examples/benchmarks/rpgsolve/finite/robot-grid-reach-2d-50.rpg
Runtime: 600068ms
Result: 
Sucessfull Accelerations: 0

Benchmark: /home/luca/git/sweap/scripts/../examples/benchmarks/rpgsolve/finite/robot-grid-reach-2d-5.rpg
Runtime: 3774ms
Result: Realizable
read y x;
goto 3;
0: read  y x; case {if (and (= y 0) (= x 0)) [] goto 1;if (and (or (= x 2) (= x 1) (= x 3) (= x 4) (<= x 5) (= y 0) (>= y 2) (= y (- 1)) (= x (- 1)) (= y (- 2)) (= x (- 2)) (= y (- 3)) (= x (- 3))) (or (= x 2) (= x 1) (= x 3) (<= x 5) (= y 0) (= x 0) (= y 1) (= x 5) (= y (- 1)) (= x (- 1)) (= y (- 2)) (= x (- 2)) (= y (- 3)) (= x (- 3))) (or (= x 2) (= x 1) (= x 4) (= y 0) (= x 0) (= y 1) (= y 2) (<= y 5) (= y (- 1)) (= x (- 1)) (= y (- 2)) (= x (- 2)) (= y (- 3)) (= x (- 3))) (or (= x 1) (= y 0) (>= x 1)) (or (= x 2) (= x 1) (= x 3) (= y 0) (= x 0) (= y 1) (= y 2) (<= y 5) (= y 3) (= y 4) (= x 5) (<= 5 x) (= y (- 1)) (= x (- 1)) (= y (- 2)) (= x (- 2)) (= y (- 3)) (= x (- 3)) (= y (- 4)) (= x (- 4)) (= x (- 5)) (= y (- 5)) (= x (- 6)) (= y (- 6))) (or (= x 2) (= x 0) (= y 1) (= y 2) (<= y 5) (= y 3) (= y 4) (<= 2 x) (= y (- 1)) (= x (- 1)) (= y (- 2)) (= x (- 2)) (= y (- 3)) (= x (- 3)) (= y (- 4))) (or (= x 1) (= x 3) (= y 0) (= x 0) (= y 1) (= y 2) (<= y 5) (= y 3) (= y 4) (<= 3 x) (= y (- 1)) (= x (- 1)) (= y (- 2)) (= x (- 2)) (= y (- 3)) (= x (- 3)) (= y (- 4)) (= x (- 4))) (or (= x 2) (= x 1) (= x 0) (>= x 1) (<= 0 x)) (or (>= x 1) (not (= x 0)) (not (= y 0))) (or (= x 2) (= x 1) (= x 3) (= x 4) (<= x 5) (= x 0) (>= y 1) (= y (- 1)) (= x (- 1)) (= y (- 2)) (= x (- 2))) (>= y 0)) [ x := (- x 1)] goto 0;if (and (or (= y 1) (>= y 1)) (or (= y 0) (= y 1) (= y 2) (= y 3) (= y 4) (<= y 5) (= x 1) (= x 3) (= x 0) (= x 2) (= x 4) (= x 6) (= x (- 1)) (= y (- 1)) (= x (- 2)) (= y (- 2)) (= x (- 3)) (= x (- 4)) (= y (- 3)) (= x (- 5)) (= y (- 4)) (= x (- 6))) (or (= y 0) (= y 1) (= y 2) (= y 3) (= y 4) (<= y 5) (= x 1) (= x 3) (= x 0) (= x 2) (= x 5) (= x (- 1)) (= y (- 1)) (= x (- 2)) (= y (- 2)) (= x (- 3)) (= x (- 4)) (= y (- 3)) (= x (- 5)) (= y (- 4)) (= x (- 6))) (or (= y 0) (= y 1) (= y 2) (= y 3) (= y 4) (<= y 5) (= x 0) (= x 2) (<= 2 x) (= x (- 1)) (= y (- 1)) (= x (- 2)) (= y (- 2)) (= x (- 3)) (= x (- 4))) (or (= y 0) (= y 1) (= y 2) (= y 3) (= y 4) (<= y 5) (= x 1) (<= 1 x) (= x (- 1)) (= y (- 1)) (= x (- 2)) (= y (- 2)) (= x (- 3))) (or (= y 0) (= y 1) (= y 2) (= x 1) (= x 3) (= x 0) (= x 2) (<= x 5) (= x 4) (>= y 4) (= x (- 1)) (= y (- 1)) (= x (- 2)) (= y (- 2)) (= x (- 3)) (= x (- 4)) (= y (- 3)) (= x (- 5))) (or (= y 0) (= y 1) (= y 2) (= y 3) (= y 4) (<= y 5) (= x 1) (= x 3) (<= 3 x) (= x (- 1)) (= y (- 1)) (= x (- 2)) (= y (- 2)) (= x (- 3)) (= x (- 4)) (= y (- 3)) (= x (- 5))) (or (= y 0) (= y 1) (= y 2) (= y 3) (= y 4) (= x 1) (= x 3) (= x 0) (= x 2) (<= x 5) (= x 5) (= x (- 1)) (= y (- 1)) (= x (- 2)) (= y (- 2)) (= x (- 3)) (= x (- 4)) (= y (- 3)) (= x (- 5)) (= y (- 4)) (= x (- 6))) (or (= y 0) (= y 1) (= y 2) (= y 3) (= y 4) (<= y 5) (= x 1) (= x 0) (= x 2) (= x 4) (<= 4 x) (= x (- 1)) (= y (- 1)) (= x (- 2)) (= y (- 2)) (= x (- 3)) (= x (- 4)) (= y (- 3)) (= x (- 5)) (= y (- 4)) (= x (- 6))) (or (= y 0) (= y 1) (= x 1) (= x 3) (= x 0) (= x 2) (<= x 5) (= x 4) (>= y 3) (= x (- 1)) (= y (- 1)) (= x (- 2)) (= y (- 2)) (= x (- 3)) (= x (- 4)) (= y (- 3)) (= x (- 5))) (or (= y 0) (= x 1) (= x 3) (= x 0) (= x 2) (<= x 5) (= x 4) (>= y 2) (= x (- 1)) (= y (- 1)) (= x (- 2)) (= y (- 2)) (= x (- 3)) (= x (- 4))) (or (= y 0) (= y 1) (= y 2) (= y 3) (= x 1) (= x 3) (= x 0) (= x 2) (<= x 5) (= x 5) (>= y 5) (= x (- 1)) (= y (- 1)) (= x (- 2)) (= y (- 2)) (= x (- 3)) (= x (- 4)) (= y (- 3)) (= x (- 5)) (= y (- 4)) (= x (- 6))) (>= x 0)) [ y := (- y 1)] goto 0;if (and (or (= x 2) (= y 3) (= x 1) (= x 4) (= y 4) (= x 3) (= x 6) (<= 6 x) (>= y 6) (<= x 4) (= x 0) (<= y 4) (= x (- 1)) (= y (- 1)) (= x (- 2)) (= y (- 2)) (= x (- 3)) (= y (- 3)) (= x (- 4)) (= y (- 4)) (= x (- 5)) (= x (- 6)) (= y (- 5)) (= x (- 7)) (= y (- 6)) (= y (- 7))) (or (not (= x 0)) (not (= y 0))) (>= y 0) (<= y 5) (>= x 0) (<= x 5)) [] goto 0;if (and (or (= x 2) (= x 0) (= y 2) (= y 3) (= y 4) (<= y 5) (<= 2 x) (= x (- 1)) (= x (- 2)) (= y (- 1)) (= x (- 3)) (= y (- 2)) (= x (- 4)) (= y (- 3)) (= x (- 5)) (= y (- 4)) (= x (- 6)) (= y (- 5)) (= x (- 7))) (or (= y 1) (= y 2) (= y 3) (= y 4) (<= y 5) (= y 0) (= x 1) (<= 1 x) (= x (- 1)) (= x (- 2)) (= y (- 1)) (= x (- 3)) (= y (- 2)) (= x (- 4)) (= y (- 3)) (= x (- 5)) (= y (- 4)) (= x (- 6))) (or (= y 1) (= x 0) (= y 2) (= y 3) (= y 4) (<= y 5) (= y 0) (= x 1) (= x 3) (<= 3 x) (= x (- 1)) (= x (- 2)) (= y (- 1)) (= x (- 3)) (= y (- 2)) (= x (- 4)) (= y (- 3)) (= x (- 5)) (= y (- 4)) (= x (- 6)) (= y (- 5)) (= x (- 7)) (= y (- 6)) (= x (- 8))) (or (= y 1) (= x 2) (= x 0) (= y 2) (= y 3) (= y 0) (= x 1) (= x 3) (= x 4) (<= x 4) (= x (- 1)) (= x (- 2)) (= y (- 1)) (= x (- 3)) (= y (- 2)) (= x (- 4)) (= y (- 3)) (= x (- 5)) (= y (- 4)) (= x (- 6)) (= y (- 5)) (= x (- 7))) (or (= y 1) (= x 2) (= x 0) (= y 2) (= y 3) (= y 4) (<= y 5) (= y 0) (= x 1) (= x 4) (<= 4 x) (= x (- 1)) (= x (- 2)) (= y (- 1)) (= x (- 3)) (= y (- 2)) (= x (- 4)) (= y (- 3)) (= x (- 5)) (= y (- 4)) (= x (- 6)) (= y (- 5)) (= x (- 7)) (= y (- 6)) (= x (- 8))) (or (= y 1) (= x 2) (= y 0) (= x 1) (= x 3) (<= x 4) (>= y 3) (= x (- 1)) (= x (- 2)) (= y (- 1)) (= x (- 3)) (= y (- 2)) (= x (- 4)) (= y (- 3)) (= x (- 5)) (= y (- 4)) (= x (- 6))) (or (= y 1) (= x 2) (= x 0) (= y 2) (= y 3) (= y 4) (<= y 5) (= y 0) (= x 1) (= x 3) (= x 5) (= x (- 1)) (= x (- 2)) (= y (- 1)) (= x (- 3)) (= y (- 2)) (= x (- 4)) (= y (- 3)) (= x (- 5)) (= y (- 4)) (= x (- 6)) (= y (- 5)) (= x (- 7)) (= y (- 6)) (= x (- 8))) (or (= y 1) (= x 2) (= x 0) (= y 2) (= y 0) (= x 1) (= x 3) (= x 4) (<= x 4) (>= y 4) (= x (- 1)) (= x (- 2)) (= y (- 1)) (= x (- 3)) (= y (- 2)) (= x (- 4)) (= y (- 3)) (= x (- 5)) (= y (- 4)) (= x (- 6)) (= y (- 5)) (= x (- 7))) (or (= y 1) (= x 2) (= x 0) (= y 2) (= y 3) (= y 4) (= y 0) (= x 1) (= x 3) (= x 5) (<= 5 x) (<= x 3) (>= y 6) (<= y 4) (= x (- 1)) (= x (- 2)) (= y (- 1)) (= x (- 3)) (= y (- 2)) (= x (- 4)) (= y (- 3)) (= x (- 5)) (= y (- 4)) (= x (- 6)) (= y (- 5)) (= x (- 7)) (= y (- 6)) (= x (- 8)) (= y (- 7))) (or (= x 2) (= x 0) (= y 0) (= x 1) (= x 3) (<= x 4) (>= y 2) (= x (- 1)) (= x (- 2)) (= y (- 1)) (= x (- 3)) (= y (- 2)) (= x (- 4)) (= y (- 3)) (= x (- 5)) (= y (- 4)) (= x (- 6))) (or (= x 2) (= x 0) (= x 1) (= x 3) (<= x 4) (>= y 1) (= x (- 1)) (= x (- 2)) (= y (- 1)) (= x (- 3)) (= y (- 2)) (= x (- 4)) (= y (- 3)) (= x (- 5))) (or (not (= x 0)) (not (= y 0))) (>= x 0) (>= y 0)) [ x := (+ x 1)] goto 0;if (and (or (not (= x 0)) (not (= y 0))) (or (= x 2) (= x 1) (= x 3) (= x 4) (= x 0) (<= x 5) (>= y 1) (= y (- 1)) (= x (- 1)) (= y (- 2)) (= x (- 2)) (= y (- 3)) (= x (- 3)) (= y (- 4)) (= x (- 4)) (= y (- 5)) (= x (- 5))) (or (= x 2) (= y 0) (= x 1) (= x 3) (= x 0) (= x 5) (<= x 5) (>= y 2) (= y (- 1)) (= x (- 1)) (= y (- 2)) (= x (- 2)) (= y (- 3)) (= x (- 3)) (= y (- 4)) (= x (- 4)) (= y (- 5)) (= x (- 5))) (or (= x 2) (= y 0) (= y 1) (= y 2) (= y 3) (<= y 4) (= x 0) (<= 2 x) (= y (- 1)) (= x (- 1)) (= y (- 2)) (= x (- 2)) (= y (- 3)) (= x (- 3)) (= y (- 4)) (= x (- 4)) (= y (- 5)) (= x (- 5))) (or (= x 2) (= y 0) (= x 1) (= x 3) (= y 1) (= x 0) (= x 5) (<= x 5) (>= y 3) (= y (- 1)) (= x (- 1)) (= y (- 2)) (= x (- 2)) (= y (- 3)) (= x (- 3)) (= y (- 4)) (= x (- 4)) (= y (- 5)) (= x (- 5)) (= x (- 6)) (= y (- 6))) (or (= y 0) (= x 1) (= x 3) (= y 1) (= y 2) (= y 3) (<= y 4) (= x 0) (<= 3 x) (= y (- 1)) (= x (- 1)) (= y (- 2)) (= x (- 2)) (= y (- 3)) (= x (- 3)) (= y (- 4)) (= x (- 4)) (= y (- 5)) (= x (- 5)) (= x (- 6)) (= y (- 6))) (or (= x 2) (= y 0) (= x 1) (= x 3) (= y 1) (= y 2) (= y 3) (<= y 4) (= x 0) (= x 5) (<= 5 x) (= y (- 1)) (= x (- 1)) (= y (- 2)) (= x (- 2)) (= y (- 3)) (= x (- 3)) (= y (- 4)) (= x (- 4)) (= y (- 5)) (= x (- 5)) (= x (- 6)) (= y (- 6)) (= x (- 7)) (= y (- 7))) (or (= x 2) (= y 0) (= x 1) (= y 1) (= x 4) (= y 2) (= y 3) (<= y 4) (= x 0) (<= 4 x) (= y (- 1)) (= x (- 1)) (= y (- 2)) (= x (- 2)) (= y (- 3)) (= x (- 3)) (= y (- 4)) (= x (- 4)) (= y (- 5)) (= x (- 5)) (= x (- 6)) (= y (- 6)) (= x (- 7)) (= y (- 7))) (or (= x 2) (= y 0) (= x 1) (= x 3) (= y 1) (= x 4) (= y 2) (= y 3) (= x 6) (= x 0) (<= 6 x) (>= y 5) (<= x 4) (<= y 3) (= y (- 1)) (= x (- 1)) (= y (- 2)) (= x (- 2)) (= y (- 3)) (= x (- 3)) (= y (- 4)) (= x (- 4)) (= y (- 5)) (= x (- 5)) (= x (- 6)) (= y (- 6)) (= x (- 7)) (= y (- 7)) (= y (- 8))) (or (= x 2) (= y 0) (= x 1) (= x 3) (= y 1) (= y 2) (= x 0) (= x 5) (<= x 5) (= y (- 1)) (= x (- 1)) (= y (- 2)) (= x (- 2)) (= y (- 3)) (= x (- 3)) (= y (- 4)) (= x (- 4)) (= y (- 5)) (= x (- 5)) (= x (- 6)) (= y (- 6))) (or (= x 2) (= y 0) (= x 1) (= x 3) (= y 1) (= x 4) (= y 2) (= y 3) (= x 6) (<= y 4) (= y (- 1)) (= x (- 1)) (= y (- 2)) (= x (- 2)) (= y (- 3)) (= x (- 3)) (= y (- 4)) (= x (- 4)) (= y (- 5)) (= x (- 5)) (= x (- 6)) (= y (- 6)) (= x (- 7)) (= y (- 7))) (>= x 0) (>= y 0)) [ y := (+ y 1)] goto 0;otherwise abort() };
1: read  y x; case {if true [] goto 1;otherwise abort() };
2: abort();
3: read  y x; case {if (or (not (<= 0 env_in_x)) (not (<= env_in_x 5)) (not (<= 0 env_in_y)) (not (<= env_in_y 5))) [] goto 1;if (and (>= env_in_x 0) (<= env_in_x 5) (>= env_in_y 0) (<= env_in_y 5)) [ x := env_in_x y := env_in_y] goto 0;otherwise abort() };
Sucessfull Accelerations: 0

