type Buechi

output trackPos Int

output workingDevice Bool
output neededSparePieces Int
output sparePieces Int

input break Bool
input brokenPieces Int

loc base 1
loc repair 0 
loc stock 0
loc moveToBase 0
loc moveToDevice 0
loc moveToStock 0

init moveToBase

trans moveToBase
    if (= trackPos 23)
    then base
    else sys (
        () moveToBase
        ((trackPos (+ trackPos 1))) moveToBase
        ((trackPos (- trackPos 1))) moveToBase
    )

trans moveToDevice
    if (= trackPos 25)
    then repair
    else sys (
        () moveToDevice
        ((trackPos (+ trackPos 1))) moveToDevice
        ((trackPos (- trackPos 1))) moveToDevice
    )

trans moveToStock
    if (= trackPos (- 3))
    then stock
    else sys (
        () moveToStock
        ((trackPos (+ trackPos 1))) moveToStock
        ((trackPos (- trackPos 1))) moveToStock
    )

trans base 
    if workingDevice then 
    if break 
    then sys (((workingDevice false) (neededSparePieces brokenPieces)) base)
    else base
    else moveToStock


trans stock 
    if (<= neededSparePieces sparePieces)
        then sys (((sparePieces (+ sparePieces 1))) stock)
        else moveToDevice  

trans repair 
    if (<= neededSparePieces sparePieces)
        then sys ( ((workingDevice true) (sparePieces 0)) moveToBase)
        else repair
