#LIA
//-- State:  c, x, y
//-- Inputs: e

assume{
    (eq x int0());
    (eq c int0());
}

guarantee {

    // updates c
    G ([c <- int0()] || [c <- int1()]);
    G ((eq c int1()) -> [c <- int1()]);
    
    // updates x
    G ( (eq c int0()) -> [x <- add x e] || [x <- sub x  e]);
    G (!(eq c int0()) -> [x <- add x y]);

    // updates y
    [y <- add x int1()];
    X G [y <- y];
    
    // objectives
    G ((eq c int0()) -> (gte x int0()));
    G (!(eq c int0()) -> F (lte x (sub int0() int10000())));
    X (gt y int0());
}
