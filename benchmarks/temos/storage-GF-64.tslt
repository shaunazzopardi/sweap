#LIA
//-- State:  numE, process

MINELEMS = int64();

moreElems = (gt numE MINELEMS);
fewElems = (lt numE MINELEMS);
empty  = (lte numE int0());

processing =  !(eq process int0());

assume {
    (eq numE int0());
    !processing;
}

guarantee{

    G (gte numE int0());
    G ((eq process int0()) || (eq process int1()));

    // fill storage
    G (empty -> [numE <- add numE int1()] && ([process <- int0()] || [process <- int1()]));
    G (!empty && !processing -> [numE <- add numE int1()] && ([process <- int0()] || [process <- int1()]));

    // if more than MINE elements, remove one
    G (!empty && processing && moreElems -> [numE <- sub numE int1()] && [process <- process]);

    // if too few elems then stuck
    G (!empty && processing && fewElems -> [numE <- numE] && [process <- process]);

    // batch-process remaining elements
    G (!empty && processing && !fewElems && !moreElems -> [numE <- int0()] && [process <- int0()]);
    
    // infinitely often storagte empty
    G F (empty);

}
