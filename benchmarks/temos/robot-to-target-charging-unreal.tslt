#LIA
//-- State:  cDist, battery, atStationi
//-- Inputs: distToTarget

atStation = eq atStationi int1();

MIND = int50();
MAXD = int70();

MAXBAT = int100();

move =  [cDist <- sub cDist int1()] && [battery <- sub battery int1()];
chargte = [cDist <- cDist] && [battery <- add battery int1()];
stay = [cDist <- cDist] && [battery <- battery];
atGoal = (lte cDist int0());


assume {
    (eq battery int0());   
    atStation && atStation;

    (gte distToTarget MIND) && (lte distToTarget MAXD);    
}


guarantee {
       
    // initially
    atStation && [cDist <- distToTarget] && [atStationi <- int0()] && [battery <- battery];
    X ((gte cDist MIND) && (lte cDist MAXD));

    // at station
    X G (atStation && (lt battery distToTarget) ->  [atStationi <- int1()] && charge);
    X G (atStation && (gte battery distToTarget) -> [atStationi <- int1()] && chargte || 
                                             [atStationi <- int0()] && stay);   
    // on the way
    G (!atStation && !atGoal -> [atStationi <- int0()] && move);
    G (!atStation && atGoal -> [atStationi <- int0()] && stay);

    // battery 
    G (lte battery MAXBAT);
    G (gte battery int0());

    // objective
    F (atGoal);

}
