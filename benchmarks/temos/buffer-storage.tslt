#LIA
//-- State: numE, buffE, processE
//-- Inputs: done

assume {
    (eq processE int0()) && (eq buffE int0()) && (eq numE int0());
}

always assume {
    eq done int0() || eq done int1();
}

guarantee {
    G ((!(eq processE int1()) && !(eq done int1()) && !(gte buffE int128())) -> ((([buffE <- add buffE int1()] && [numE <- numE]) || ([buffE <- int0()] && [numE <- (add numE buffE)])) && [processE <- processE]));
    G ((!(eq processE int1()) && !(eq done int1()) && (gte buffE int128())) -> (([buffE <- int0()] && [numE <- add numE buffE]) && [processE <- processE]));
    G ((!(eq processE int1()) && (eq done int1()) && (gte buffE int64())) -> (([buffE <- int0()] && [numE <- add numE buffE]) && [processE <- int1()]));
    G ((!(eq processE int1()) && (eq done int1()) && (lt buffE int64())) -> ([buffE <- buffE] && [numE <- numE] && [processE <- int1()]));
    G ((eq processE int1()) -> [buffE <- buffE]);

    G (((eq processE int1()) && (gt numE int64())) -> ([numE <- sub numE int1()] && [processE <- processE]));

    G (((eq processE int1()) && (lt numE int64())) -> ([numE <- numE] && [processE <- processE]));

    G (((eq processE int1()) && !(lt numE int64()) && !(gt numE int64())) -> ([numE <- int0()] && [processE <- int0()]));
    
    G ((eq processE int1()) -> F (eq numE int0()));

}
