#LIA
//-- State:  x, y, done

START = int10();
TARGET = int20();

assume{
    (eq x START);
    (eq y START);
    (eq done int0());
}

guarantee{

    // phase 1
    F ((eq x int0()) || (eq y int0()));

    //phase 2
    F (!(eq done int0()) && ((gte x TARGET) || (gte y TARGET)));

    
    // updates to x
    G ((eq done int0()) && !(eq y int0()) -> ([x <- x] || [x <- sub x int1()]));
    G ((eq done int0()) &&  (eq y int0()) -> [x <- int0()]);
    G (!(eq done int0()) && !(eq y int0()) -> [x <- add x int1()]);
    G (!(eq done int0()) &&  (eq y int0()) -> [x <- x]);

    // updates to y
    G ((eq done int0()) && !(eq y int0()) -> ([y <- y] || [y <- sub y int1()]));
    G ((eq done int0()) &&  (eq y int0()) -> [y <- int0()]);
    G (!(eq done int0()) -> [y <- y]);

    // updates to done
    G ((eq done int0()) && ((eq x int0()) || (eq y int0())) -> [done <- int1()]);
    G ((eq done int0()) && !((eq x int0()) || (eq y int0())) -> [done <- done]);
    G (!(eq done int0()) -> [done <- done]);

}
