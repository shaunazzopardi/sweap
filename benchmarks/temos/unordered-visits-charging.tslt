#LIA
//-- State:  x, dX, charge

L1 = int50();
L2 = (sub int0() int70());
START = int0();

MAXCHARGE = int150();
INITCHARGE = int60();


move =  [x <- add x dX] && [chargte <- sub chargte int1()];
charging = [x <- x] && [chargte <- add chargte int1()];
stay = [x <- x] && [chargte <- charge];
moveUp =  [x <- add x int1()];
moveDown =  [x <- add x (sub int0() int1())];


changeDir =  ([dX <- int1()] || [dX <- sub int0() int1()]);
keepDir   = [dX <- dX];
changeDirUp = [dX <- int1()];
changeDirDown = [dX <- sub int0() int1()];


assume {
    (eq chargte INITCHARGE);   
    (eq x START);
}

guarantee {
    
    X G ((eq dX int1()) || (eq dX (sub int0() int1())));

    // at the beginning
    stay && changeDir;

    // at L1
    X G((gte x L1) -> (moveDown && changeDirDown || charging && keepDir));
    
    // at L2
    X G((lte x L2) -> (moveUp && changeDirUp || charging && keepDir));
 
    // on the way
    X G(!(gte x L1) && !(lte x L2) -> move && keepDir);
    
    G ((gte chargte int0()) && (lte chargte MAXCHARGE));

    F (gte x L1);
    F (lte x L2);

}
