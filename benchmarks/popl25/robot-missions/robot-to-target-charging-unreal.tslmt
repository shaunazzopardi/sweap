var Int cDist
var Int battery
var Bool atStation

inp Int distToTarget



SPECIFICATION

MIND = i50();
MAXD = i70();

MAXBAT = i100();

move =  [cDist <- sub cDist i1()] && [battery <- sub battery i1()];
charge = [cDist <- cDist] && [battery <- add battery i1()];
stay = [cDist <- cDist] && [battery <- battery];
atGoal = (lte cDist i0());


assume {
    (eq battery i0());   
    atStation && atStation;

    (gte distToTarget MIND) && (lte distToTarget MAXD);    
}


guarantee {
       
    // initially
    atStation && [cDist <- distToTarget] && [atStation <- false] && [battery <- battery];
    X ((gte cDist MIND) && (lte cDist MAXD));

    // at station
    X G (atStation && (lt battery distToTarget) ->  [atStation <- true] && charge);
    X G (atStation && (gte battery distToTarget) -> [atStation <- true] && charge || 
                                             [atStation <- false] && stay);   
    // on the way
    G (!atStation && !atGoal -> [atStation <- false] && move);
    G (!atStation && atGoal -> [atStation <- false] && stay);

    // battery 
    G (lte battery MAXBAT);
    G (gte battery i0());

    // objective
    F (atGoal);

}